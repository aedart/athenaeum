import{_ as c,M as i,p as r,q as u,R as n,t as a,N as s,U as e,a1 as p}from"./framework-efe98465.js";const d={},k=n("h1",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),a(" Introduction")],-1),v={href:"https://laravel.com/docs/10.x/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"},h={class:"table-of-contents"},m=p(`<h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><p>The request abstractions are ONLY available when you are working in a full Laravel application. The abstractions inherit from the <code>FormRequest</code> class, which is only available in Laravel&#39;s Foundation namespace.</p><h2 id="validated-api-request" tabindex="-1"><a class="header-anchor" href="#validated-api-request" aria-hidden="true">#</a> Validated Api Request</h2><p>At the top-most abstraction level, you will find the <code>ValidatedApiRequest</code>. It offers but a few additional features, such as an <code>after()</code> method that can be overwritten to perform additional business logic validation, after your request&#39;s regular validation has completed.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>ValidatedApiRequest</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Validator</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ShowProfile</span> <span class="token keyword">extends</span> <span class="token class-name">ValidatedApiRequest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token comment">// ...rules not shown here...</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">after</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Validator</span> <span class="token variable">$validator</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Use this method to perform additional validation.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>$validator</code> instance that is provided for the <code>after()</code> method contains all valid data. You can access the data and use it, if needed. Examples of what kind of additional validation you might perform, could be:</p>`,6),b={href:"https://laravel.com/docs/10.x/validation#available-validation-rules",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"Query additional resources and ensure they exist, match or otherwise fit with what is requested.",-1),g=n("li",null,[a("Perform special domain specific conditions check ("),n("em",null,"whatever that might be for your application"),a(").")],-1),_=n("li",null,[n("em",null,"Prepare data to be processed by your route or controller action.")],-1),w=p(`<p>The last example might not be that self-evident. However, sometimes when preparing data for processing, additional validation might be required. This might be true, when certain kinds of validation logic only can be performed during data preparation.</p><h2 id="authorisation" tabindex="-1"><a class="header-anchor" href="#authorisation" aria-hidden="true">#</a> Authorisation</h2><p>To perform authorisation checks, you can leverage the <code>authorize()</code> method (<em>available via Laravel&#39;s <code>FormRequest</code></em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token class-name static-context">Comment</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">return</span> <span class="token variable">$comment</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">allows</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;show&#39;</span><span class="token punctuation">,</span> <span class="token variable">$comment</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>authorize()</code> method is invoked before your regular validation is performed. But, sometimes it might not be possible or feasible to perform authorisation checks before data validation. In such situations, you can leverage the <code>authorizeAfterValidation()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">authorizeAfterValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Obtain your data, model instance... or whatever</span>
    <span class="token comment">// might be required to perform authorisation...</span>
    <span class="token variable">$record</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">record</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">allows</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token variable">$record</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>authorizeAfterValidation()</code> method is automatically invoked after the <code>after()</code> method has executed.</p><h2 id="http-conditional-requests" tabindex="-1"><a class="header-anchor" href="#http-conditional-requests" aria-hidden="true">#</a> Http Conditional Requests</h2>`,8),y=n("code",null,"ValidatedApiRequest",-1),q={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"Evaluator",-1),A=n("code",null,"evaluateRequestPreconditions()",-1),R=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>HasEtag</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>ValidatedApiRequest</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ShowProfile</span> <span class="token keyword">extends</span> <span class="token class-name">ValidatedApiRequest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prepareForValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 1) Find requested resource or fail.</span>
        <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">findOrFailModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2) Evaluate request preconditions for &quot;record&quot;</span>
        <span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">evaluateRequestPreconditions</span><span class="token punctuation">(</span>
            <span class="token argument-name">record</span><span class="token punctuation">:</span> <span class="token variable">$model</span><span class="token punctuation">,</span>
            <span class="token argument-name">etag</span><span class="token punctuation">:</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">getStrongEtag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token argument-name">lastModifiedDate</span><span class="token punctuation">:</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token property">updated_at</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">findOrFailModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Model</span> <span class="token operator">&amp;</span> HasEtag
    <span class="token punctuation">{</span>
        <span class="token comment">// ...not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),V=n("code",null,"\\Aedart\\Http\\Api\\Requests\\Concerns\\HttpConditionals",-1),$=n("h2",{id:"onward",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#onward","aria-hidden":"true"},"#"),a(" Onward")],-1),T=n("p",null,"Throughout the remaining of this chapter, additional specialised API request abstractions are briefly highlighted. Feel free to extend and use these abstractions, as you see fit.",-1);function C(E,P){const o=i("ExternalLinkIcon"),t=i("router-link"),l=i("RouterLink");return r(),u("div",null,[k,n("p",null,[a("This package also offers a few opinionated "),n("a",v,[a("Form Request"),s(o)]),a(" abstractions, intended to be used for APIs.")]),n("nav",h,[n("ul",null,[n("li",null,[s(t,{to:"#prerequisites"},{default:e(()=>[a("Prerequisites")]),_:1})]),n("li",null,[s(t,{to:"#validated-api-request"},{default:e(()=>[a("Validated Api Request")]),_:1})]),n("li",null,[s(t,{to:"#authorisation"},{default:e(()=>[a("Authorisation")]),_:1})]),n("li",null,[s(t,{to:"#http-conditional-requests"},{default:e(()=>[a("Http Conditional Requests")]),_:1})]),n("li",null,[s(t,{to:"#onward"},{default:e(()=>[a("Onward")]),_:1})])])]),m,n("ul",null,[n("li",null,[a("Complex cross-field validation that "),n("a",b,[a("regular validation rules"),s(o)]),a(" might not be able to satisfy.")]),f,g,_]),w,n("p",null,[a("The "),y,a(" also offers support for dealing with "),n("a",q,[a("Http Conditional Requests"),s(o)]),a(". It is able to evaluate request preconditions, via the "),s(l,{to:"/archive/v7x/etags/evaluator/"},{default:e(()=>[x,a(" component")]),_:1}),a(". To enable evaluation of preconditions, invoke the "),A,a(" method.")]),R,n("p",null,[a("Please review "),V,a(" and the "),s(l,{to:"/archive/v7x/etags/"},{default:e(()=>[a("ETags package documentation")]),_:1}),a(" for additional information.")]),$,T])}const I=c(d,[["render",C],["__file","index.html.vue"]]);export{I as default};
