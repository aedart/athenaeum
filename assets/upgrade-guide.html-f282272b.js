import{_ as r,M as i,p as l,q as c,R as e,N as n,U as t,t as a,a1 as d}from"./framework-efe98465.js";const p={},u=e("h1",{id:"upgrade-guide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#upgrade-guide","aria-hidden":"true"},"#"),a(" Upgrade Guide")],-1),h=e("h2",{id:"from-version-6-x-to-7-x",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#from-version-6-x-to-7-x","aria-hidden":"true"},"#"),a(" From version 6.x to 7.x.")],-1),v={class:"table-of-contents"},m=d('<h3 id="php-version-8-1-required" tabindex="-1"><a class="header-anchor" href="#php-version-8-1-required" aria-hidden="true">#</a> PHP version <code>8.1</code> required</h3><p>You need PHP <code>v8.1</code> or higher to run Athenaeum packages.</p><p><strong>Note</strong>: <em>PHP <code>v8.2</code> is supported!</em></p><h3 id="laravel-v10-x" tabindex="-1"><a class="header-anchor" href="#laravel-v10-x" aria-hidden="true">#</a> Laravel <code>v10.x</code></h3>',4),g={href:"https://laravel.com/docs/10.x/upgrade",target:"_blank",rel:"noopener noreferrer"},k=d(`<h3 id="field-criteria" tabindex="-1"><a class="header-anchor" href="#field-criteria" aria-hidden="true">#</a> Field Criteria</h3><p>The <code>\\Aedart\\Contracts\\Database\\Query\\FieldCriteria::make()</code> and <code>\\Aedart\\Database\\Query\\FieldFilter::make()</code> now have optional <code>$field</code> argument. This will allow creating instances of custom filters, without specifying a field. The instance will NOT be applicable, until a field has been set.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>BelongsToFilter</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">BelongsToFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...later in your application</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">setField</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;authors&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-filter" tabindex="-1"><a class="header-anchor" href="#date-filter" aria-hidden="true">#</a> Date Filter</h3><p>The <code>\\Aedart\\Filters\\Query\\Filters\\Fields\\DateFilter::allowedDateFormats()</code> method&#39;s visibility has been changed to <code>public</code> (<em>previously <code>protected</code></em>). The method now returns a default set of supported date formats. These can also be specified via the <code>setAllowedDateFormats()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>DateFilter</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token class-name static-context">DateFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;event_date&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">setAllowedDateFormats</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api-resource-service-provider" tabindex="-1"><a class="header-anchor" href="#api-resource-service-provider" aria-hidden="true">#</a> Api Resource Service Provider</h3><p>The <code>ApiResourceServiceProvider</code> is now an aggregate service provider, which automatically registers the <code>ETagsServiceProvider</code> and the new <code>JsonResourceServiceProvider</code> (<em>the previous version of <code>ApiResourceServiceProvider</code></em>).</p><h3 id="audit-package" tabindex="-1"><a class="header-anchor" href="#audit-package" aria-hidden="true">#</a> Audit Package</h3><p>The Audit package has been slightly refactored. As a result, a few components have been deprecated and replaced with improved versions. However, the dispatched events have undergone some breaking changes.</p><h4 id="deprecations" tabindex="-1"><a class="header-anchor" href="#deprecations" aria-hidden="true">#</a> Deprecations</h4><ul><li><code>\\Aedart\\Audit\\Traits\\RecordsChanges</code> trait. Replaced by <code>\\Aedart\\Audit\\Concerns\\ChangeRecording</code>.</li><li><code>\\Aedart\\Audit\\Traits\\HasAuditTrail</code> trait Replaced by <code>\\Aedart\\Audit\\Concerns\\AuditTrail</code>.</li><li><code>\\Aedart\\Audit\\Models\\Concerns\\AuditTrailConfiguration</code> concern. Replaced by <code>\\Aedart\\Audit\\Concerns\\AuditTrailConfig</code>.</li></ul><p>The deprecated components will be removed in the next major version.</p><h4 id="dispatch-multiple-models-changed" tabindex="-1"><a class="header-anchor" href="#dispatch-multiple-models-changed" aria-hidden="true">#</a> Dispatch Multiple Models Changed</h4><p>The <code>ModelChangedEvents::dispatchMultipleModelsChanged()</code> no longer skips all models, if the first is marked as &quot;skip next recording&quot; (<em>via model&#39;s <code>skipRecordingNextChange()</code></em>). Instead, models are now filtered by their skip state. Only if the models allow recording, will they be included in the dispatched event.</p><h4 id="multiple-models-changed-event" tabindex="-1"><a class="header-anchor" href="#multiple-models-changed-event" aria-hidden="true">#</a> Multiple Models Changed Event</h4><p>The public <code>$models</code> attribute can no longer be an <code>array</code>, in <code>MultipleModelsChanged</code>. The attribute must now be a <code>Collection</code> instance.</p><h4 id="model-changed-events-trait" tabindex="-1"><a class="header-anchor" href="#model-changed-events-trait" aria-hidden="true">#</a> Model Changed Events (<em>trait</em>)</h4><p>The <code>\\Aedart\\Audit\\Observers\\Concerns\\ModelChangedEvents</code> concern/trait has been redesigned. Its methods now accept all supported arguments of <code>ModelHasChanged</code> event. Previously, only <code>$model</code>, event <code>$type</code> and a <code>$message</code> was accepted. Now, the all create / make methods accept the following arguments:</p><ul><li><code>Model $model</code> The model that has changed.</li><li><code>string $type</code> The event type.</li><li><code>array|null $original = null</code> (<em>optional</em>) Original data (attributes) before change occurred. Default&#39;s to given model&#39;s original data, if none given.</li><li><code>array|null $changed = null</code> (<em>optional</em>) Changed data (attributes) after change occurred. Default&#39;s to given model&#39;s changed data, if none given.</li><li><code>string|null $message = null</code> (<em>optional</em>) Eventual user provided message associated with the event. Defaults to model&#39;s Audit Trail Message, if available.</li><li><code>Model|Authenticatable|null $user = null</code> (<em>optional</em>) The user that caused the change. Defaults to current authenticated user.</li><li><code>DateTimeInterface|Carbon|string|null $performedAt = null</code> (<em>optional</em>) Date and time of when the event happened. Defaults to model&#39;s &quot;updated at&quot; value, if available, If not, then current date time is used.</li></ul><h3 id="changed-publicpath-and-langpath-in-core-application" tabindex="-1"><a class="header-anchor" href="#changed-publicpath-and-langpath-in-core-application" aria-hidden="true">#</a> Changed <code>publicPath()</code> and <code>langPath()</code> in Core Application</h3><p>From Laravel <code>v10.x</code>, the <code>\\Illuminate\\Contracts\\Foundation\\Application</code> interface defines <code>publicPath()</code> and <code>langPath()</code>, which the Core application inherits from. The method signature has changed and may cause compatible issues, if you overwrite these methods.</p><p><strong>Before</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...In \\Aedart\\Contracts\\Core\\Application...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">publicPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">langPath</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Now</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...Inherited from \\Illuminate\\Contracts\\Foundation\\Application...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">publicPath</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">langPath</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have overwritten these methods, then you must ensure that the method signature is compatible with Laravel&#39;s <code>Application</code> interface.</p><h3 id="removed-searchprocessor-language" tabindex="-1"><a class="header-anchor" href="#removed-searchprocessor-language" aria-hidden="true">#</a> Removed <code>SearchProcessor::language()</code></h3><p>The deprecated <code>\\Aedart\\Filters\\Processors\\SearchProcessor::language()</code> method has been removed. This features didn&#39;t work as intended. No replacement has been implemented.</p><h3 id="removed-str-tree" tabindex="-1"><a class="header-anchor" href="#removed-str-tree" aria-hidden="true">#</a> Removed <code>Str::tree()</code></h3><p><code>\\Aedart\\Utils\\Str::tree()</code> was deprecated in <code>v6.4</code>. It has been replaced by <code>\\Aedart\\Utils\\Arr::tree()</code>.</p><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2>`,32),f={href:"https://github.com/aedart/athenaeum/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"};function b(w,x){const s=i("router-link"),o=i("ExternalLinkIcon");return l(),c("div",null,[u,h,e("nav",v,[e("ul",null,[e("li",null,[n(s,{to:"#from-version-6-x-to-7-x"},{default:t(()=>[a("From version 6.x to 7.x.")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#php-version-8-1-required"},{default:t(()=>[a("PHP version 8.1 required")]),_:1})]),e("li",null,[n(s,{to:"#laravel-v10-x"},{default:t(()=>[a("Laravel v10.x")]),_:1})]),e("li",null,[n(s,{to:"#field-criteria"},{default:t(()=>[a("Field Criteria")]),_:1})]),e("li",null,[n(s,{to:"#date-filter"},{default:t(()=>[a("Date Filter")]),_:1})]),e("li",null,[n(s,{to:"#api-resource-service-provider"},{default:t(()=>[a("Api Resource Service Provider")]),_:1})]),e("li",null,[n(s,{to:"#audit-package"},{default:t(()=>[a("Audit Package")]),_:1})]),e("li",null,[n(s,{to:"#changed-publicpath-and-langpath-in-core-application"},{default:t(()=>[a("Changed publicPath() and langPath() in Core Application")]),_:1})]),e("li",null,[n(s,{to:"#removed-searchprocessor-language"},{default:t(()=>[a("Removed SearchProcessor::language()")]),_:1})]),e("li",null,[n(s,{to:"#removed-str-tree"},{default:t(()=>[a("Removed Str::tree()")]),_:1})])])]),e("li",null,[n(s,{to:"#onward"},{default:t(()=>[a("Onward")]),_:1})])])]),m,e("p",null,[a("Please read Laravel's "),e("a",g,[a("upgrade guide"),n(o)]),a(", before continuing here.")]),k,e("p",null,[a("More extensive details can be found in the "),e("a",f,[a("changelog"),n(o)]),a(".")])])}const _=r(p,[["render",b],["__file","upgrade-guide.html.vue"]]);export{_ as default};
