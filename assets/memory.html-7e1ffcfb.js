import{_ as i,M as c,p as l,q as r,R as s,t as n,N as a,U as t,a1 as p}from"./framework-efe98465.js";const u={},d=s("h1",{id:"memory",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#memory","aria-hidden":"true"},"#"),n(" Memory")],-1),k={href:"https://en.wikipedia.org/wiki/Byte",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Byte#Multiple-byte_units",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/International_System_of_Units",target:"_blank",rel:"noopener noreferrer"},h=p(`<p><strong>Example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Memory</span><span class="token punctuation">;</span>

<span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token number">5_300_000_000</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">binaryFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4.9 GiB</span>
<span class="token keyword">echo</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">decimalFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5.3 GB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b={class:"table-of-contents"},g=p(`<h2 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> Create</h2><h3 id="from-bytes" tabindex="-1"><a class="header-anchor" href="#from-bytes" aria-hidden="true">#</a> From Bytes</h3><p>To create a new memory unit instance from bytes, use the static <code>unit()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token number">2_000_000</span><span class="token punctuation">;</span>
<span class="token variable">$unit</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from-string" tabindex="-1"><a class="header-anchor" href="#from-string" aria-hidden="true">#</a> From String</h3><p>You can also create a new instance from a string.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$unit</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.48 kb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1480</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The accepted format has to match the following:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>format = value space unit;
value = INT | FLOAT;
space = &quot;&quot; | &quot; &quot;; // optional whitespace character
unit = (unit symbol or name);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Given the above shown format, the following strings can all be parsed into a value unit.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;28 b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.48 kb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;3 megabyte&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2 MiB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$e</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.1gigabyte&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$f</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;5 terabytes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$g</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2.35 PB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from-other-values" tabindex="-1"><a class="header-anchor" href="#from-other-values" aria-hidden="true">#</a> From Other Values</h3><p>Lastly, you can also create a unit instance from other units than bytes.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromKibibyte</span><span class="token punctuation">(</span><span class="token number">1540</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromMegabyte</span><span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromGibibyte</span><span class="token punctuation">(</span><span class="token number">1.33</span><span class="token punctuation">)</span>
<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="convert" tabindex="-1"><a class="header-anchor" href="#convert" aria-hidden="true">#</a> Convert</h2><p>The memory unit offers various conversion methods.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$gibibyte</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromGibibyte</span><span class="token punctuation">(</span><span class="token number">1.33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$gibibyte</span><span class="token operator">-&gt;</span><span class="token function">toMegabyte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1428.1</span>
<span class="token keyword">echo</span> <span class="token variable">$gibibyte</span><span class="token operator">-&gt;</span><span class="token function">toLegacyMegabyte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1361.9</span>
<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use the <code>to()</code> method, to specify a string unit to convert the unit into:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$unit</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token number">5_340_000_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bytes</span>

<span class="token keyword">echo</span> <span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gigabyte&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5.34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong> <em>The second argument is the rounding precision.</em></p><h2 id="formatting" tabindex="-1"><a class="header-anchor" href="#formatting" aria-hidden="true">#</a> Formatting</h2><p>To format a unit to a &quot;human-readable&quot; string, you can use either of the following methods:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">binaryFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">decimalFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">legacyFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// binary using legacy metric name</span>
<span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Defaults to &quot;binary&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),f={href:"https://en.wikipedia.org/wiki/Byte#Multiple-byte_units",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="snapshot" tabindex="-1"><a class="header-anchor" href="#snapshot" aria-hidden="true">#</a> Snapshot</h2><p>The <code>snapshot()</code> method returns the current amount of memory used by PHP.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$snapshot</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$snapshot</span><span class="token operator">-&gt;</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 544812</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_=s("code",null,"$reset",-1),x={href:"https://www.php.net/manual/en/function.memory-reset-peak-usage.php",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$snapshot</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$snapshot</span><span class="token operator">-&gt;</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 527729</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>Please review the source code of <code>Aedart\\Utils\\Memory</code> and <code>Aedart\\Utils\\Memory\\Unit</code> for additional information.</p>`,3);function $(M,q){const o=c("ExternalLinkIcon"),e=c("router-link");return l(),r("div",null,[d,s("p",null,[n("A memory utility that is able to convert between various order of magnitude. It uses "),s("a",k,[n("bytes"),a(o)]),n(" as its lowest value and offers support upto "),s("a",m,[n("Exabyte or Exbibyte"),a(o)]),n('. In addition, it is also able to format a size to a "human-readable".')]),s("p",null,[s("a",v,[n("SI"),a(o)]),n(' "decimal" and "binary" values are supported.')]),h,s("nav",b,[s("ul",null,[s("li",null,[a(e,{to:"#create"},{default:t(()=>[n("Create")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#from-bytes"},{default:t(()=>[n("From Bytes")]),_:1})]),s("li",null,[a(e,{to:"#from-string"},{default:t(()=>[n("From String")]),_:1})]),s("li",null,[a(e,{to:"#from-other-values"},{default:t(()=>[n("From Other Values")]),_:1})])])]),s("li",null,[a(e,{to:"#convert"},{default:t(()=>[n("Convert")]),_:1})]),s("li",null,[a(e,{to:"#formatting"},{default:t(()=>[n("Formatting")]),_:1})]),s("li",null,[a(e,{to:"#snapshot"},{default:t(()=>[n("Snapshot")]),_:1})]),s("li",null,[a(e,{to:"#onward"},{default:t(()=>[n("Onward")]),_:1})])])]),g,s("p",null,[n("See "),s("a",f,[n("wiki"),a(o)]),n(", and source code for details.")]),y,s("p",null,[n("The method also accepts a boolean "),_,n(" argument, which will automatically "),s("a",x,[n("reset the peak memory"),a(o)]),n(", before capturing the snapshot.")]),w])}const B=i(u,[["render",$],["__file","memory.html.vue"]]);export{B as default};
