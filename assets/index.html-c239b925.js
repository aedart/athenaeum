import{_ as t,M as p,p as o,q as l,R as s,t as n,N as e,a1 as i}from"./framework-efe98465.js";const c={},r=s("h1",{id:"properties-overload",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#properties-overload","aria-hidden":"true"},"#"),n(" Properties Overload")],-1),d={href:"https://www.php.net/manual/en/language.oop5.magic.php",target:"_blank",rel:"noopener noreferrer"},u=s("p",null,"The usage of getters- and setters-methods is enforced, ensuring that if a property is indeed available, its corresponding getter or setter method will be invoked.",-1),k={href:"http://php.net/manual/en/language.oop5.overloading.php",target:"_blank",rel:"noopener noreferrer"},v=i(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Properties<span class="token punctuation">\\</span>Overload</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@property</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span><span class="token keyword">null</span></span> <span class="token parameter">$name</span> Name of a person
 */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Overload</span><span class="token punctuation">;</span>
    
    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
	    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Provided name is invalid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Elsewhere in your application, you can invoke the following:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Alin&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Invokes the setName(...)</span>

<span class="token keyword">echo</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>	<span class="token comment">// Invokes the getName(), then outputs &#39;Alin&#39;</span>
<span class="token keyword">echo</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Invokes the __isset(), then outputs true</span>

<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Invokes the __unset() and destroys the name property</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(h,b){const a=p("ExternalLinkIcon");return o(),l("div",null,[r,s("p",null,[n("This package provides means to dynamically deal with inaccessible properties, by implementing some of PHP's "),s("a",d,[n("magic methods"),e(a)]),n(".")]),u,s("p",null,[n("The term 'overload', in this context, refers to "),s("a",k,[n("PHPâ€™s own definition hereof"),e(a)]),n(".")]),v])}const y=t(c,[["render",m],["__file","index.html.vue"]]);export{y as default};
