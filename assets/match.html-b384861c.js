import{_ as c,M as i,p,q as l,R as s,t as n,N as e,U as t,a1 as o}from"./framework-efe98465.js";const r={},u=s("h1",{id:"matching-processor",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#matching-processor","aria-hidden":"true"},"#"),n(" Matching Processor")],-1),d=s("code",null,"MatchingProcessor",-1),k=s("code",null,"AND",-1),h=s("code",null,"OR",-1),m=o('<p>By default, the processor maps the following identifiers to logical <code>AND/OR</code> operators:</p><ul><li><code>all</code> = <code>AND</code> operator</li><li><code>any</code> = <code>OR</code> operator</li></ul><p><strong>Example</strong></p><p>Consider the following http query string:</p><ul><li><code>?filter[age][gt]=20&amp;filter[created_at][gt]=2021-11-01&amp;match=any</code></li></ul><p>The resulting query will match results where <code>age</code> is greater than <code>20</code>, or <code>created_at</code> is greater than <code>2021-11-01</code>.</p><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h2>',7),g=s("code",null,"MatchingProcessor",-1),v=s("code",null,"ConstraintsProcessor",-1),f=s("code",null,"BuiltFiltersMap",-1),b=s("code",null,"Processor",-1),_=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Processors<span class="token punctuation">\\</span>MatchingProcessor</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Processors<span class="token punctuation">\\</span>ConstraintsProcessor</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFilterBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;match&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">MatchingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token string single-quoted-string">&#39;filters&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">ConstraintsProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">matchFrom</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;match&#39;</span><span class="token punctuation">)</span>
                <span class="token comment">// ...additional constraints setup not shown...</span>
            
            <span class="token comment">// ...etc</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="change-identifiers" tabindex="-1"><a class="header-anchor" href="#change-identifiers" aria-hidden="true">#</a> Change identifiers</h3><p>If the default <code>all</code> and <code>any</code> identifiers are not to your liking, then you may change them via the <code>allows()</code> method. It accepts a string identifier and the logical boolean operator that the identifier must be mapped to.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>FieldCriteria</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;match&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">MatchingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">allows</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;and&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">FieldCriteria</span><span class="token operator">::</span><span class="token constant">AND</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">allows</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;or&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">FieldCriteria</span><span class="token operator">::</span><span class="token constant">OR</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function y(w,x){const a=i("RouterLink");return p(),l("div",null,[u,s("p",null,[n("The "),d,n(" is a complementary component to the "),e(a,{to:"/archive/v7x/filters/predefined/constraints.html"},{default:t(()=>[n("constraints")]),_:1}),n(" processor. It instructs how the constraint filters must be applied; using either a logical "),k,n(" or via an "),h,n(" operator.")]),m,s("p",null,[g,n(" must be used in combination with the "),v,n('. Furthermore, you must specify the "meta" key in which the resulting logical operator is stored, on the "constraints" processor. '),s("em",null,[n("See "),f,n(),e(a,{to:"/archive/v7x/filters/processor.html#built-filters-map"},{default:t(()=>[n("in the "),b,n(" documentation")]),_:1}),n(" for additional information.")])]),_])}const C=c(r,[["render",y],["__file","match.html.vue"]]);export{C as default};
