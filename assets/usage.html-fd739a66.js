import{_ as t,M as o,p,q as i,R as s,t as a,N as c,a1 as n}from"./framework-efe98465.js";const r={},l=n(`<h1 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h1><h2 id="prerequisite" tabindex="-1"><a class="header-anchor" href="#prerequisite" aria-hidden="true">#</a> Prerequisite</h2><p>To use the Service Registrar, you <strong>MUST</strong> have an application instance available. The application <strong>MUST</strong> implement (<em>or inherit from</em>) <code>\\Illuminate\\Contracts\\Foundation\\Application</code>.</p><p>The <a href="../core">Athenaeum Core Application</a> meets this criteria.</p><h2 id="create-instance" tabindex="-1"><a class="header-anchor" href="#create-instance" aria-hidden="true">#</a> Create instance</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Service<span class="token punctuation">\\</span>Registrar</span><span class="token punctuation">;</span>

<span class="token variable">$registrar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Registrar</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="register-a-single-service-provider" tabindex="-1"><a class="header-anchor" href="#register-a-single-service-provider" aria-hidden="true">#</a> Register a Single Service Provider</h2><p>Use the <code>register()</code> method to register a single Service Provider. The method accepts a class path or instance, as it&#39;s first argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Warehouse<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>StockServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Warehouse<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>TruckServiceProvider</span><span class="token punctuation">;</span>

<span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name static-context">StockServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or...</span>

<span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TruckServiceProvider</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="register-multiple-service-providers" tabindex="-1"><a class="header-anchor" href="#register-multiple-service-providers" aria-hidden="true">#</a> Register Multiple Service Providers</h2><p>The <code>registerMultiple()</code> allows you to register multiple Service Providers. Just like the <code>register()</code> method, it accepts class paths or instances.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">registerMultiple</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// Class paths</span>
    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Warehouse<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>StockServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Employees<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>EmployeesServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    
    <span class="token comment">// Can also register instance</span>
    <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Warehouse<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>StockServiceProvider</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boot" tabindex="-1"><a class="header-anchor" href="#boot" aria-hidden="true">#</a> Boot</h2>`,13),u=s("code",null,"bootAll()",-1),d={href:"https://laravel.com/docs/7.x/providers#the-boot-method",target:"_blank",rel:"noopener noreferrer"},v=n(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">bootAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>If you choose to register additional providers, after already registered providers have been booted, then those newly registered will automatically be booted. Should this behaviour not suit your needs, then you can always disable booting during registration, via the <code>$boot</code> argument for the <code>regsiter()</code> method. The same is true for the <code>registerMultiple()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Register but do not boot</span>
<span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name static-context">MyServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Later, you can always invoke <code>bootAll()</code> to boot those providers that have yet to be booted.</p><p>See source code for additional information.</p></div>`,2);function k(h,m){const e=o("ExternalLinkIcon");return p(),i("div",null,[l,s("p",null,[a("The "),u,a(" method can be used to boot all Service Providers that have yet to be booted. See "),s("a",d,[a("Laravel's documentation"),c(e)]),a(" for additional information about the boot method.")]),v])}const g=t(r,[["render",k],["__file","usage.html.vue"]]);export{g as default};
