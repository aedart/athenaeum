import{_ as c,M as i,p as l,q as r,R as n,t as s,N as a,U as o,a1 as e}from"./framework-efe98465.js";const d={},u=e('<h1 id="array-dto" tabindex="-1"><a class="header-anchor" href="#array-dto" aria-hidden="true">#</a> Array DTO</h1><p>While the <code>Dto</code> abstraction is good for situations where you must adhere to interfaces that define getters and setters, it can be a bit cumbersome to maintain a large number classes. This can especially be true, if you must create DTOs to represent all the resources available of a large scale API.</p><p>In such situations, the <code>ArrayDto</code> abstraction is perhaps better suited. As it&#39;s name suggests, it uses an <code>array</code> to keep track of it&#39;s properties. It functions almost the exact same way, as the <code>Dto</code> abstraction.</p><h2 id="creating-an-array-dto" tabindex="-1"><a class="header-anchor" href="#creating-an-array-dto" aria-hidden="true">#</a> Creating an Array-Dto</h2><p>Extend the <code>ArrayDto</code> abstraction and declare your DTO&#39;s properties, via the <code>$allowed</code> variable.</p><p>The keys of the <code>$allowed</code> variable correspond to your property&#39;s name, whereas the values correspond to the property&#39;s data type.</p>',6),k={href:"http://php.net/manual/en/language.types.type-juggling.php#language.types.typecasting",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ArrayDto</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Organisation</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$allowed</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;employees&#39;</span>     <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;int&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;hasInsurance&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;bool&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;profitScore&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;float&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;boardMembers&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;array&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;started&#39;</span>       <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-array-dto" tabindex="-1"><a class="header-anchor" href="#working-with-array-dto" aria-hidden="true">#</a> Working with Array-Dto</h2><p>Once you have created your DTO instance, you can work with it just like the <code>Dto</code> abstraction.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$dto</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Organisation</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Acme Ltd&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;employees&#39;</span>     <span class="token operator">=&gt;</span> <span class="token number">134</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;hasInsurance&#39;</span>  <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;profitScore&#39;</span>   <span class="token operator">=&gt;</span> <span class="token number">33.8</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;boardMembers&#39;</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Sawyer&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Stine&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Jim&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;started&#39;</span>       <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;2018-06-15 10:00:00&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$dto</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span> <span class="token comment">// Acme Ltd</span>

<span class="token variable">$dto</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;employees&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">136</span><span class="token punctuation">;</span> <span class="token comment">// &#39;employees&#39; property set to 136</span>

<span class="token keyword">echo</span> <span class="token variable">$dto</span><span class="token operator">-&gt;</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Json representation of dto</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="supported-types" tabindex="-1"><a class="header-anchor" href="#supported-types" aria-hidden="true">#</a> Supported Types</h2><p>By default, each declared property is <code>nullable</code>, meaning that a property is either of the declared data type or <code>null</code>.</p><p>The following are the supported data types:</p>`,7),v=n("li",null,[n("code",null,"string")],-1),m=n("li",null,[n("code",null,"int")],-1),h=n("li",null,[n("code",null,"float"),s(",")],-1),b=n("li",null,[n("code",null,"bool")],-1),y=n("li",null,[n("code",null,"array")],-1),f=n("code",null,"date",-1),w={href:"https://carbon.nesbot.com/docs/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Carbon",-1),q=e('<div class="custom-container tip"><p class="custom-container-title">Note</p><p>You can change how each type is casted or converted, by overwriting the <code>castPropertyValue()</code> method.</p><p>Alternatively, you can overwrite each type&#39;s individual casting method, e.g. <code>castAsDate()</code>, <code>castAsBoolean()</code>, <code>castAsString()</code>, ...etc.</p><p>For more information, please review the source code of <code>\\Aedart\\Dto\\Partials\\CastingPartial</code> trait, which is used by the <code>ArrayDto</code>.</p></div><h2 id="nested-dtos" tabindex="-1"><a class="header-anchor" href="#nested-dtos" aria-hidden="true">#</a> Nested DTOs</h2>',2),x=n("code",null,"$allowed",-1),A=e(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ArrayDto</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Dto<span class="token punctuation">\\</span>Address</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Organisation</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$allowed</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;address&#39;</span>       <span class="token operator">=&gt;</span> <span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getters-and-setters" tabindex="-1"><a class="header-anchor" href="#getters-and-setters" aria-hidden="true">#</a> Getters and Setters</h2><p>Should you require to mutate a property, then you can do so by defining an accessor or mutator method.</p>`,3),D=e(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ArrayDto</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Organisation</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$allowed</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Type ignored!</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">properties</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">properties</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Caution</p><p>When you define accessor or mutator method for a property, it&#39;s initial type declaration and casting is ignored. If special casting or converting is required, then you must manually handle such in your methods.</p></div>`,2);function $(T,O){const p=i("ExternalLinkIcon"),t=i("RouterLink");return l(),r("div",null,[u,n("p",null,[s("Whenever your DTO is populated, it will automatically ensure to "),n("a",k,[s("cast"),a(p)]),s(" the property to it's decalred type.")]),g,n("ul",null,[v,m,h,b,y,n("li",null,[f,s(" ("),n("em",null,[s("property is parsed into a "),n("a",w,[_,a(p)]),s(" instance")]),s(")")])]),q,n("p",null,[s("In order to work with "),a(t,{to:"/archive/v2x/dto/nested-dto.html"},{default:o(()=>[s("nested DTOs")]),_:1}),s(", you must declare their class path in the "),x,s(" property.")]),n("p",null,[s("Other than that, the populate mechanism works in same way, as "),a(t,{to:"/archive/v2x/dto/nested-dto.html"},{default:o(()=>[s("previously mentioned")]),_:1}),s(".")]),A,n("p",null,[s("The naming rules, for your property getter or setter method, are the same as for "),a(t,{to:"/archive/v2x/properties/"},{default:o(()=>[s("overloading")]),_:1}),s(".")]),D])}const N=c(d,[["render",$],["__file","index.html.vue"]]);export{N as default};
