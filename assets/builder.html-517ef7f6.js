import{_ as c,M as p,p as r,q as u,R as s,t as n,N as a,U as e,a1 as i}from"./framework-efe98465.js";const d={},k=s("h1",{id:"filters-builder",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#filters-builder","aria-hidden":"true"},"#"),n(" Filters Builder")],-1),m={class:"table-of-contents"},v=i(`<h2 id="how-to-create-a-filter-builder" tabindex="-1"><a class="header-anchor" href="#how-to-create-a-filter-builder" aria-hidden="true">#</a> How to create a Filter Builder</h2><p>Extend the <code>BaseBuilder</code> abstraction and implement the <code>processors()</code> method. The output of the method is expected to be a map of http query parameters and corresponding processors that must be applied, if parameters are received.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>BaseBuilder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFiltersBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Key = http query parameter, value = parameter processor...</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;search&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">MySearchProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">TextProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token string single-quoted-string">&#39;created_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">DateProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token comment">// ...etc</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-use-builder" tabindex="-1"><a class="header-anchor" href="#how-to-use-builder" aria-hidden="true">#</a> How to use Builder</h2>`,4),h={href:"https://laravel.com/docs/11.x/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"},b={href:"https://laravel.com/docs/11.x/validation#after-validation-hook",target:"_blank",rel:"noopener noreferrer"},f=i(`<p>Call the <code>build()</code> method to trigger the processing of http query parameters. The method returns the <code>BuiltFiltersMap</code> DTO, which contains all query filters that must be applied.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>FormRequest</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ListUsersRequest</span> exends FormRequest
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token operator">?</span><span class="token class-name type-declaration">BuiltFiltersMap</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">afterValidation</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Validator</span> <span class="token variable">$validator</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>        
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">filters</span> <span class="token operator">=</span> <span class="token class-name static-context">UserFiltersBuilder</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... remaining not shown ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apply-filters-on-model" tabindex="-1"><a class="header-anchor" href="#apply-filters-on-model" aria-hidden="true">#</a> Apply filters on model</h3>`,3),y=s("code",null,"applyFilters()",-1),g=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ... inside your controller...</span>
<span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">filters</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Users</span><span class="token operator">::</span><span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token variable">$filters</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="force-run-processor" tabindex="-1"><a class="header-anchor" href="#force-run-processor" aria-hidden="true">#</a> Force run Processor</h2><p>By default, if received http query parameters do not match any of the names stated in the <code>processors()</code> method&#39;s resulting <code>array</code>, then processors are not invoked. If you wish to change this behavior, then us the <code>force()</code> method on those processors that always must be triggered, regardless of matching query parameters are received or not.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFiltersBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token comment">// Force run processor, regardless if &quot;sort&quot;</span>
            <span class="token comment">// was submitted or not...      </span>
            <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token comment">// ...etc</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2>`,5);function w(_,x){const o=p("RouterLink"),t=p("router-link"),l=p("ExternalLinkIcon");return r(),u("div",null,[k,s("p",null,[n("A filter builder is responsible for invoking all assigned "),a(o,{to:"/archive/v8x/filters/processor.html"},{default:e(()=>[n("processors")]),_:1}),n(", given that matching http query parameters are matched.")]),s("nav",m,[s("ul",null,[s("li",null,[a(t,{to:"#how-to-create-a-filter-builder"},{default:e(()=>[n("How to create a Filter Builder")]),_:1})]),s("li",null,[a(t,{to:"#how-to-use-builder"},{default:e(()=>[n("How to use Builder")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#apply-filters-on-model"},{default:e(()=>[n("Apply filters on model")]),_:1})])])]),s("li",null,[a(t,{to:"#force-run-processor"},{default:e(()=>[n("Force run Processor")]),_:1})]),s("li",null,[a(t,{to:"#onward"},{default:e(()=>[n("Onward")]),_:1})])])]),v,s("p",null,[n("Once you have created your builder, you can instantiate a new instance in your "),s("a",h,[n("Form Request"),a(l)]),n(". The "),s("a",b,[n("after validation hook"),a(l)]),n(" is a possible place, where you can create a new builder instance. However, feel free to initialise your builder where it suits you the most.")]),f,s("p",null,[n("To apply all query filters, use the "),y,n(", in your Eloquent model. See "),a(o,{to:"/archive/v8x/database/query/criteria.html"},{default:e(()=>[n("query filters documentation")]),_:1}),n(" for additional information.")]),g,s("p",null,[n("By now, you should be able to create your own customised search filters, based on the received input from http query parameters. In the next section, you will find a few "),a(o,{to:"/archive/v8x/filters/predefined/"},{default:e(()=>[n("predefined resource")]),_:1}),n(". These may be useful for you, or perhaps act as inspiration for your own processors and filters.")])])}const B=c(d,[["render",w],["__file","builder.html.vue"]]);export{B as default};
