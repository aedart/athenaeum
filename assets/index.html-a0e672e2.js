import{_ as l,M as p,p as r,q as u,R as n,t as s,N as a,U as e,a1 as i}from"./framework-efe98465.js";const d={},k=n("h1",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),m=n("code",null,"Evaluator",-1),h=n("em",null,"extensions",-1),v={href:"https://httpwg.org/specs/rfc9110.html#preconditions",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"In addition, this chapter contains a minimalistic example is shown for how to create a custom precondition.",-1),f={class:"table-of-contents"},g=i(`<h2 id="custom-precondition" tabindex="-1"><a class="header-anchor" href="#custom-precondition" aria-hidden="true">#</a> Custom Precondition</h2><p>To create a custom precondition, extend the <code>BasePrecondition</code> abstraction. You will be required to implement the following methods:</p><ul><li><code>isApplicable()</code> <em>determines if precondition is applicable for current request and requested resource.</em></li><li><code>passes()</code> <em>determines if precondition passes (evaluation).</em></li><li><code>whenPasses()</code> <em>invoked if the precondition passes.</em></li><li><code>whenFails()</code> <em>invoked if the precondition fails.</em></li></ul><p>The following hypothetical example assumes that a requested resource may have an author. When a <code>X-If-Author</code> header is requested, the value is matched against the resource&#39;s author field. Only when the requested header value matches the resources author, the request can proceed. Otherwise, the request is aborted.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Preconditions<span class="token punctuation">\\</span>BasePrecondition</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Preconditions<span class="token punctuation">\\</span>ResourceContext</span> <span class="token keyword">as</span> Resource<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">IfAuthor</span> <span class="token keyword">extends</span> <span class="token class-name">BasePrecondition</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">isApplicable</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Determine when this precondition is applicable - when should it</span>
        <span class="token comment">// be evaluated?</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;GET&#39;</span>
            <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;X-If-Author&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">author</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">passes</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Determine when this precondition is considered &quot;passed&quot;</span>
        <span class="token variable">$author</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;X-If-Author&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">author</span> <span class="token operator">===</span> <span class="token variable">$author</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">whenPasses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Resource</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Change the state of the resource... e.g. add meta info about the requested</span>
        <span class="token comment">// author... or whatever makes sense to you...</span>
        <span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;eager_load_author&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// Alternatively, you can use custom actions to change the state... </span>
        <span class="token comment">// E.g. $this-&gt;actions()-&gt;markAuthorBooksToBeLoaded($resource); </span>
    
        <span class="token comment">// Finally, allow evaluation of evt. next precondition...</span>
        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">whenFails</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Resource</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// E.g. abort the current request... or perform other logic...</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">actions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">abortPreconditionFailed</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pass-fail-methods" tabindex="-1"><a class="header-anchor" href="#pass-fail-methods" aria-hidden="true">#</a> Pass / Fail Methods</h2><p>The <code>whenPasses()</code> and <code>whenFails()</code> methods are responsible for <strong><em>either</em></strong> of the following:</p><h3 id="return-a-resourcecontext" tabindex="-1"><a class="header-anchor" href="#return-a-resourcecontext" aria-hidden="true">#</a> Return a <code>ResourceContext</code></h3><p>When a &quot;changed&quot; resource is returned, the evaluator will <strong><em>stop additional evaluation or preconditions</em></strong>. Your regular request processing will continue (<em>route or controller action is invoked</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...Inside your precondition...</span>
    
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">whenPasses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Resource</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
<span class="token punctuation">{</span>   
    <span class="token comment">// Change state or data, and return resource. No further preconditions evaluated!</span>
    <span class="token keyword">return</span> <span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;pages_to_highlight&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="return-class-path-to-specific-precondition" tabindex="-1"><a class="header-anchor" href="#return-class-path-to-specific-precondition" aria-hidden="true">#</a> Return class path (<em>to specific precondition</em>)</h3><p>By returning a class path to a specific precondition, the evaluator will instantiate it, determine if its applicable, and evaluate it.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...Inside your precondition...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">whenPasses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Resource</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Change the state of the resource...</span>
    <span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;eager_load_author&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Continue to specific precondition</span>
    <span class="token keyword">return</span> <span class="token class-name static-context">MyOtherCustomPrecondition</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),y={class:"custom-container warning"},w=n("p",{class:"custom-container-title"},"Caution",-1),x=n("p",null,[s("While this mechanism allows you to create a complex evaluation flow, it will "),n("strong",null,"NOT"),s(" allow you to specify a class path to a precondition that:")],-1),_=n("li",null,"Has already been evaluated.",-1),R=n("p",null,[s("The evaluator will throw a "),n("code",null,"LogicException"),s(" if such situations arises.")],-1),q=i(`<h3 id="return-null-next-precondition" tabindex="-1"><a class="header-anchor" href="#return-null-next-precondition" aria-hidden="true">#</a> Return <code>null</code> (<em>next precondition</em>)</h3><p>When you return <code>null</code> from the pass or fail method, the evaluator will simply continue to the next precondition in its list. If there are no more preconditions to evaluate, then your route or controller action will be invoked.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...Inside your precondition...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">whenPasses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Resource</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...resource change logic not shown here...</span>
    
    <span class="token comment">// Continue to next precondition</span>
    <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="throw-http-exception" tabindex="-1"><a class="header-anchor" href="#throw-http-exception" aria-hidden="true">#</a> Throw Http Exception</h3><p>Lastly, in situations when your precondition needs to stop the request processing entirely, you can throw an appropriate Http Exception. When doing so, your application&#39;s exception handler will deal with the exception and create a Http response accordingly.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpKernel<span class="token punctuation">\\</span>Exception<span class="token punctuation">\\</span>PreconditionFailedHttpException</span><span class="token punctuation">;</span>

<span class="token comment">// ...Inside your precondition...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">whenFails</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Resource</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
<span class="token punctuation">{</span>
    <span class="token comment">// E.g. Use actions to abort request...</span>
    <span class="token comment">//return $this-&gt;actions()-&gt;abortPreconditionFailed($resource);</span>

    <span class="token comment">// Or, throw exception</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PreconditionFailedHttpException</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">&#39;Requested author name does not match resource\\&#39;s author&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To ensure that your default exception handler creates an appropriate response, your exception should inherit from <code>\\Symfony\\Component\\HttpKernel\\Exception\\HttpExceptionInterface</code>.</p><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>For additional information, please review the source code of <code>\\Aedart\\ETags\\Preconditions\\BasePrecondition</code> abstraction.</p>`,9);function $(P,E){const o=p("RouterLink"),c=p("ExternalLinkIcon"),t=p("router-link");return r(),u("div",null,[k,n("p",null,[s("As previously described, the "),m,s(" is able to evaluate a list of preconditions. When none are specified, then a list of "),a(o,{to:"/archive/v8x/etags/evaluator/preconditions.html#supported-preconditions"},{default:e(()=>[s("predefined / supported preconditions are used")]),_:1}),s(". In this chapter you will find documentation of available custom preconditions ("),h,s("), which are "),n("strong",null,[s("NOT part of "),n("a",v,[s("RFC 9110"),a(c)])]),s(".")]),b,n("nav",f,[n("ul",null,[n("li",null,[a(t,{to:"#custom-precondition"},{default:e(()=>[s("Custom Precondition")]),_:1})]),n("li",null,[a(t,{to:"#pass-fail-methods"},{default:e(()=>[s("Pass / Fail Methods")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#return-a-resourcecontext"},{default:e(()=>[s("Return a ResourceContext")]),_:1})]),n("li",null,[a(t,{to:"#return-class-path-to-specific-precondition"},{default:e(()=>[s("Return class path (to specific precondition)")]),_:1})]),n("li",null,[a(t,{to:"#return-null-next-precondition"},{default:e(()=>[s("Return null (next precondition)")]),_:1})]),n("li",null,[a(t,{to:"#throw-http-exception"},{default:e(()=>[s("Throw Http Exception")]),_:1})])])]),n("li",null,[a(t,{to:"#onward"},{default:e(()=>[s("Onward")]),_:1})])])]),g,n("div",y,[w,x,n("ul",null,[_,n("li",null,[s("Is located before the current precondition ("),n("em",null,[s("array index in "),a(o,{to:"/archive/v8x/etags/evaluator/preconditions.html#specify-preconditions"},{default:e(()=>[s("list of preconditions")]),_:1})]),s(").")]),n("li",null,[s("Does not exist in the evaluator's "),a(o,{to:"/archive/v8x/etags/evaluator/preconditions.html#specify-preconditions"},{default:e(()=>[s("list of preconditions")]),_:1}),s(".")])]),R]),q])}const I=l(d,[["render",$],["__file","index.html.vue"]]);export{I as default};
