import{_ as l,M as i,p as r,q as u,R as s,t as n,N as a,U as e,a1 as p}from"./framework-efe98465.js";const d={},k=s("h1",{id:"transactions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#transactions","aria-hidden":"true"},"#"),n(" Transactions")],-1),m=s("code",null,"FileStream",-1),v={href:"https://en.wikipedia.org/wiki/Transaction_processing",target:"_blank",rel:"noopener noreferrer"},g={class:"table-of-contents"},h=p(`<h2 id="perform-transaction" tabindex="-1"><a class="header-anchor" href="#perform-transaction" aria-hidden="true">#</a> Perform Transaction</h2><p>The easiest way to perform a transaction on a file stream, is by using the <code>transaction()</code> method. It accepts the following arguments:</p><ul><li><code>callable $operation</code>: Operation callback. A <code>Stream</code> instance is given as callback&#39;s argument.</li><li><code>int $attempts</code>: (<em>optional</em>) Maximum amount of attempts to perform operation. Defaults to <code>1</code>.</li><li><code>string|null $profile</code>: (<em>optional</em>) Transaction profile driver to use (<em>see <a href="#customisation">Customisation</a> for details</em>).</li><li><code>array $options</code>: (<em>optional</em>) Transaction driver specific options (<em>see <a href="#customisation">Customisation</a> for details</em>).</li></ul><p>The following shows a simplified example, in which some content is appended to a file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;orders.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Add or change content in given stream</span>
    <span class="token variable">$stream</span>
        <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;\\nT-shirt     Large       4.99 EUR&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;\\nT-shirt     Small       4.45 EUR&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;\\nT-shirt     Extra Large 5.15 EUR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Return eventual result (optional)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How it works</h2><p>When the <code>transaction()</code> method is invoked, then the following process is performed:</p><h3 id="begin" tabindex="-1"><a class="header-anchor" href="#begin" aria-hidden="true">#</a> Begin</h3>`,8),b=s("li",null,[n("Target stream is backed up, if such configured ("),s("em",null,[n("see "),s("a",{href:"#backup"},"backup"),n(" for details")]),n(").")],-1),f=s("em",null,"processing stream",-1),y=p(`<h3 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> Process</h3><ol start="4"><li>The callback is invoked using given the <em>processing stream</em> as argument.</li></ol><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> Commit</h3><ol start="5"><li>After the callback has completed, the changes are committed; target stream&#39;s content is overwritten with content from the <em>processing stream</em>.</li><li>Backup-file is removed, if such configured (<em>see <a href="#backup">backup</a> for details</em>).</li><li>Target stream&#39;s lock is released and evt. output from callback is returned.</li></ol><h3 id="rollback" tabindex="-1"><a class="header-anchor" href="#rollback" aria-hidden="true">#</a> Rollback</h3><ul><li>In case of failure, rollback and retry if more attempt are available. Rollback is performed by resetting the <em>process stream</em> and (re)copying target stream&#39;s content into it. Backup file is <em>NOT</em> used for rolling back!</li><li>When no more attempts are available, release the lock and allow exception to bubble upwards</li></ul><p>As you can see, this is not a simple process and many things can go wrong during a transaction. It is therefore highly <em>RECOMMENDED</em> that you enable <a href="#backup">backup</a>, if you use transactions in a production environment.</p><p>Furthermore, you <em>should expect</em> that working with this kind of transactions can be memory and I/O intensive.</p><h2 id="backup" tabindex="-1"><a class="header-anchor" href="#backup" aria-hidden="true">#</a> Backup</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Backup of the target stream is <em>NOT ENABLED</em>, by the default transaction &quot;profile&quot;. Without any additional configuration or customisation, no backup is made.</p></div><p>Backup can be configured in your <code>config/streams.php</code> configuration file, when situated within a regular Laravel application. However, you can always overwrite the profile&#39;s &quot;backup&quot; configuration using the <code>$options</code> argument, in the <code>transaction()</code> method, regardless of what profile is used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;orders.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Custom options</span>
<span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;backup&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token comment">// When true, a backup of target stream (*.bak file) will be stored</span>
        <span class="token string single-quoted-string">&#39;enabled&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>

        <span class="token comment">// Location of backup files</span>
        <span class="token string single-quoted-string">&#39;directory&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token constant">DIRECTORY_SEPARATOR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;my_file_backups&#39;</span><span class="token punctuation">,</span>

        <span class="token comment">// When true, backup file is automatically removed after commit.</span>
        <span class="token string single-quoted-string">&#39;remove_after_commit&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...not shown...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the above show example is executed, a backup file will be created within a &quot;my_file_backups&quot; directory. The backup file&#39;s extension will be set to <code>*.bak</code> and the filename will include a datetime.</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>/my_file_backups
    orders.txt_2022_04_03_182045_225174.bak
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Unless the <code>remove_after_commit</code> setting is set to <code>true</code>, then the backup file will not be purged after a successful transaction commit.</p><h2 id="customisation" tabindex="-1"><a class="header-anchor" href="#customisation" aria-hidden="true">#</a> Customisation</h2><p>As previously mentioned, if using stream transactions in a Laravel application, then you can add or change profiles in the <code>config/streams.php</code> configuration file. When you wish to use a specific transaction, state the profile name in the <code>$profile</code> argument of the <code>transaction()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;orders.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...not shown...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;my-stream-transaction-profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),w=s("code",null,"FileStream",-1),_=s("code",null,"getDefaultTransactionFactory()",-1),x=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>BufferSizes</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>Locks<span class="token punctuation">\\</span>LockTypes</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>Transactions<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>Transactions<span class="token punctuation">\\</span>TransactionFactory</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>Transactions<span class="token punctuation">\\</span>Drivers<span class="token punctuation">\\</span>CopyWriteReplaceDriver</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyFileStream</span> <span class="token keyword">extends</span> <span class="token class-name">FileStream</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getDefaultTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Factory</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$profiles</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;my-transaction-profile&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;driver&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">CopyWriteReplaceDriver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;options&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                    <span class="token string single-quoted-string">&#39;maxMemory&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token class-name static-context">BufferSizes</span><span class="token operator">::</span><span class="token constant">BUFFER_1MB</span><span class="token punctuation">,</span>

                    <span class="token string single-quoted-string">&#39;lock&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                        <span class="token string single-quoted-string">&#39;enabled&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
                        <span class="token string single-quoted-string">&#39;profile&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">,</span>
                        <span class="token string single-quoted-string">&#39;type&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">LockTypes</span><span class="token operator">::</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">,</span>
                        <span class="token string single-quoted-string">&#39;timeout&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">0.01</span><span class="token punctuation">,</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>

                    <span class="token string single-quoted-string">&#39;backup&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                        <span class="token string single-quoted-string">&#39;enabled&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
                        <span class="token string single-quoted-string">&#39;directory&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token constant">DIRECTORY_SEPARATOR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;backup&#39;</span><span class="token punctuation">,</span>
                        <span class="token string single-quoted-string">&#39;remove_after_commit&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;my-transaction-profile&#39;</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransactionFactory</span><span class="token punctuation">(</span><span class="token variable">$profiles</span><span class="token punctuation">,</span> <span class="token variable">$default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For additional information about each of the above shown settings, please review the <code>config/streams.php</code> located inside this package.</p><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>The transaction mechanism can be useful, when you need to perform unsafe or risky stream content manipulation. You <em>SHOULD</em> enable backup of files, if you plan to use this feature in a production environment. Additionally, if the default provided stream transaction driver is not to your liking, then you can implement your own version. Please review the source code of <code>\\Aedart\\Streams\\Transactions\\Drivers\\CopyWriteReplaceDriver</code> for more information.</p>`,4);function q(T,$){const c=i("ExternalLinkIcon"),t=i("router-link"),o=i("RouterLink");return r(),u("div",null,[k,s("p",null,[n("The "),m,n(" component offers a way to safely perform dangerous operations on a file, by means of a "),s("a",v,[n("transaction"),a(c)]),n(' mechanism. In this context, "dangerous operations" means any kind of stream manipulation that can fail.')]),s("nav",g,[s("ul",null,[s("li",null,[a(t,{to:"#perform-transaction"},{default:e(()=>[n("Perform Transaction")]),_:1})]),s("li",null,[a(t,{to:"#how-it-works"},{default:e(()=>[n("How it works")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#begin"},{default:e(()=>[n("Begin")]),_:1})]),s("li",null,[a(t,{to:"#process"},{default:e(()=>[n("Process")]),_:1})]),s("li",null,[a(t,{to:"#commit"},{default:e(()=>[n("Commit")]),_:1})]),s("li",null,[a(t,{to:"#rollback"},{default:e(()=>[n("Rollback")]),_:1})])])]),s("li",null,[a(t,{to:"#backup"},{default:e(()=>[n("Backup")]),_:1})]),s("li",null,[a(t,{to:"#customisation"},{default:e(()=>[n("Customisation")]),_:1})]),s("li",null,[a(t,{to:"#onward"},{default:e(()=>[n("Onward")]),_:1})])])]),h,s("ol",null,[s("li",null,[n("The target stream is locked using an "),a(o,{to:"/archive/v6x/streams/usage/locking.html#exclusive-lock"},{default:e(()=>[n("exclusive lock")]),_:1}),n(".")]),b,s("li",null,[n("A new copy is created ("),f,n(") of the target stream, using a "),a(o,{to:"/archive/v6x/streams/usage/open-close.html#temporary"},{default:e(()=>[n("temporary stream")]),_:1}),n(".")])]),y,s("p",null,[n("However, when using this package outside Laravel, then you have similar options to customise the behaviour, as for the "),a(o,{to:"/archive/v6x/streams/usage/locking.html#customise-behaviour"},{default:e(()=>[n("locking mechanism")]),_:1}),n(". You are encouraged to extend the "),w,n(" component and overwrite the "),_,n(" method.")]),x])}const S=l(d,[["render",q],["__file","transactions.html.vue"]]);export{S as default};
