import{_ as o,M as r,p as i,q as c,R as e,t as n,N as s,a1 as t}from"./framework-efe98465.js";const l={},d=e("h1",{id:"ioc-service-container",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ioc-service-container","aria-hidden":"true"},"#"),n(" IoC Service Container")],-1),p=e("code",null,"\\Aedart\\Container\\IoC",-1),h={href:"https://laravel.com/docs/5.7/container",target:"_blank",rel:"noopener noreferrer"},u={class:"custom-container tip"},_=e("p",{class:"custom-container-title"},"Info",-1),v={href:"https://en.wikipedia.org/wiki/Inversion_of_control",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"getinstance",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getinstance","aria-hidden":"true"},"#"),n(),e("code",null,"getInstance()")],-1),f=e("code",null,"IoC",-1),k=e("code",null,"app",-1),g={href:"https://laravel.com/docs/5.7/facades",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>These additions have been made to make it easier, when working with Laravel components outside a typical Laravel application.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Container<span class="token punctuation">\\</span>IoC</span><span class="token punctuation">;</span>

<span class="token variable">$container</span> <span class="token operator">=</span> <span class="token class-name static-context">IoC</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> <code>destroy()</code></h2>`,3),x=e("code",null,"destroy()",-1),C={href:"https://laravel.com/docs/5.7/facades",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$container</span><span class="token operator">-&gt;</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>For additional information, please review the source code of this component.</p>`,3);function I(y,L){const a=r("ExternalLinkIcon");return i(),c("div",null,[d,e("p",null,[n("The "),p,n(" is a slightly adapted version of "),e("a",h,[n("Laravel's Service Container"),s(a)]),n(". Please make sure to read their documentation, before attempting to use this version.")]),e("div",u,[_,e("p",null,[n("IoC stands for "),e("a",v,[n("Inversion of control"),s(a)]),n(".")])]),m,e("p",null,[n("Creates or obtains existing Service Container instance. This method registers the "),f,n(" as the "),k,n(' instance within itself. Furthermore, the method also ensures to set the container as the "application" instance in '),e("a",g,[n("Laravel's Facade"),s(a)]),n(".")]),b,e("p",null,[n("When you destroy the Service Container, the "),x,n(" method will ensure to clear all resolved instances, within the "),e("a",C,[n("Facade"),s(a)]),n(" component, before removing itself.")]),w])}const S=o(l,[["render",I],["__file","index.html.vue"]]);export{S as default};
