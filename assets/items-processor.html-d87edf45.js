import{_ as i,M as o,p as l,q as u,R as n,t as s,N as a,U as e,a1 as r}from"./framework-efe98465.js";const d={},k=n("h1",{id:"items-processor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#items-processor","aria-hidden":"true"},"#"),s(" Items Processor")],-1),m=n("code",null,"ItemProcessor",-1),v=n("code",null,"Summation",-1),g=n("br",null,null,-1),b={class:"table-of-contents"},h=r(`<p><strong>Example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>ItemsProcessor</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token comment">// Set processing rules</span>
<span class="token variable">$summation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ItemsProcessor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name static-context">ProductTypesSum</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">WarehouseStockValue</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">PerishableProductsSum</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">TotalProductsSum</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Prepare Summation Collection</span>
<span class="token operator">-&gt;</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$summation</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stock&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stock.type_a&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stock.type_b&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stock.type_c&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stock.value&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;amount_perishable&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;total_products&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Process items</span>
<span class="token operator">-&gt;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token variable">$records</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="when-to-use-this" tabindex="-1"><a class="header-anchor" href="#when-to-use-this" aria-hidden="true">#</a> When to use this</h2><p>The previous shown example illustrates a possible scenario, in which some kind of warehouse management system must build a summary report. Most commonly, you <em>SHOULD</em> attempt to build such a report using your datasource (<em>e.g. your database</em>). However, sometimes there are situations when the following might be true:</p><ul><li>It&#39;s not possible to obtain desired information from your datasource.</li><li>It&#39;s not feasible to queries to your datasource multiple times.</li><li>Different (<em>possibly complex</em>) processing rules must be applied, based on items&#39; properties and or state.</li></ul><p>To emphasise the point, of when you could make use an <code>ItemProcessor</code> component, consider the following code.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$records</span> <span class="token keyword">as</span> <span class="token variable">$record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// process logic for type A...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;B&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// process logic for type B...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;C&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// process logic for type C...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;B&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$record</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;expires_at&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// more process logic for type B...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;cost&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// process logic for &quot;expensive&quot; item</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// process logic for &quot;none-expensive&quot; item</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ... etc</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In short, if you start having complex processing rules within your code, then perhaps you should consider refactoring it. The <code>ItemProcessor</code> can help your to separate item specific processing logic.</p><h3 id="game-as-examples" tabindex="-1"><a class="header-anchor" href="#game-as-examples" aria-hidden="true">#</a> Game as examples</h3><p>For the sake of simplicity, the remaining of this documentation will use a game as example of how the <code>ItemProcessor</code> can be used. Image that you must create a live report of a player&#39;s current stats, based on the player&#39;s items. This could, for instance, be stats such as <em>strength, agility, intelligence, armor, minimum and maximum damage,</em> ...etc. Furthermore, imaging that your datasource is delivered by a 3rd party that only offers you limit data retrieval possibilities. Unlike a database, you might not have the same type &quot;query&quot; possibilities when data is derived from a cvs file, xml file or perhaps a RESTful api.</p><p>Your final solution, could look something like this:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>ItemsProcessor</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token comment">// Set processing rules</span>
<span class="token variable">$playerStats</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ItemsProcessor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name static-context">TotalItems</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">Swords</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">Shilds</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">Maces</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">Bows</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">Boots</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">ChestArmor</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">MagicItems</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Prepare base stats</span>
<span class="token operator">-&gt;</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Summation</span> <span class="token variable">$stats</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$stats</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;strength&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;agility&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;intelligence&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;min_damage&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;max_damage&#39;</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_damage&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;armor&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_resist&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;max_health&#39;</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;total_items&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Process player items (e.g. data from 3rd party)</span>
<span class="token operator">-&gt;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above shown example, <code>$playerStats</code> will hold the final <code>Summation</code> instance, containing all the results that have been produced by the various applied rules. There are some important aspects to consider in this example:</p><ul><li>Your processing logic is separated into their on classes.</li><li>You can always add, remove or replace processing rules.</li><li>You can easily wrap the entire logic into some kind of report or summary component, invoking it whenever and wherever you need it.</li></ul><p>How to create processing rules is briefly explained in the upcoming sections.</p><h2 id="creating-global-processing-rule" tabindex="-1"><a class="header-anchor" href="#creating-global-processing-rule" aria-hidden="true">#</a> Creating &quot;global&quot; Processing Rule</h2><p>To create processing rules that apply on all items, simply implement the <code>ProcessingRule</code> interface.</p><p><strong>Simple example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>ProcessingRule</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">TotalItems</span> <span class="token keyword">implements</span> <span class="token class-name">ProcessingRule</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Summation</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$summation</span><span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;total_items&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Counting all items is a trivial matter, which of course could be solved in via <code>count($items)</code> or using other similar functionality. Therefore, a slightly different example could be a rule, in which you increase or decrease magic damage or resistance, depending on the item&#39;s properties.</p><p><strong>Using item properties or state</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>ProcessingRule</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MagicItems</span> <span class="token keyword">implements</span> <span class="token class-name">ProcessingRule</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Summation</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;is_magic&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$summation</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token variable">$summation</span>
                    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_damage&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;magic_damage&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_resist&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;magic_resist&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The example illustrates how a property of the given <code>$item</code> can determine whether processing logic should be performed or not. Furthermore, multiple values in the <code>$summation</code> component can be manipulated, if it makes sense. A different way of achieving the same result, is shown a bit later.</p><p><strong>Applying (global) processing rules</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>ItemsProcessor</span><span class="token punctuation">;</span>

<span class="token comment">// Set processing rules</span>
<span class="token variable">$processor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemsProcessor</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name static-context">TotalItems</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">MagicItems</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Processing rules must be stated as the first argument in the <code>ItemsProcessor</code>&#39;s constructor method. If the rules inherit from the <code>ProcessingRule</code>, then they are applied on all items that are processed. This is good, if that is your intent. But, it is more likely that you wish to create processing rules, that are only applied when needed. This is covered in the next section.</p><h2 id="creating-processing-rule-that-apply-for-some-items" tabindex="-1"><a class="header-anchor" href="#creating-processing-rule-that-apply-for-some-items" aria-hidden="true">#</a> Creating Processing Rule that apply for some items</h2><p>In the previous example(s), the <code>MagicItems</code> rule would be applied for all types of items. Yet, it&#39;s implementation contained an abort condition, which skips further processing if given item isn&#39;t magical in nature. This can be rewritten, so that the rule is automatically only applied for items that are magical. To do so, a processing rule must also inherit from the <code>Determinable</code> interface.</p><p><strong>Determinable processing rule example 1</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>Determinable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>ProcessingRule</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MagicItems</span> <span class="token keyword">implements</span>
    <span class="token class-name">ProcessingRule</span><span class="token punctuation">,</span>
    Determinable
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canProcess</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;is_magic&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Summation</span>
    <span class="token punctuation">{</span>        
        <span class="token keyword">return</span> <span class="token variable">$summation</span>
                    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_damage&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;magic_damage&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_resist&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;magic_resist&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As illustrated, the <code>canProcess()</code> method is responsible for determining whether the processing rule can be applied or not. Behind the scene, the <code>ItemsProcessor</code> will filter off any processing rules that are not applicable for a given item. It can only do so, if the processing rule inherits from the <code>Determinable</code> interface. To continue with the game examples, consider the following two processing rules.</p><p><strong>Determinable processing rule example 2</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>Determinable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>ProcessingRule</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChestArmor</span> <span class="token keyword">implements</span>
    <span class="token class-name">ProcessingRule</span><span class="token punctuation">,</span>
    Determinable
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canProcess</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;armor&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;armor_type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;chest&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Summation</span>
    <span class="token punctuation">{</span>        
        <span class="token variable">$summation</span><span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;armor&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;armor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;weight&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;heavy&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$summation</span><span class="token operator">-&gt;</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;agility&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    
        <span class="token keyword">return</span> <span class="token variable">$summation</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Determinable processing rule example 3</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>Determinable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summations<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>ProcessingRule</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Maces</span> <span class="token keyword">implements</span>
    <span class="token class-name">ProcessingRule</span><span class="token punctuation">,</span>
    Determinable
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canProcess</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;weapon&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;weapon_type&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;mace&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Summation</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$summation</span>
            <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;min_damage&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;min_damage&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;max_damage&#39;</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;min_damage&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;is_magic&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;magic_class&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;light&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$summation</span><span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;intelligence&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token variable">$summation</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Processing rules can accommodate all kinds of different logic. The above shown examples can be rewritten in any number of ways. It&#39;s entirely up to you how to design them, what they must do and how much responsibility each should have.</p><h2 id="post-processing" tabindex="-1"><a class="header-anchor" href="#post-processing" aria-hidden="true">#</a> Post processing</h2><p>Sometimes it might not be feasible to create a processing rule, if the resulting value(s) can be determined as a result of all other processed values.<br> Consider a situation in which you must find the average value of something, e.g. average player damage. You could add a rule, in which the average value is calculated based on other values and then proceed to process the items. Doing so will achieve the task, but it comes at the cost of (re)calculating the average value, each time the processing rule is applied. If you find yourself in such a situation, then it&#39;s better to extract such logic into &quot;post processing&quot;.</p><p>To perform post-processing logic, you can apply a callback using the <code>after()</code> method, in your <code>ItemsProcessor</code>. A <code>Summation</code> instance is given as argument to the callback, containing all resulting values from the applied processing rules. You can then proceed to manipulate existing values even further, or add new values.</p><p><strong>Post-processing example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token variable">$playerStats</span> <span class="token operator">=</span> <span class="token variable">$processor</span>
    <span class="token operator">-&gt;</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Summation</span> <span class="token variable">$stats</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$min</span> <span class="token operator">=</span> <span class="token variable">$stats</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;min_damage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token variable">$stats</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;max_damage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$magic</span> <span class="token operator">=</span> <span class="token variable">$stats</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;magic_damage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">return</span> <span class="token variable">$stats</span>
            <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;average_damage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$min</span> <span class="token operator">+</span> <span class="token variable">$max</span> <span class="token operator">+</span> <span class="token variable">$magic</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="item-datatype" tabindex="-1"><a class="header-anchor" href="#item-datatype" aria-hidden="true">#</a> Item datatype</h2><p>Up and till this point, the previous examples treated an <code>$item</code> as an <code>array</code>. However, the <code>ProcessingRule</code> <strong>does not imply any datatype restrictions</strong> on the <code>$item</code> property. Thus, you can process anything from simple scalar types, to complex objects.</p><h2 id="the-cost-of-using-this-approach" tabindex="-1"><a class="header-anchor" href="#the-cost-of-using-this-approach" aria-hidden="true">#</a> The cost of using this approach</h2><p>Using the <code>ItemsProcessor</code> <em>can</em> help to you separate complex processing rules into their own components. Yet, <strong>it does not come for free!</strong></p><p>Depending on the amount of &quot;items&quot; you must process and the complexity of your rules, this type of solution can decrease performance of your application. You should therefore always use this with care and only when suitable. If you are working with a database as your datasource, chances are good that you can retrieve desired data directly from it. Should that not be the case, then you <em>SHOULD</em> at the very least consider how to limit the amount of items to be processed, when using this component.</p>`,46),y=n("code",null,"ItemsProcessor",-1),f=n("code",null,"process()",-1),w=n("code",null,"array",-1),_={href:"https://www.php.net/manual/en/class.traversable",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"Traversable",-1),q=n("strong",null,"or similar approaches",-1),$={href:"https://www.php.net/manual/en/language.generators.syntax.php",target:"_blank",rel:"noopener noreferrer"},S=n("em",null,"yield syntax",-1),P={href:"https://www.php.net/manual/en/function.array-chunk",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"Which approach is the most suitable, will depend entirely on your situation. The point is that you should think about your application's performance, when using this type of solution, especially if you intend to process a large amount of data.",-1),I=n("h2",{id:"onward",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#onward","aria-hidden":"true"},"#"),s(" Onward")],-1),T=n("p",null,[s("The "),n("code",null,"ItemProcessor"),s(` is tailored specifically to be used for generating summaries or reports, based on various types of "items". It is certainly isn't intended for solving all kinds of data processing challenges and should only be used when the situation is called for. That being said, it can be a convenient way of separating complex processing logic into their own components. For more information about this component, please review the source code.`)],-1);function R(A,D){const c=o("RouterLink"),t=o("router-link"),p=o("ExternalLinkIcon");return l(),u("div",null,[k,n("p",null,[s("The "),m,s(' is a component capable of applying "processing rules" on a collection of items. Each rule can perform a series of computations in which results are set inside a '),a(c,{to:"/archive/v6x/collections/summation/"},{default:e(()=>[v]),_:1}),s(" collection."),g,s(" The final summation can then be used as part of a summary report.")]),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#when-to-use-this"},{default:e(()=>[s("When to use this")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#game-as-examples"},{default:e(()=>[s("Game as examples")]),_:1})])])]),n("li",null,[a(t,{to:"#creating-global-processing-rule"},{default:e(()=>[s('Creating "global" Processing Rule')]),_:1})]),n("li",null,[a(t,{to:"#creating-processing-rule-that-apply-for-some-items"},{default:e(()=>[s("Creating Processing Rule that apply for some items")]),_:1})]),n("li",null,[a(t,{to:"#post-processing"},{default:e(()=>[s("Post processing")]),_:1})]),n("li",null,[a(t,{to:"#item-datatype"},{default:e(()=>[s("Item datatype")]),_:1})]),n("li",null,[a(t,{to:"#the-cost-of-using-this-approach"},{default:e(()=>[s("The cost of using this approach")]),_:1})]),n("li",null,[a(t,{to:"#onward"},{default:e(()=>[s("Onward")]),_:1})])])]),h,n("p",null,[s("The "),y,s("'s "),f,s(" method accepts either an "),w,s(" or "),n("a",_,[x,a(p)]),s(". This means that when you must iterate through large amounts of data, you should consider applying either of the following "),q,s(":")]),n("ul",null,[n("li",null,[n("a",$,[s("Generators ("),S,s(")"),a(p)]),s(".")]),n("li",null,[n("a",P,[s("Chunk your data"),a(p)]),s(".")])]),C,I,T])}const M=i(d,[["render",R],["__file","items-processor.html.vue"]]);export{M as default};
