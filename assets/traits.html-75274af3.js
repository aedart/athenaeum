import{_ as t,M as p,p as o,q as i,R as s,t as n,N as e,a1 as c}from"./framework-efe98465.js";const l={},r=c(`<h1 id="traits" tabindex="-1"><a class="header-anchor" href="#traits" aria-hidden="true">#</a> Traits</h1><p>If you are working with &quot;getter-setter-traits&quot; (aware-of components), then you can easily test those using the <code>GetterSetterTraitTester</code>.</p><h2 id="getter-setter-trait" tabindex="-1"><a class="header-anchor" href="#getter-setter-trait" aria-hidden="true">#</a> Getter-Setter Trait</h2><p>The trait in question must have the following methods defined:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>set<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span>?<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token variable">$property</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
get<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: ?<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token punctuation">;</span>
has<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: bool <span class="token punctuation">;</span>
getDefault<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: ?<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trait-example" tabindex="-1"><a class="header-anchor" href="#trait-example" aria-hidden="true">#</a> Trait Example</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">NameTrait</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getDefaultName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getDefaultName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-the-trait" tabindex="-1"><a class="header-anchor" href="#testing-the-trait" aria-hidden="true">#</a> Testing the Trait</h2><p>To test the trait, use the <code>assertGetterSetterTraitMethods</code> method inside your test.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>TestCases<span class="token punctuation">\\</span>UnitTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>GetterSetterTraitTester</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NameTraitTest</span> <span class="token keyword">extends</span> <span class="token class-name">UnitTestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">GetterSetterTraitTester</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@test</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canAssertTraitMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertGetterSetterTraitMethods</span><span class="token punctuation">(</span>
            <span class="token class-name static-context">NameTrait</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">faker</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">,</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">faker</span><span class="token operator">-&gt;</span><span class="token property">name</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="auto-generate-argument-data" tabindex="-1"><a class="header-anchor" href="#auto-generate-argument-data" aria-hidden="true">#</a> Auto Generate Argument Data</h2><p>As an alternative, you can allow the tester to automatically detect and generate argument data, based on the argument&#39;s type. To do so, use the <code>assertTraitMethods</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>TestCases<span class="token punctuation">\\</span>UnitTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>GetterSetterTraitTester</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NameTraitTest</span> <span class="token keyword">extends</span> <span class="token class-name">UnitTestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">GetterSetterTraitTester</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@test</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canAssertTraitMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertTraitMethods</span><span class="token punctuation">(</span><span class="token class-name static-context">NameTrait</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),u={class:"custom-container warning"},d=s("p",{class:"custom-container-title"},"WARNING",-1),k={href:"http://php.net/manual/en/language.types.intro.php",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/mockery/mockery",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const a=p("ExternalLinkIcon");return o(),i("div",null,[r,s("div",u,[d,s("p",null,[n("Method is only able to generate data for "),s("a",k,[n("scalar-types"),e(a)]),n(" and "),s("a",v,[n("Mocks"),e(a)]),n(" for objects. This feature should be considered experimental!")])])])}const y=t(l,[["render",m],["__file","traits.html.vue"]]);export{y as default};
