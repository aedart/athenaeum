import{_ as t,M as o,p as l,q as p,R as a,t as n,N as s,a1 as c}from"./framework-efe98465.js";const i={},r=a("h1",{id:"date-format",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#date-format","aria-hidden":"true"},"#"),n(" Date Format")],-1),d={href:"https://laravel.com/docs/11.x/validation#rule-date-format",target:"_blank",rel:"noopener noreferrer"},u=a("code",null,"date_format",-1),m={href:"https://www.php.net/manual/en/datetime.format.php",target:"_blank",rel:"noopener noreferrer"},h=a("code",null,"p",-1),k=a("em",null,"timezone offset",-1),f=a("em",null,"UTC",-1),_=c(`<p>For instance, if you expect a date format like <code>&#39;Y-m-d\\TH:i:sp&#39;</code>, then the following equivalent dates will pass validation.</p><ul><li><code>2023-01-01T11:25:00+00:00</code></li><li><code>2023-01-01T11:25:00Z</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>DateFormat</span><span class="token punctuation">;</span>

<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;performed_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">DateFormat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d\\TH:i:sp&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function v(g,b){const e=o("ExternalLinkIcon");return l(),p("div",null,[r,a("p",null,[n("Adaptation of Laravel's "),a("a",d,[u,s(e)]),n(" rule. The difference is that, this rule handles an edge case that concerns UTC timezone offset.")]),a("p",null,[n("If allowed date format contains the "),a("a",m,[h,n(" token ("),k,n(")"),s(e)]),n(', and the date in question contains +00:00 or "Z" ('),f,n(") as timezone offset, then this rule will use a slightly different comparison that ensures desired outcome.")]),_])}const x=t(i,[["render",v],["__file","date-format.html.vue"]]);export{x as default};
