import{_ as t,M as o,p as i,q as p,R as n,t as s,N as e,a1 as l}from"./framework-efe98465.js";const c={},r=n("h1",{id:"loader",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#loader","aria-hidden":"true"},"#"),s(" Loader")],-1),d=n("code",null,"Loader",-1),u={href:"https://github.com/laravel/framework/blob/5.8/src/Illuminate/Contracts/Config/Repository.php",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"supported-file-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#supported-file-types","aria-hidden":"true"},"#"),s(" Supported File Types")],-1),v=n("thead",null,[n("tr",null,[n("th",null,"File Extension")])],-1),h=n("tr",null,[n("td",null,"*.ini")],-1),m=n("tr",null,[n("td",null,"*.json")],-1),b=n("tr",null,[n("td",null,"*.php (php array)")],-1),g={href:"https://github.com/symfony/yaml",target:"_blank",rel:"noopener noreferrer"},f=l(`<h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h2><h3 id="inside-laravel" tabindex="-1"><a class="header-anchor" href="#inside-laravel" aria-hidden="true">#</a> Inside Laravel</h3><p>If you are using this component inside a typical Laravel application, then all you have to do, is to register <code>ConfigLoaderServiceProvider</code>. In your <code>configs/app.php</code>, register the service provider.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token comment">// ... previous not shown ... //</span>

    <span class="token comment">/*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    */</span>

    <span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>ConfigLoaderServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span>

        <span class="token comment">// ... remaining services not shown ... //</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you have registered the service, you can obtain an instance of the configuration <code>Loader</code> via <code>ConfigLoaderTrait</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>ConfigLoaderTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyConfigLoadService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">ConfigLoaderTrait</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$loader</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getConfigLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="outside-laravel" tabindex="-1"><a class="header-anchor" href="#outside-laravel" aria-hidden="true">#</a> Outside Laravel</h3><p>Should you decide to use this component outside a Laravel application, then you need to setup a few dependencies, before able to load configuration.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>Loader</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>Parsers<span class="token punctuation">\\</span>Factories<span class="token punctuation">\\</span>FileParserFactory</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>Repository</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Filesystem<span class="token punctuation">\\</span>Filesystem</span><span class="token punctuation">;</span>

<span class="token variable">$loader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Repository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">setFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Filesystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">setParserFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="load-configuration-files" tabindex="-1"><a class="header-anchor" href="#load-configuration-files" aria-hidden="true">#</a> Load Configuration Files</h2><p>To load and parse configuration files, set the directory where the files are located and invoke the <code>load()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">setDirectory</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;path-to-config-files/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$repository</span> <span class="token operator">=</span> <span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>When used inside a Laravel application, the loaded configuration is merged into the application&#39;s existing configuration.</p></div><h2 id="nested-directories" tabindex="-1"><a class="header-anchor" href="#nested-directories" aria-hidden="true">#</a> Nested Directories</h2><p>The <code>Loader</code> will automatically scan through nested directories and attempt to load and parse each found file. Imagine the following structure.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>configs/
    modules/
        box.json
        circle.yml
    main.ini
    core.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once these files are loaded, the nested directories then become part of the configuration name. This means that if you need to access the property <code>width</code>, inside <code>box.json</code>, then you must state the full name for it.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">setDirectory</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;configs/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$repository</span> <span class="token operator">=</span> <span class="token variable">$loader</span><span class="token operator">-&gt;</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$width</span> <span class="token operator">=</span> <span class="token variable">$repository</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;modules.box.width&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),y={href:"https://laravel.com/docs/5.8/configuration#accessing-configuration-values",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Repository",-1),w={href:"https://github.com/laravel/framework/blob/5.8/src/Illuminate/Config/Repository.php",target:"_blank",rel:"noopener noreferrer"};function x(L,C){const a=o("ExternalLinkIcon");return i(),p("div",null,[r,n("p",null,[s("The "),d,s(" component is able to load various types of configuration files and parse them into a Laravel "),n("a",u,[s("Repository"),e(a)]),s(".")]),k,n("table",null,[v,n("tbody",null,[h,m,b,n("tr",null,[n("td",null,[s("*.yml (also *.yaml) ("),n("em",null,[s("requires "),n("a",g,[s("symfony/yaml"),e(a)])]),s(")")])])])]),f,n("p",null,[s("For more information about how to access the loaded configuration, please review "),n("a",y,[s("Laravel's documentation"),e(a)]),s(" or review the "),_,s(),n("a",w,[s("source code"),e(a)]),s(".")])])}const F=t(c,[["render",x],["__file","index.html.vue"]]);export{F as default};
