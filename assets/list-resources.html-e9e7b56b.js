import{_ as c,M as p,p as r,q as u,R as s,N as a,U as e,t as n,a1 as l}from"./framework-efe98465.js";const d={},k=s("h1",{id:"list-resources",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#list-resources","aria-hidden":"true"},"#"),n(" List Resources")],-1),v=s("p",null,[n("The "),s("code",null,"ListResourcesRequest"),n(' abstraction is intended for "index" requests in which a list of paginated resources is shown.')],-1),m={class:"table-of-contents"},b=l(`<p><strong>Example Request</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>ListResourcesRequest</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ListUsers</span> <span class="token keyword">extends</span> <span class="token class-name">ListResourcesRequest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">authorisationModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filtersBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token class-name">Builder</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Request filters builder...</span>
        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example Action</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ListUsers</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name static-context">UserResource</span><span class="token operator">::</span><span class="token function">collection</span><span class="token punctuation">(</span>
        <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">show</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="authorisation" tabindex="-1"><a class="header-anchor" href="#authorisation" aria-hidden="true">#</a> Authorisation</h2><p>The <code>authorize()</code> is implemented by default. It checks if current user is granted an <code>index</code> ability for given resource. From the above shown examples, a <code>users.index</code> ability is checked.</p><h2 id="pagination" tabindex="-1"><a class="header-anchor" href="#pagination" aria-hidden="true">#</a> Pagination</h2><p>Validation of pagination query parameters is automatically performed. To configure pagination, you can set the following properties in your request class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">ListUsers</span> <span class="token keyword">extends</span> <span class="token class-name">ListResourcesRequest</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Default amount of results to be shown,
     * when none requested
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">int</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$defaultShow</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Minimum allowed value for &quot;show&quot; property
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">int</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$showMinimum</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Maximum allowed value for &quot;show&quot; property
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">int</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$showMaximum</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Name of the query parameter that contains requested page
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$pageKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;page&#39;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Name of the query parameter that contains requested amount
     * to be shown per page
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$showKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;show&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// ...remaining not shown ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can access pagination related properties directly on the request instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ListUsers</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">page</span><span class="token punctuation">;</span>
    <span class="token variable">$pageKey</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">pageKey</span><span class="token punctuation">;</span>
    <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">show</span><span class="token punctuation">;</span>

    <span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span>
                <span class="token argument-name">perPage</span><span class="token punctuation">:</span> <span class="token variable">$show</span><span class="token punctuation">,</span>
                <span class="token argument-name">pageName</span><span class="token punctuation">:</span> <span class="token variable">$pageKey</span><span class="token punctuation">,</span>
                <span class="token argument-name">page</span><span class="token punctuation">:</span> <span class="token variable">$page</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...remaining not shown...  </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filters-builder" tabindex="-1"><a class="header-anchor" href="#filters-builder" aria-hidden="true">#</a> Filters Builder</h2>`,12),h=s("code",null,"Builder",-1),g=s("code",null,"filtersBuilder()",-1),f=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>ListResourcesRequest</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>UserFiltersBuilder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ListUsers</span> <span class="token keyword">extends</span> <span class="token class-name">ListResourcesRequest</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...previous not shown ...</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filtersBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token class-name">Builder</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">UserFiltersBuilder</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your route or controller action, use the <code>applyFilters()</code> to apply eventual requested filters, which are available in the <code>$filters</code> attribute.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ListUsersRequest</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name static-context">UserResource</span><span class="token operator">::</span><span class="token function">collection</span><span class="token punctuation">(</span>
        <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">filters</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">show</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=s("h2",{id:"request-preconditions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#request-preconditions","aria-hidden":"true"},"#"),n(" Request Preconditions")],-1),w=s("strong",null,[s("em",null,"not recommended")],-1),q={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified",target:"_blank",rel:"noopener noreferrer"},x=s("p",null,"Despite the above-mentioned recommendation, if you still wish to support evaluation of request preconditions, then you should consider generating a unique ETag which takes the following into consideration:",-1),R=s("ul",null,[s("li",null,[n("The requested query parameters ("),s("em",null,"e.g. filters and pagination"),n(").")]),s("li",null,[n("The filtered and paginated resources ("),s("em",null,"the resulting eloquent models with eventual eager-loaded relations"),n(").")]),s("li",null,"The type of resource that is requested.")],-1),$=s("code",null,"\\Aedart\\Http\\Api\\Requests\\Concerns\\HttpConditionals",-1),L=s("em",null,"available in all request abstractions",-1),U=s("p",null,[n("Lastly, it might be prudent to ignore generating a "),s("code",null,"Last-Modified"),n(" date, if you enable preconditions evaluation for a collection of filtered and paginated resources.")],-1);function T(B,A){const t=p("router-link"),o=p("RouterLink"),i=p("ExternalLinkIcon");return r(),u("div",null,[k,v,s("nav",m,[s("ul",null,[s("li",null,[a(t,{to:"#authorisation"},{default:e(()=>[n("Authorisation")]),_:1})]),s("li",null,[a(t,{to:"#pagination"},{default:e(()=>[n("Pagination")]),_:1})]),s("li",null,[a(t,{to:"#filters-builder"},{default:e(()=>[n("Filters Builder")]),_:1})]),s("li",null,[a(t,{to:"#request-preconditions"},{default:e(()=>[n("Request Preconditions")]),_:1})])])]),b,s("p",null,[n("If your request supports "),a(o,{to:"/archive/current/filters/builder.html"},{default:e(()=>[n("filters")]),_:1}),n(", then you can return the class path or "),h,n(" instance, in the "),g,n(" method.")]),f,s("p",null,[n("See "),a(o,{to:"/archive/current/database/query/criteria.html"},{default:e(()=>[n("Database Query Filters")]),_:1}),n(" for additional information.")]),y,s("p",null,[n("Although support for Http Request Conditionals is possible for this kind of request, it is "),w,n(". You will be required to compute a reliable "),s("a",q,[n("ETag"),a(i)]),n(" and/or "),s("a",_,[n("Last-Modified"),a(i)]),n(" date for the filtered and paginated results. This can end up costing a lot of CPU cycles and thereby affect performance. Therefore, no preconditions evaluation is enabled by default, for this kind of request abstraction.")]),x,R,s("p",null,[n("See "),a(o,{to:"/archive/current/http/api/requests/show-single.html#request-preconditions"},{default:e(()=>[n("Show Single Resource")]),_:1}),n(" for examples of preconditions evaluation. In addition, you should also review the source code of "),$,n(" ("),L,n(").")]),U])}const M=c(d,[["render",T],["__file","list-resources.html.vue"]]);export{M as default};
