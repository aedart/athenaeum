import{_ as i,M as p,p as c,q as r,R as e,t as s,N as n,U as a,a1 as l}from"./framework-efe98465.js";const d={},u=e("h1",{id:"registrar",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#registrar","aria-hidden":"true"},"#"),s(" Registrar")],-1),k=e("code",null,"Registrar",-1),h=e("code",null,"ApiResource",-1),m=e("code",null,"ApiResource",-1),g={class:"table-of-contents"},v=e("h2",{id:"registration-of-api-resources",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#registration-of-api-resources","aria-hidden":"true"},"#"),s(" Registration of Api Resources")],-1),f=e("code",null,"config/api-resources.php",-1),b=l(`<p>Nevertheless, the remaining of this sections will illustrate how to work with the <code>Registrar</code>, so that you may use it for more advanced approaches, if such is needed.</p><h2 id="obtain-registra-instance" tabindex="-1"><a class="header-anchor" href="#obtain-registra-instance" aria-hidden="true">#</a> Obtain <code>Registra</code> instance</h2><p>The <code>Registrar</code> component is bound as a singleton in the Service Container of your application. To obtain the instance, you can use <code>ApiResourceRegistrarTrait</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>ApiResourceRegistrarTrait</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersController</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">ApiResourceRegistrarTrait</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$registrar</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getApiResourceRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// ...remaining not shown...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="register-single-api-resource" tabindex="-1"><a class="header-anchor" href="#register-single-api-resource" aria-hidden="true">#</a> Register single Api Resource</h2><p>If you wish to manually register a single Api Resource, for an Eloquent Model, use the <code>set()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>AddressResource</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Address</span><span class="token punctuation">;</span>

<span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">AddressResource</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="register-multiple-api-resources" tabindex="-1"><a class="header-anchor" href="#register-multiple-api-resources" aria-hidden="true">#</a> Register multiple Api Resources</h2><p>To register a list of Api Resources, use <code>register()</code>. The method accepts an <code>array</code> of key-values;</p><ul><li>key = <em>class path to your eloquent model</em></li><li>value = <em>class path to the model&#39;s corresponding Api Resource</em></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">AddressResource</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">UserResource</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">Book</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BookResource</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="determine-if-model-has-an-api-resource" tabindex="-1"><a class="header-anchor" href="#determine-if-model-has-an-api-resource" aria-hidden="true">#</a> Determine if Model has an Api Resource</h2><p>The <code>has()</code> method can be used to determine if a model has an Api Resource registered. It accepts either a class path to an Eloquent Model or a Model instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="get-api-resource" tabindex="-1"><a class="header-anchor" href="#get-api-resource" aria-hidden="true">#</a> Get Api Resource</h2><p>The <code>get()</code> method returns a <code>string</code> class path to the registered Api Resource. If no Api Resource was registered for given model, then the method returns <code>null</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\App\\Http\\Resources\\AddressResource</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="find-api-resource-by-type" tabindex="-1"><a class="header-anchor" href="#find-api-resource-by-type" aria-hidden="true">#</a> Find Api Resource by Type</h2><p>To find an Api Resource (<em>class path</em>) by its type, use <code>findResourceByType()</code>. Method accepts a resource&#39;s <code>string</code> type in either singular or plural form. If an Api Resource exists for the given type, then its class path is returned. <code>Null</code> is returned if no Api Resource was found.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Type in singular form</span>
<span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">findResourceByType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\App\\Http\\Resources\\AddressResource</span>

<span class="token comment">// Type in plural form</span>
<span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">findResourceByType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\App\\Http\\Resources\\UserResource</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-model-by-resource-type" tabindex="-1"><a class="header-anchor" href="#find-model-by-resource-type" aria-hidden="true">#</a> Find Model by Resource Type</h2><p>It is also possible to find the Eloquent Model of an Api Resource, by searching for the resource type via the <code>findModelByType()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Type in singular form</span>
<span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">findModelByType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\App\\Models\\Address</span>

<span class="token comment">// Type in plural form</span>
<span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">findModelByType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\App\\Models\\User</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="remove-api-resource" tabindex="-1"><a class="header-anchor" href="#remove-api-resource" aria-hidden="true">#</a> Remove Api Resource</h2><p>Should you be required to remove an Api Resource for a given model, then you can do so via the <code>forget()</code> method. The method will return <code>true</code> when Api Resource and successfully removed, for the given model. If not, <code>false</code> is returned.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token variable">$registrar</span><span class="token operator">-&gt;</span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,26);function y(R,A){const o=p("RouterLink"),t=p("router-link");return c(),r("div",null,[u,e("p",null,[s("The Api Resource "),k,s(" is responsible for keeping track of each Eloquent Model's corresponding "),h,s(". This component is, amongst other things, used to automatically find a "),n(o,{to:"/archive/v8x/http/api/resources/relations.html"},{default:a(()=>[s("relation's")]),_:1}),s(" corresponding "),m,s(".")]),e("nav",g,[e("ul",null,[e("li",null,[n(t,{to:"#registration-of-api-resources"},{default:a(()=>[s("Registration of Api Resources")]),_:1})]),e("li",null,[n(t,{to:"#obtain-registra-instance"},{default:a(()=>[s("Obtain Registra instance")]),_:1})]),e("li",null,[n(t,{to:"#register-single-api-resource"},{default:a(()=>[s("Register single Api Resource")]),_:1})]),e("li",null,[n(t,{to:"#register-multiple-api-resources"},{default:a(()=>[s("Register multiple Api Resources")]),_:1})]),e("li",null,[n(t,{to:"#determine-if-model-has-an-api-resource"},{default:a(()=>[s("Determine if Model has an Api Resource")]),_:1})]),e("li",null,[n(t,{to:"#get-api-resource"},{default:a(()=>[s("Get Api Resource")]),_:1})]),e("li",null,[n(t,{to:"#find-api-resource-by-type"},{default:a(()=>[s("Find Api Resource by Type")]),_:1})]),e("li",null,[n(t,{to:"#find-model-by-resource-type"},{default:a(()=>[s("Find Model by Resource Type")]),_:1})]),e("li",null,[n(t,{to:"#remove-api-resource"},{default:a(()=>[s("Remove Api Resource")]),_:1})])])]),v,e("p",null,[s("Your registration should primarily be undertaken inside your "),f,s(". See "),n(o,{to:"/archive/v8x/http/api/resources/#register-api-resource"},{default:a(()=>[s("how to register Api Resource")]),_:1}),s(" introduction.")]),b])}const w=i(d,[["render",y],["__file","registrar.html.vue"]]);export{w as default};
