import{_ as t,M as o,p,q as i,R as s,t as n,N as e,a1 as c}from"./framework-efe98465.js";const l={},r=s("h1",{id:"laravel",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#laravel","aria-hidden":"true"},"#"),n(" Laravel")],-1),u=s("code",null,"LaravelTestHelper",-1),d={href:"https://github.com/orchestral/testbench",target:"_blank",rel:"noopener noreferrer"},k={href:"https://codeception.com/",target:"_blank",rel:"noopener noreferrer"},v=s("h2",{id:"prerequisite",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#prerequisite","aria-hidden":"true"},"#"),n(" Prerequisite")],-1),m={href:"https://github.com/orchestral/testbench",target:"_blank",rel:"noopener noreferrer"},b=c(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require <span class="token parameter variable">--dev</span> <span class="token string">&quot;orchestra/testbench=~3.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to Use</h2><p>In the below stated example, a codeception&#39;s unit test (extends PHP Unit) is being used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Codeception<span class="token punctuation">\\</span>TestCase<span class="token punctuation">\\</span>Test</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>LaravelTestHelper</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyUnitTest</span> <span class="token keyword">extends</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">LaravelTestHelper</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">_before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// Start the Laravel application</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">startApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">_after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// Stop the Laravel application</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">stopApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@test</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readSomethingFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// Calling config, using Laravel defined helper method</span>
        <span class="token variable">$defaultDbDriver</span> <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;database.default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mysql&#39;</span><span class="token punctuation">,</span> <span class="token variable">$defaultDbDriver</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@test</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readSomethingElseFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// Get the application instance</span>
        <span class="token variable">$app</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token variable">$queueDriver</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;config&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;queue.default&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sync&#39;</span><span class="token punctuation">,</span> <span class="token variable">$queueDriver</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ... Remaining not shown ... //</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2>`,5),h={href:"https://github.com/orchestral/testbench",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"LaravelTestHelper",-1);function g(_,w){const a=o("ExternalLinkIcon");return p(),i("div",null,[r,s("p",null,[n("The "),u,n(" is a wrapper for "),s("a",d,[n("Orchestral Testbench"),e(a)]),n(". It allows you to test laravel components using various testing-frameworks, like "),s("a",k,[n("Codeception"),e(a)]),n(".")]),v,s("p",null,[n("To use this component, you must install "),s("a",m,[n("Orchestral Testbench"),e(a)]),n(":")]),b,s("p",null,[n("For more information, please review "),s("a",h,[n("Orchestral's documentation"),e(a)]),n(" and review the source code of "),f,n(".")])])}const q=t(l,[["render",g],["__file","laravel.html.vue"]]);export{q as default};
