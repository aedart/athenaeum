import{_ as i,M as o,p as r,q as d,R as n,t as s,N as a,U as e,a1 as l}from"./framework-efe98465.js";const u={},k=n("h1",{id:"nested-dtos",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nested-dtos","aria-hidden":"true"},"#"),s(" Nested DTOs")],-1),v=n("code",null,"Person",-1),m=n("code",null,"Dto",-1),g={href:"https://laravel.com/docs/10.x/container",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"prerequisite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prerequisite","aria-hidden":"true"},"#"),s(" Prerequisite")],-1),b=n("p",null,[s("If you are using the "),n("code",null,"Dto"),s(" component within a typical Laravel application, then you do not have to do anything. A Service Container should already be available.")],-1),y=n("code",null,"Dto",-1),f=n("em",null,"a slightly adapted version of Laravel's Service Container",-1),w={class:"table-of-contents"},_=l(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>The following example shows two DTOs; <code>Address</code> and <code>Person</code>.</p><h3 id="address-dto" tabindex="-1"><a class="header-anchor" href="#address-dto" aria-hidden="true">#</a> Address DTO</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Address</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$street</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setStreet</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$street</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">street</span> <span class="token operator">=</span> <span class="token variable">$street</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">street</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="person-dto" tabindex="-1"><a class="header-anchor" href="#person-dto" aria-hidden="true">#</a> Person DTO</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span> <span class="token keyword">implements</span> <span class="token class-name">PersonInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token keyword type-hint">int</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 
    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token class-name type-declaration">Address</span> <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
 
    <span class="token comment">// ... getters and setters for name and age not shown ... //</span>

     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setAddress</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token class-name type-declaration">Address</span> <span class="token variable">$address</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">address</span> <span class="token operator">=</span> <span class="token variable">$address</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     
     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">Address</span>
     <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">address</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolving-nested-dependencies" tabindex="-1"><a class="header-anchor" href="#resolving-nested-dependencies" aria-hidden="true">#</a> Resolving Nested Dependencies</h3><p>When populating your DTO, just pass in the data as your normally do. Eventual nested dependencies will automatically be attempted resolved and populated. Consider the following example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Arial Jackson&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">42</span><span class="token punctuation">,</span>
    
    <span class="token comment">// Notice that we are NOT passing an instance of Address, but an array instead!</span>
    <span class="token string single-quoted-string">&#39;address&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;street&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Somewhere str. 44&#39;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    
<span class="token variable">$address</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Address DTO instance</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),x=n("code",null,"Address",-1),$={href:"https://laravel.com/docs/10.x/container",target:"_blank",rel:"noopener noreferrer"},D=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Note"),n("p",null,[s("If unable to resolve a nested dependency, the Service Container will fail with a "),n("code",null,"\\Psr\\Container\\ContainerExceptionInterface"),s(".")])],-1),q=n("h2",{id:"union-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#union-types","aria-hidden":"true"},"#"),s(" Union Types")],-1),T={href:"https://php.watch/versions/8.0/union-types",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"Dto",-1),A=l(`<h3 id="scalar-types" tabindex="-1"><a class="header-anchor" href="#scalar-types" aria-hidden="true">#</a> Scalar types</h3><p>When your property accepts a few scalar types, the <code>Dto</code> will ensure that it&#39;s data type is cast accordingly.</p><p><strong>Example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">int</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setId</span><span class="token punctuation">(</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">int</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$id</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">int</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;allan-james-jr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>

<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// integer  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-types" tabindex="-1"><a class="header-anchor" href="#array-types" aria-hidden="true">#</a> Array types</h3><p>The same is true when you accept an <code>array</code>.</p><p><strong>Example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">&#39;Thomas Smith&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>

<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Thomas&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Smith&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Jr&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nested-dtos-1" tabindex="-1"><a class="header-anchor" href="#nested-dtos-1" aria-hidden="true">#</a> Nested DTOs</h3><p>You may also use define properties that accept multiple nested DTOs. When populated with an <code>array</code>, the <code>Dto</code> will attempt to find the most suitable match. Consider the following example, where the property <code>reference</code> accepts two types of populatable DTOs.</p><p><strong>Example</strong></p><p>(<em>The following examples assume that the order of the accepted types for the setter methods is in the exact same order, as declared for the class properties.</em>)</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ... getters / setters not shown</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Organisation</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$slogan</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ... getters / setters not shown</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Record</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token class-name">Person</span><span class="token operator">|</span><span class="token class-name">Organisation</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$reference</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ... getters / setters not shown</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Reference is a string...</span>
<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;https:://google.com&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>

<span class="token comment">// Reference becomes a Person...</span>
<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Jane Jensen&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Reference becomes an Organisation...</span>
<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Acme&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;slogan&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Building stuff...&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Organisation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h3><p>When populating nested DTOs with arrays, then the <code>Dto</code> abstraction will attempt to find the most suitable match. This means that if you accept two or more DTOs that share property names, e.g. the <code>$name</code> property as shown in previous examples, then the DTO will choose the first match.</p><p>For instance, if you expect the <code>$reference</code> to be an <code>Organisation</code>, yet you only provide a <code>name</code>, then the first nested DTO that accepts a <code>name</code> property will be chosen In this example, a <code>Person</code> instance is created and populated, instead of an <code>Organisation</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Acme&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Organisation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The reason for this behaviour is due to the order in which the union types are declared (<em>see <code>Record</code> class declaration in previous example</em>). To continue the example, when you provide a property that only exists in <code>Organisation</code>, then the <code>Dto</code> will be able to match it accordingly.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;slogan&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Building stuff...&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Organisation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The last caveat to be mindful of, is when you choose to declare a property that accepts both an <code>array</code> and a DTO. If the <code>array</code> type is stated before your desired nested DTO, then the nested DTO will never be matched.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Record</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token class-name">Organisation</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$reference</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ... getters / setters not shown</span>
<span class="token punctuation">}</span>

<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;slogan&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Building stuff...&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Organisation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function P(C,N){const p=o("ExternalLinkIcon"),c=o("RouterLink"),t=o("router-link");return r(),d("div",null,[k,n("p",null,[s("Imagine that your "),v,s(" DTO accepts more complex properties, e.g. an address DTO. Normally, you would manually create that address DTO first, in order to populate your main DTO. However, if you use the "),m,s(" abstraction with "),n("a",g,[s("Laravel's Service Container"),a(p)]),s(", populating nested DTOs will be automatically handled for you.")]),h,b,n("p",null,[s("If you are using this "),y,s(" package outside a Laravel application, then you must ensure that a Service Container has been initialised. Consider using this package's "),a(c,{to:"/archive/v7x/container/"},{default:e(()=>[s("Service Container")]),_:1}),s(" ("),f,s(").")]),n("nav",w,[n("ul",null,[n("li",null,[a(t,{to:"#prerequisite"},{default:e(()=>[s("Prerequisite")]),_:1})]),n("li",null,[a(t,{to:"#example"},{default:e(()=>[s("Example")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#address-dto"},{default:e(()=>[s("Address DTO")]),_:1})]),n("li",null,[a(t,{to:"#person-dto"},{default:e(()=>[s("Person DTO")]),_:1})]),n("li",null,[a(t,{to:"#resolving-nested-dependencies"},{default:e(()=>[s("Resolving Nested Dependencies")]),_:1})])])]),n("li",null,[a(t,{to:"#union-types"},{default:e(()=>[s("Union Types")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#scalar-types"},{default:e(()=>[s("Scalar types")]),_:1})]),n("li",null,[a(t,{to:"#array-types"},{default:e(()=>[s("Array types")]),_:1})]),n("li",null,[a(t,{to:"#nested-dtos-1"},{default:e(()=>[s("Nested DTOs")]),_:1})]),n("li",null,[a(t,{to:"#caveats"},{default:e(()=>[s("Caveats")]),_:1})])])])])]),_,n("p",null,[s("In the above example, the "),x,s(" DTO is automatically resolved and populated by the "),n("a",$,[s("Service Container"),a(p)]),s(".")]),D,q,n("p",null,[s("If you define properties that accept "),n("a",T,[s("union types"),a(p)]),s(", then the "),O,s(" attempt to populate the value accordingly.")]),A])}const I=i(u,[["render",P],["__file","nested-dto.html.vue"]]);export{I as default};
