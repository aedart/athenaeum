import{_ as i,M as p,p as l,q as r,R as a,t as n,N as s,U as o,a1 as c}from"./framework-efe98465.js";const u={},d=a("h1",{id:"mime-type-detection",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#mime-type-detection","aria-hidden":"true"},"#"),n(" MIME-Type Detection")],-1),k={class:"custom-container tip"},m=a("p",{class:"custom-container-title"},"Note",-1),v={href:"https://packagist.org/packages/league/mime-type-detection",target:"_blank",rel:"noopener noreferrer"},h=c(`<h2 id="specify-custom-mime-type" tabindex="-1"><a class="header-anchor" href="#specify-custom-mime-type" aria-hidden="true">#</a> Specify Custom MIME-Type</h2><p>You can choose to provide a custom MIME-Type via the <code>$config</code> array argument, when writing a file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filesystem</span><span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;books/great_new_world.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;mime_type&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;application/ext-custom&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-mime-type-detector-callback" tabindex="-1"><a class="header-anchor" href="#custom-mime-type-detector-callback" aria-hidden="true">#</a> Custom MIME-Type Detector Callback</h2>`,4),g={href:"https://packagist.org/packages/league/mime-type-detection",target:"_blank",rel:"noopener noreferrer"},y=c(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">League<span class="token punctuation">\\</span>Flysystem<span class="token punctuation">\\</span>Config</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">League<span class="token punctuation">\\</span>MimeTypeDetection<span class="token punctuation">\\</span>FinfoMimeTypeDetector</span><span class="token punctuation">;</span>

<span class="token variable">$adapter</span><span class="token operator">-&gt;</span><span class="token function">detectMimeTypeUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">FileStream</span> <span class="token variable">$stream</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Config</span> <span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$detector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinfoMimeTypeDetector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$detector</span><span class="token operator">-&gt;</span><span class="token function">detectMimeType</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The callback MUST return a string MIME-Type or <code>null</code>, if unable to detect.</p>`,2);function b(f,_){const e=p("RouterLink"),t=p("ExternalLinkIcon");return l(),r("div",null,[d,a("p",null,[n("The Database Adapter uses the "),s(e,{to:"/archive/v8x/mime-types/"},{default:o(()=>[n("MIME-Type Detector package")]),_:1}),n(" to detect files' MIME-Type. When a file is written, the MIME-Type is automatically detected at set.")]),a("div",k,[m,a("p",null,[n("The "),s(e,{to:"/archive/v8x/mime-types/"},{default:o(()=>[n("MIME-Type Detector package")]),_:1}),n(" behaves differently than "),a("a",v,[n("league/mime-type-detection"),s(t)]),n(". It does not offer any fallback mechanism that uses a file's extension. MIME-Type is detected ONLY via a file's content!")])]),h,a("p",null,[n("Alternatively, if the default provided MIME-Type detection mechanism is not to your liking, then you can specify a custom callback to perform detection. The following example shows how you switch the default detection to "),a("a",g,[n("league/mime-type-detection"),s(t)]),n(".")]),y])}const T=i(u,[["render",b],["__file","mime-type.html.vue"]]);export{T as default};
