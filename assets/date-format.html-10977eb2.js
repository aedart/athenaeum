import{_ as t,M as o,p as l,q as c,R as n,t as a,N as s,a1 as i}from"./framework-efe98465.js";const p={},r=n("h1",{id:"date-format",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#date-format","aria-hidden":"true"},"#"),a(" Date Format")],-1),d=n("p",null,[n("em",null,[n("strong",null,"Available since"),a(),n("code",null,"v7.12.x")])],-1),u={href:"https://laravel.com/docs/10.x/validation#rule-date-format",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"date_format",-1),h={href:"https://www.php.net/manual/en/datetime.format.php",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"p",-1),f=n("em",null,"timezone offset",-1),_=n("em",null,"UTC",-1),v=i(`<p>For instance, if you expect a date format like <code>&#39;Y-m-d\\TH:i:sp&#39;</code>, then the following equivalent dates will pass validation.</p><ul><li><code>2023-01-01T11:25:00+00:00</code></li><li><code>2023-01-01T11:25:00Z</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>DateFormat</span><span class="token punctuation">;</span>

<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;performed_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">DateFormat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d\\TH:i:sp&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function g(b,x){const e=o("ExternalLinkIcon");return l(),c("div",null,[r,d,n("p",null,[a("Adaptation of Laravel's "),n("a",u,[m,s(e)]),a(" rule. The difference is that, this rule handles an edge case that concerns UTC timezone offset.")]),n("p",null,[a("If allowed date format contains the "),n("a",h,[k,a(" token ("),f,a(")"),s(e)]),a(', and the date in question contains +00:00 or "Z" ('),_,a(") as timezone offset, then this rule will use a slightly different comparison that ensures desired outcome.")]),v])}const T=t(p,[["render",g],["__file","date-format.html.vue"]]);export{T as default};
