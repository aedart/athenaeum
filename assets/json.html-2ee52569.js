import{_ as o,M as t,p as c,q as i,R as n,t as e,N as a,a1 as p}from"./framework-efe98465.js";const d={},l=n("h1",{id:"json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),e(" Json")],-1),r=n("code",null,"\\Aedart\\Utils\\Json",-1),u={href:"https://www.json.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://secure.php.net/manual/en/function.json-encode.php",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"json_encode()",-1),g={href:"https://secure.php.net/manual/en/function.json-decode.php",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"json_decode()",-1),_=p(`<h2 id="encoding-and-decoding" tabindex="-1"><a class="header-anchor" href="#encoding-and-decoding" aria-hidden="true">#</a> Encoding and Decoding</h2><p>Using the <code>encode()</code> and <code>decode()</code> methods, you ensure that if encoding fails, a <code>JsonEncodingException</code> will be thrown.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Json</span><span class="token punctuation">;</span>

<span class="token variable">$encoded</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Reilly&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>   <span class="token operator">=&gt;</span> <span class="token number">32</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ------------------------------------------ //</span>

<span class="token variable">$decoded</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;Michele Rodriguez&quot;,&quot;age&quot;:4}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>From PHP 7.3, <code>json_encode()</code> and <code>json_decode()</code> will natively support an option to throw an exception upon encoding errors. These wrapper methods will be adapted to use this native option in the future.</p></div>`,4);function v(f,b){const s=t("ExternalLinkIcon");return c(),i("div",null,[l,n("p",null,[e("The "),r,e(" component offers a few "),n("a",u,[e("JSON"),a(s)]),e(" utilities. Among such, it wraps PHP's native "),n("a",h,[k,a(s)]),e(" and "),n("a",g,[m,a(s)]),e(".")]),_])}const w=o(d,[["render",v],["__file","json.html.vue"]]);export{w as default};
