import{_ as p,M as i,p as l,q as r,R as n,N as s,U as t,t as a,a1 as c}from"./framework-efe98465.js";const u={},d=n("h1",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),a(" Usage")],-1),k={class:"table-of-contents"},h=c(`<h2 id="obtain-circuit-breaker" tabindex="-1"><a class="header-anchor" href="#obtain-circuit-breaker" aria-hidden="true">#</a> Obtain Circuit Breaker</h2><p>Once you have defined your &quot;service&quot; and circuit breaker settings, in your <code>configs/circuit-breaker</code>, you can obtain a <code>CircuitBreaker</code> instance. This can be done via the <code>CircuitBreakerManagerTrait</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Circuits<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>CircuitBreakerManagerTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WeatherService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">CircuitBreakerManagerTrait</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">forecast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Obtain circuit breaker for &quot;weather_service&quot; (defined in your</span>
        <span class="token comment">// configs/circuit-breakers.php file)</span>
        <span class="token variable">$circuitBreaker</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getCircuitBreakerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;weather_service&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token comment">// ...remaining not shown</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="attempt" tabindex="-1"><a class="header-anchor" href="#attempt" aria-hidden="true">#</a> Attempt</h2><p>Use the <code>attempt()</code> method to invoke a callback. Depending on your configuration, this callback will be attempted executed one or multiple times (<em>See <code>retries</code> in your configuration file</em>), until it either succeeds or fails entirely.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Circuits<span class="token punctuation">\\</span>CircuitBreaker</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$circuitBreaker</span><span class="token operator">-&gt;</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CircuitBreaker</span> <span class="token variable">$cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Call 3rd party service, return result ...</span>
    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$http</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;https://acme.org/api/weather-service/v1/forecast&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Unable to obtain forecast&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="otherwise-callback" tabindex="-1"><a class="header-anchor" href="#otherwise-callback" aria-hidden="true">#</a> Otherwise Callback</h2><p>Use the <code>$otherwise</code> argument to state a callback, which will be invoked if the attempt should fail.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Circuits<span class="token punctuation">\\</span>CircuitBreaker</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Services<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>ServiceUnavailable</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$circuitBreaker</span><span class="token operator">-&gt;</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CircuitBreaker</span> <span class="token variable">$cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... callback not shown ...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CircuitBreaker</span> <span class="token variable">$cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Attempt has failed, do something else</span>
    <span class="token variable">$lastFailure</span> <span class="token operator">=</span> <span class="token variable">$cb</span><span class="token operator">-&gt;</span><span class="token function">lastFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$reason</span> <span class="token operator">=</span> <span class="token variable">$lastFailure</span><span class="token operator">-&gt;</span><span class="token function">reason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$reason</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceUnavailable</span><span class="token punctuation">(</span><span class="token variable">$reason</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceUnavailable</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Weather Service is currently unavailable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),v=n("code",null,"$otherwise",-1),m={href:"https://en.wikipedia.org/wiki/Fail-fast",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"failure_threshold",-1),f=c('<h2 id="retries-failure-threshold" tabindex="-1"><a class="header-anchor" href="#retries-failure-threshold" aria-hidden="true">#</a> Retries &amp; Failure Threshold</h2><p>It is very important to understand that, <strong>each failed attempt increases the failure count</strong>. The circuit breaker&#39;s internal store keeps track of this failure count, <strong>across instances</strong>. This means that, if you have configured your circuit breaker to perform a certain amount <code>retries</code>, it <strong>might not actually perform all attempts</strong>, if the <code>failure_threshold</code> is reached, during those attempts.</p><p>Please be mindful og how you choose to configure your <code>retries</code> and <code>failure_threshold</code>.</p><h2 id="recovery-half-open" tabindex="-1"><a class="header-anchor" href="#recovery-half-open" aria-hidden="true">#</a> Recovery (<em>Half-Open</em>)</h2><p>When the circuit breaker is in <em>Open</em> state (<em>circuit tripped - failure state</em>), it will automatically try to switch state to the <em>Half-Open</em> state, each time <code>attempt()</code> is invoked. However, this only happens after the <code>grace_period</code> has past (<em>available in your configuration</em>).</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>By default, only a single circuit breaker instance will be able to obtain the <em>Half-Open</em> state, across instances.</p></div><p>If a circuit breaker achieves changing state to <em>Half-Open</em>, it will invoke the provided <code>$callback</code>. Should the callback succeed, then <strong>the failure count will be reset</strong>, across all instances. This means that the circuit breaker changes its state back to <em>Closed</em>.</p><p>If the callback does not succeed, the circuit breaker will remain in <em>Open</em> state and invoke the <code>$otherwise</code> callback.</p><p>Lastly, if the <em>Half-Open</em> state cannot be obtained, then the circuit breaker resumes its normal behaviour and invokes the <code>$otherwise</code> callback.</p>',9);function g(w,y){const e=i("router-link"),o=i("ExternalLinkIcon");return l(),r("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(e,{to:"#obtain-circuit-breaker"},{default:t(()=>[a("Obtain Circuit Breaker")]),_:1})]),n("li",null,[s(e,{to:"#attempt"},{default:t(()=>[a("Attempt")]),_:1})]),n("li",null,[s(e,{to:"#otherwise-callback"},{default:t(()=>[a("Otherwise Callback")]),_:1})]),n("li",null,[s(e,{to:"#retries-failure-threshold"},{default:t(()=>[a("Retries & Failure Threshold")]),_:1})]),n("li",null,[s(e,{to:"#recovery-half-open"},{default:t(()=>[a("Recovery (Half-Open)")]),_:1})])])]),h,n("p",null,[a("Behind the scenes, if the circuit breaker has detected too many failed attempts, across instances, then the "),v,a(" callback can be invoked immidiatly, allowing a "),n("a",m,[a("fast-failure"),s(o)]),a(" to occur. This happens when the "),b,a(" has been reached.")]),f])}const C=p(u,[["render",g],["__file","usage.html.vue"]]);export{C as default};
