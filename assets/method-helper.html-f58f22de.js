import{_ as c,M as p,p as i,q as r,R as n,N as s,U as t,t as a,a1 as l}from"./framework-efe98465.js";const u={},d=n("h1",{id:"method-helper",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#method-helper","aria-hidden":"true"},"#"),a(" Method Helper")],-1),k=n("p",null,[a("The "),n("code",null,"MethodHelper"),a(" offers various function and method utilities.")],-1),h={class:"table-of-contents"},m=l(`<h2 id="makegettername" tabindex="-1"><a class="header-anchor" href="#makegettername" aria-hidden="true">#</a> <code>makeGetterName()</code></h2><p>Returns a &#39;getter&#39; method name for given property</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>MethodHelper</span><span class="token punctuation">;</span>

<span class="token variable">$method</span> <span class="token operator">=</span> <span class="token class-name static-context">MethodHelper</span><span class="token operator">::</span><span class="token function">makeGetterName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$method</span><span class="token punctuation">;</span> <span class="token comment">// getAge</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="makesettername" tabindex="-1"><a class="header-anchor" href="#makesettername" aria-hidden="true">#</a> <code>makeSetterName()</code></h2><p>Returns a &#39;setter&#39; method name for given property</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>MethodHelper</span><span class="token punctuation">;</span>

<span class="token variable">$method</span> <span class="token operator">=</span> <span class="token class-name static-context">MethodHelper</span><span class="token operator">::</span><span class="token function">makeSetterName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$method</span><span class="token punctuation">;</span> <span class="token comment">// setAge</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="callorreturn" tabindex="-1"><a class="header-anchor" href="#callorreturn" aria-hidden="true">#</a> <code>callOrReturn()</code></h2><p>Invokes the given method and return it&#39;s return value, if possible. Otherwise, the whatever value was given will be returned instead.</p><p>This helper is useful when not knowing if a callable has already been invoked.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>MethodHelper</span><span class="token punctuation">;</span>

<span class="token variable">$callable</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Hi there&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token class-name static-context">MethodHelper</span><span class="token operator">::</span><span class="token function">callOrReturn</span><span class="token punctuation">(</span><span class="token variable">$callable</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment">// Hi there</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="when-method-is-not-a-callable" tabindex="-1"><a class="header-anchor" href="#when-method-is-not-a-callable" aria-hidden="true">#</a> When method is not a callable</h3>`,11),v={href:"https://www.php.net/manual/en/language.types.callable.php",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"callable",-1),g=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>MethodHelper</span><span class="token punctuation">;</span>

<span class="token variable">$callable</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Okay there...&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token class-name static-context">MethodHelper</span><span class="token operator">::</span><span class="token function">callOrReturn</span><span class="token punctuation">(</span><span class="token variable">$callable</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment">// Okay there...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="passing-arguments" tabindex="-1"><a class="header-anchor" href="#passing-arguments" aria-hidden="true">#</a> Passing Arguments</h3><p>You can state arguments to passed to the callable method, as the second argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>MethodHelper</span><span class="token punctuation">;</span>

<span class="token variable">$callable</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Hi &#39;</span> <span class="token operator">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token class-name static-context">MethodHelper</span><span class="token operator">::</span><span class="token function">callOrReturn</span><span class="token punctuation">(</span><span class="token variable">$callable</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;Ryan&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment">// Hi Ryan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function f(_,w){const e=p("router-link"),o=p("ExternalLinkIcon");return i(),r("div",null,[d,k,n("nav",h,[n("ul",null,[n("li",null,[s(e,{to:"#makegettername"},{default:t(()=>[a("makeGetterName()")]),_:1})]),n("li",null,[s(e,{to:"#makesettername"},{default:t(()=>[a("makeSetterName()")]),_:1})]),n("li",null,[s(e,{to:"#callorreturn"},{default:t(()=>[a("callOrReturn()")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#when-method-is-not-a-callable"},{default:t(()=>[a("When method is not a callable")]),_:1})]),n("li",null,[s(e,{to:"#passing-arguments"},{default:t(()=>[a("Passing Arguments")]),_:1})])])])])]),m,n("p",null,[a("If given method is not a "),n("a",v,[b,s(o)]),a(", then whatever was given will be returned instead.")]),g])}const x=c(u,[["render",f],["__file","method-helper.html.vue"]]);export{x as default};
