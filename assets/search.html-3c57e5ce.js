import{_ as e,M as t,p,q as o,R as n,t as s,N as c,U as l,a1 as i}from"./framework-efe98465.js";const u={},r=n("h1",{id:"search-processor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#search-processor","aria-hidden":"true"},"#"),s(" Search Processor")],-1),d=n("p",null,[s("The "),n("code",null,"SearchProcessor"),s(" creates a simple search query filter. It compares a search term against one or more table columns, using SQL's "),n("code",null,"like"),s(" operator. If you do not have a huge amount of records, then this processor might be a good starting point.")],-1),k=n("h2",{id:"setup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#setup","aria-hidden":"true"},"#"),s(" Setup")],-1),m=i(`<p><strong>Note</strong>: <em>You should only specify numeric or string datatype columns. Other types of columns might not yield positive results.</em></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Processors<span class="token punctuation">\\</span>SearchProcessor</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFilterBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;search&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SearchProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token comment">// ...etc</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maximum-length-of-search-term" tabindex="-1"><a class="header-anchor" href="#maximum-length-of-search-term" aria-hidden="true">#</a> Maximum length of search term</h3><p>By default, the processor will raise a validation exception (<em>results in a <code>422 Unprocessable Entity</code> http response</em>), if the submitted search term is more than <code>100</code> characters. To change this behaviour, use <code>maxSearchLength()</code> to specify a different maximum length.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;search&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SearchProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">maxSearchLength</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-queries" tabindex="-1"><a class="header-anchor" href="#custom-queries" aria-hidden="true">#</a> Custom Queries</h3><p>You may also specify custom queries instead of column names, to build a more advanced search query. The callback is given the current query scope and search term as arguments. Furthermore, the callback MUST return a query instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span> <span class="token keyword">as</span> EloquentBuilder<span class="token punctuation">;</span>

<span class="token variable">$processor</span> <span class="token operator">=</span> <span class="token class-name static-context">SearchProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name">Builder</span><span class="token operator">|</span><span class="token class-name">EloquentBuilder</span> <span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$search</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$query</span>
                <span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$search</span><span class="token punctuation">}</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may also wrap your custom search query into an invokable class, e.g.:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>BaseSearchQuery</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span> <span class="token keyword">as</span> EloquentBuilder<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCustomSearch</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSearchQuery</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span>
        <span class="token class-name">Builder</span><span class="token operator">|</span><span class="token class-name">EloquentBuilder</span> <span class="token variable">$query</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$search</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Builder</span><span class="token operator">|</span><span class="token class-name">EloquentBuilder</span>
    <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$search</span><span class="token punctuation">}</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...In your search processor</span>
<span class="token variable">$processor</span> <span class="token operator">=</span> <span class="token class-name static-context">SearchProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function v(h,b){const a=t("RouterLink");return p(),o("div",null,[r,d,k,n("p",null,[s("In your "),c(a,{to:"/archive/v7x/filters/builder.html"},{default:l(()=>[s("builder")]),_:1}),s(", specify the http query parameter name and the database table columns that the search filter must compare a search term against.")]),m])}const y=e(u,[["render",v],["__file","search.html.vue"]]);export{y as default};
