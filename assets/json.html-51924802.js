import{_ as t,M as o,p,q as c,R as n,t as s,N as e,a1 as i}from"./framework-efe98465.js";const l={},d=n("h1",{id:"json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),s(" Json")],-1),r=n("code",null,"Json",-1),u={href:"https://www.json.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://secure.php.net/manual/en/function.json-encode.php",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"json_encode()",-1),m={href:"https://secure.php.net/manual/en/function.json-decode.php",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"json_decode()",-1),v=n("h2",{id:"encoding-and-decoding",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#encoding-and-decoding","aria-hidden":"true"},"#"),s(" Encoding and Decoding")],-1),g=n("code",null,"encode()",-1),f=n("code",null,"decode()",-1),b={href:"http://php.net/manual/en/class.jsonexception.php",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"\\JsonException ",-1),x={href:"http://php.net/manual/en/json.constants.php",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"JSON_THROW_ON_ERROR",-1),J=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Json</span><span class="token punctuation">;</span>

<span class="token variable">$encoded</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Reilly&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>   <span class="token operator">=&gt;</span> <span class="token number">32</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ------------------------------------------ //</span>

<span class="token variable">$decoded</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;Michele Rodriguez&quot;,&quot;age&quot;:4}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validation" tabindex="-1"><a class="header-anchor" href="#validation" aria-hidden="true">#</a> Validation</h2><p>You can also validate if a value is a valid JSON encoded string, using the <code>isValid()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;{ &quot;name&quot;: &quot;Sven&quot; }&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">echo</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;{ &quot;name&quot;: &quot;Sven&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The method also accepts two optional arguments:</p><ul><li><code>int $depth</code>, <em>recursion depth.</em></li><li><code>array $options</code>, <em>flags</em></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$valid</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token variable">$myPayload</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">JSON_INVALID_UTF8_IGNORE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),j={href:"https://www.php.net/manual/en/function.json-validate.php",target:"_blank",rel:"noopener noreferrer"};function N(V,y){const a=o("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[s("The "),r,s(" component offers a few "),n("a",u,[s("JSON"),e(a)]),s(" utilities. It uses PHP's native "),n("a",h,[k,e(a)]),s(" and "),n("a",m,[_,e(a)]),s(".")]),v,n("p",null,[s("The "),g,s(" and "),f,s(" methods will automatically throw a "),n("a",b,[q,e(a)]),s(", if encoding or decoding fails. It does so by setting the "),n("a",x,[w,e(a)]),s(" bitmask option, when invoked.")]),J,n("p",null,[s("See PHP's "),n("a",j,[s("documentation"),e(a)]),s(" for additional details.")])])}const R=t(l,[["render",N],["__file","json.html.vue"]]);export{R as default};
