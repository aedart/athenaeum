import{_ as l,M as i,p,q as r,R as a,N as n,U as t,t as e,a1 as c}from"./framework-efe98465.js";const d={},u=a("h1",{id:"version",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#version","aria-hidden":"true"},"#"),e(" Version")],-1),h=a("p",null,[e("The "),a("code",null,"Version"),e(" utility is able to determine if a version is available for an installed package and obtain it.")],-1),v={class:"table-of-contents"},k=c(`<h2 id="package" tabindex="-1"><a class="header-anchor" href="#package" aria-hidden="true">#</a> <code>package()</code></h2><p>Returns the version of the given installed package.</p><p><code>\\Aedart\\Contracts\\Utils\\Packages\\Exceptions\\PackageVersionException</code> is thrown if the given package is not installed or unable to find version information.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Version</span><span class="token punctuation">;</span>

<span class="token variable">$version</span> <span class="token operator">=</span> <span class="token class-name static-context">Version</span><span class="token operator">::</span><span class="token function">package</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;aedart/athenaeum-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$version</span><span class="token punctuation">;</span> <span class="token comment">// E.g. 6.0.0 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hasfor" tabindex="-1"><a class="header-anchor" href="#hasfor" aria-hidden="true">#</a> <code>hasFor()</code></h2><p>Determine if a version is available for the given installed package.</p><p>If the package isn&#39;t installed, the method will simply return <code>false</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$hasVersion</span> <span class="token operator">=</span> <span class="token class-name static-context">Version</span><span class="token operator">::</span><span class="token function">hasFor</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;aedart/athenaeum-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> <code>application()</code></h2><p>The <code>application()</code> method returns the root package&#39;s version (<em>your application</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$version</span> <span class="token operator">=</span> <span class="token class-name static-context">Version</span><span class="token operator">::</span><span class="token function">application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="version-file" tabindex="-1"><a class="header-anchor" href="#version-file" aria-hidden="true">#</a> Version file</h3><p><em><strong>Available since</strong> <code>v6.1.x</code></em></p><p>By default, the <code>application()</code> method will return the root package&#39;s version, obtained via composer. If this does not work for you, then you can choose to specify a &quot;version file&quot; as argument.</p><p><strong>Version file</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>2.1.3@8476f2363a55f7d507553d46659c09a4c2b7ea0a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Version from file</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$version</span> <span class="token operator">=</span> <span class="token class-name static-context">Version</span><span class="token operator">::</span><span class="token function">application</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/path/to/version.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The Utils package also comes with an example &quot;build version&quot; executable, which you could use as inspiration for building your own version file automatically. The executable uses Git to obtain the latest version. Please review the source code of <code>Utils/bin/build-version</code> for more information.</p><h2 id="alternatives" tabindex="-1"><a class="header-anchor" href="#alternatives" aria-hidden="true">#</a> Alternatives</h2>`,20),g={href:"https://packagist.org/packages/jean85/pretty-package-versions",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"jean85/pretty-package-versions",-1),f={href:"https://getcomposer.org/doc/07-runtime.md",target:"_blank",rel:"noopener noreferrer"};function b(_,x){const s=i("router-link"),o=i("ExternalLinkIcon");return p(),r("div",null,[u,h,a("nav",v,[a("ul",null,[a("li",null,[n(s,{to:"#package"},{default:t(()=>[e("package()")]),_:1})]),a("li",null,[n(s,{to:"#hasfor"},{default:t(()=>[e("hasFor()")]),_:1})]),a("li",null,[n(s,{to:"#application"},{default:t(()=>[e("application()")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#version-file"},{default:t(()=>[e("Version file")]),_:1})])])]),a("li",null,[n(s,{to:"#alternatives"},{default:t(()=>[e("Alternatives")]),_:1})])])]),k,a("p",null,[e("You can also use "),a("a",g,[m,n(o)]),e(" or "),a("a",f,[e("Composer's runtime utilities"),n(o)]),e(", to obtain version information for installed packages.")])])}const y=l(d,[["render",b],["__file","version.html.vue"]]);export{y as default};
