import{_ as n,p as s,q as a,a1 as e}from"./framework-efe98465.js";const t={},o=e(`<h1 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h1><p>The Audit Trail package relies on events for recording changes in models. By default, each model that makes use of the <code>RecordsChanges</code> will automatically record certain types of operations, e.g. when you save your model. However, it is unable to record all types of operations, especially if you have added custom operations inside your models. To overcome this, you can choose to manually dispatch appropriate events, which will ensure recording.</p><h2 id="record-single-change" tabindex="-1"><a class="header-anchor" href="#record-single-change" aria-hidden="true">#</a> Record Single Change</h2><p>To record a single change manually, dispatch the predefined <code>ModelHasChanged</code> event.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Audit<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>RecordsChanges</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Audit<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>ModelHasChanged</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Category</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">RecordsChanges</span><span class="token punctuation">;</span>
    
    <span class="token comment">// E.g. a custom operation in your model</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">moveCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... move logic not shown here...</span>
        
        <span class="token comment">// Obtain current authenticated user (optional)</span>
        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Record &quot;move&quot; operation</span>
        <span class="token class-name static-context">ModelHasChanged</span><span class="token operator">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span>
            <span class="token variable">$this</span><span class="token punctuation">,</span>
            <span class="token variable">$user</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;category moved&#39;</span> <span class="token comment">// the type of change...</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For additional information, please review source code of <code>Aedart\\Audit\\Events\\ModelHasChanged</code>.</p><h2 id="record-changes-for-multiple-models" tabindex="-1"><a class="header-anchor" href="#record-changes-for-multiple-models" aria-hidden="true">#</a> Record Changes for Multiple models</h2><p>To record changes for multiple models, you can dispatch the <code>MultipleModelsChanged</code> event.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Audit<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>MultipleModelsChanged</span><span class="token punctuation">;</span>

<span class="token comment">// Obtain models that are about to be changed...</span>
<span class="token variable">$categories</span> <span class="token operator">=</span> Category
            <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;has_discount&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Make and save your changes ... not shown here...</span>

<span class="token comment">// Record changes for all changed models.</span>
<span class="token class-name static-context">MultipleModelsChanged</span><span class="token operator">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$categories</span><span class="token punctuation">,</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;discount removed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Review source code of <code>Aedart\\Audit\\Events\\MultipleModelsChanged</code>, for additional information.</p>`,10),c=[o];function p(i,l){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","events.html.vue"]]);export{u as default};
