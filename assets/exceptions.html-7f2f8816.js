import{_ as c,M as i,p as r,q as u,R as n,t as s,N as a,U as e,a1 as p}from"./framework-efe98465.js";const d={},k=n("h1",{id:"exception-handling",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#exception-handling","aria-hidden":"true"},"#"),s(" Exception Handling")],-1),h={href:"https://www.php.net/manual/en/function.set-error-handler.php",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.php.net/manual/en/function.set-exception-handler.php",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.php.net/manual/en/function.register-shutdown-function.php",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"exception handling in Athenaeum Core Application is disabled, by default",-1),g={class:"table-of-contents"},f=n("p",null,[s("[1]: "),n("em",null,'Error, exception and shutdown handling will be referred to as "exception handling", within this context.')],-1),x=n("h2",{id:"laravel-s-exception-handling",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#laravel-s-exception-handling","aria-hidden":"true"},"#"),s(" Laravel's Exception Handling?")],-1),y={href:"https://laravel.com/docs/8.x/errors#the-exception-handler",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"render()",-1),_={href:"https://github.com/laravel/framework/blob/6.x/src/Illuminate/Contracts/Debug/ExceptionHandler.php",target:"_blank",rel:"noopener noreferrer"},E=n("em",null,"it is still inspired by that of Laravel!",-1),q=n("h2",{id:"how-it-works",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-it-works","aria-hidden":"true"},"#"),s(" How it Works")],-1),H={href:"https://designpatternsphp.readthedocs.io/en/latest/Structural/Composite/README.html",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"true",-1),$=p(`<p>Behind the scene, a <code>CompositeExceptionHandler</code> is responsible for reporting (<em>e.g. logging</em>) and passing captured exceptions to the registered exception handlers.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        Captured Exception
                +
+-----------+   |
| Handler A |   |
+-----------+   |
| Handler B |   |
+-----------+   |
| Handler C |   |
+-----------+   |
  ...           |
+-----------+   v
| Handler X |
+-----------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This kind of approach allows you to split your application&#39;s exception handling, into multiple smaller sections of logic (<em>&quot;leaf&quot; exception handlers</em>). Each of these handlers will, <em>ideally</em>, only be responsible for dealing with a few exceptions, in contrast to a single large and complex exception handler.</p><h3 id="error-shutdown-handling" tabindex="-1"><a class="header-anchor" href="#error-shutdown-handling" aria-hidden="true">#</a> Error &amp; Shutdown Handling</h3>`,4),I={href:"https://www.php.net/manual/en/language.errors.php",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.php.net/manual/en/class.errorexception",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"ErrorException",-1),C=n("h2",{id:"prerequisite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prerequisite","aria-hidden":"true"},"#"),s(" Prerequisite")],-1),L={href:"https://packagist.org/packages/illuminate/log",target:"_blank",rel:"noopener noreferrer"},D=p(`<h2 id="enabling-exception-handling" tabindex="-1"><a class="header-anchor" href="#enabling-exception-handling" aria-hidden="true">#</a> Enabling Exception Handling</h2><p>To enable exception handling, edit your <code>.env</code> and set the <code>EXCEPTION_HANDLING_ENABLED</code> to <code>true</code>.</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># ... previous not shown ...</span>

<span class="token comment"># Exception Handling</span>
<span class="token key attr-name">EXCEPTION_HANDLING_ENABLED</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="last-resort-handler" tabindex="-1"><a class="header-anchor" href="#last-resort-handler" aria-hidden="true">#</a> &quot;Last Resort&quot; Handler</h2><p>The first &quot;leaf&quot; exception handler that you <em>SHOULD</em> create, is a &quot;Last resort&quot; exception handler; a handler that deals with any kind of exceptions, aka. your fallback mechanism.</p><p>To create a &quot;lead&quot; exception handler, extend the <code>BaseExceptionHandler</code> abstraction. In the following example, a very simplified &quot;last resort&quot; exception handler is shown.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>BaseExceptionHandler</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Throwable</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">LastResortExceptionHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseExceptionHandler</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@inheritDoc</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// When application is handling a Http request...</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">runningInConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">http_response_code</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;&lt;h1&gt;Sorry... but it seems we have some trouble in our end.&lt;/h1&gt;&#39;</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// When running in console, just output entire exception</span>
        <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$exception</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If at all possible, you <em>should avoid sending output directly</em> via your exception handlers. Consider assigning your desired Http output to a response handler, if such is possible for you. In any case, when creating an exception handler, you should try to accommodate the possibility that your application might be running in the console. This may require a different kind of exception handling.</p><h3 id="register-your-exception-handler" tabindex="-1"><a class="header-anchor" href="#register-your-exception-handler" aria-hidden="true">#</a> Register Your Exception Handler</h3><p>Once your &quot;leaf&quot; exception handler has been completed, add it&#39;s class path in the <code>handlers</code> array, which is located in the <code>/configs/exceptions.php</code> file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token comment">// ... previous not shown ...</span>

    <span class="token string single-quoted-string">&#39;handlers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>EditorExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>ShoppingExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>NavigationExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>DbExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>LastResortExceptionHandler</span><span class="token operator">::</span><span class="token keyword">class</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Your &quot;last resort&quot; exception handler <em>SHOULD</em> be placed last, in the <code>handlers</code> array.</p></div><h2 id="reporting" tabindex="-1"><a class="header-anchor" href="#reporting" aria-hidden="true">#</a> Reporting</h2><p>By default, an exception is &quot;reported&quot; by the <code>CompositeExceptionHandler</code>, before it is passed through to the registered &quot;leaf&quot; exception handlers. Within this context, the term reporting means logging exceptions.</p><h3 id="don-t-report" tabindex="-1"><a class="header-anchor" href="#don-t-report" aria-hidden="true">#</a> Don&#39;t Report</h3><p>Just like in Laravel&#39;s exception handler, if you wish to disable reporting of certain exceptions, add their class paths in the <code>$dontReport</code> property.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NavigationExceptionHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseExceptionHandler</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * List of exceptions not to be reported
     * 
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> 
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$dontReport</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>RouteNotFoundException</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>FileDoesNotExistException</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="handler-in-action" tabindex="-1"><a class="header-anchor" href="#handler-in-action" aria-hidden="true">#</a> Handler In Action</h2><p>Imagine that the following entry point encounters a condition, where it must throw an exception.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/../vendor/autoload.php&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">require_once</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/../bootstrap/app.php&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ... your legacy application&#39;s logic</span>

<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">hasSignedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;User is not authenticated&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ... etc</span>

<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The thrown exception is captured and passed through the list of registered &quot;lead&quot; exception handlers, until a handler returns <code>true</code>. Your &quot;last resort&quot; exception handler <em>SHOULD</em> handle any exception, which isn&#39;t handled by other registered handlers.</p><h3 id="application-didn-t-terminate" tabindex="-1"><a class="header-anchor" href="#application-didn-t-terminate" aria-hidden="true">#</a> Application didn&#39;t Terminate</h3>`,22),S={href:"https://www.php.net/manual/en/function.restore-exception-handler.php",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"terminate()",-1),P=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ... previous not shown ...</span>

<span class="token comment">// Never executed, in case of exception thrown...</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ensuring clean and graceful application shutdown, is a common problem for many applications. In the next section, a possible solution is explored.</p><h2 id="graceful-shutdown" tabindex="-1"><a class="header-anchor" href="#graceful-shutdown" aria-hidden="true">#</a> Graceful Shutdown</h2><p>Depending upon your registered service providers, or application&#39;s overall logic, it may require termination and shutdown logic. For instance, you may require logic that ensures all open database transactions are committed, or perhaps rolled back in case of exceptions. Or perhaps you may require logic, that closes the current session, file points, or other resources. A possible solution is to utilise the <code>terminating()</code> method. It registers callback methods that will be executed, when <code>terminate()</code> is invoked.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Register callback</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminating</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$session</span> <span class="token operator">=</span> <span class="token class-name static-context">IoCFacade</span><span class="token operator">::</span><span class="token function">tryMake</span><span class="token punctuation">(</span><span class="token class-name static-context">Session</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$session</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ... later in your application ...</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Triggers the registered &quot;terminating&quot; callback method</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),B=n("code",null,"terminate()",-1),O={href:"https://en.wikipedia.org/wiki/Graceful_exit",target:"_blank",rel:"noopener noreferrer"},U=p(`<h3 id="encapsulate-logic-via-run" tabindex="-1"><a class="header-anchor" href="#encapsulate-logic-via-run" aria-hidden="true">#</a> Encapsulate logic via <code>run()</code></h3><p>A different solution could be, to encapsulate your legacy application&#39;s logic via the <code>run()</code> method. It accepts a single callback. If the callback should fail, e.g. an exception is thrown, it will be captured by the <code>run()</code> method and passed on to the exception handling mechanism. Once the exception has been handled, code execution is resumed and the <code>terminate()</code> method is triggered.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/../vendor/autoload.php&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">require_once</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/../bootstrap/app.php&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token comment">// E.g. include your legacy application&#39;s entry point    </span>
    <span class="token keyword">include</span> <span class="token string single-quoted-string">&#39;my_legacy_app_index.php&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the above shown approach is possible for you to implement, then it could contribute towards allowing graceful shutdown.</p><h3 id="avoid-using-terminating" tabindex="-1"><a class="header-anchor" href="#avoid-using-terminating" aria-hidden="true">#</a> Avoid using <code>terminating()</code>?</h3><p>One could argue that you should avoid registering callbacks, via the <code>terminating()</code> method. But this might not always be possible. Imagine that for every request, <em>if all goes well</em>, you application needs to commit open database transactions, before closing it&#39;s connection gracefully. It makes sense to use the <code>terminate()</code>, in order to achieve such.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminating</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token class-name static-context">IoCFacade</span><span class="token operator">::</span><span class="token function">tryMake</span><span class="token punctuation">(</span><span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">hasOpenTransations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ... later in your application ...</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),F={class:"custom-container tip"},W=n("p",{class:"custom-container-title"},"TIP",-1),M={href:"https://laravel.com/docs/8.x/providers#the-boot-method",target:"_blank",rel:"noopener noreferrer"},G=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// In your service provider</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Application</span> <span class="token variable">$app</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">terminating</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">hasOpenTransations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),V=p(`<h3 id="use-handles-to-cleanup" tabindex="-1"><a class="header-anchor" href="#use-handles-to-cleanup" aria-hidden="true">#</a> Use Handles to Cleanup</h3><p>Now, if an exception is encountered, then you could use make use of an exception handler; one which ensures to rollback any open database transactions - <em>or perform other cleanup routines</em> - but avoid actually dealing with any exception! Any exception would just be passed on to the next registered handler.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Db<span class="token punctuation">\\</span>Cleanup</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>CleanupHandler</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">RollsBackTransactions</span> <span class="token keyword">extends</span> <span class="token class-name">CleanupHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">cleanup</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token class-name static-context">IoCFacade</span><span class="token operator">::</span><span class="token function">tryMake</span><span class="token punctuation">(</span><span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">hasOpenTransations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If such an approach is used, then your <code>handlers</code> array could look something similar, to the below illustrated example. In the top section of the array, you would place handlers that explicitly deal with application cleanup routines, whereas the middle and bottom section of the array would place handlers that deal with exceptions.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token comment">// ... previous not shown ...</span>

    <span class="token string single-quoted-string">&#39;handlers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token comment">// Cleanup         </span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Db<span class="token punctuation">\\</span>Cleanup<span class="token punctuation">\\</span>RollsBackTransactions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Session<span class="token punctuation">\\</span>Cleanup<span class="token punctuation">\\</span>ClosesSessions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Storage<span class="token punctuation">\\</span>Cleanup<span class="token punctuation">\\</span>RemovesFileLock</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>

        <span class="token comment">// Handles exceptions</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>EditorExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>ShoppingExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>NavigationExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>DbExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>

        <span class="token comment">// Last resort - if all else fails...</span>
        <span class="token class-name class-name-fully-qualified static-context">Acme<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>Handlers<span class="token punctuation">\\</span>LastResortExceptionHandler</span><span class="token operator">::</span><span class="token keyword">class</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ultimately, the burden of ensuring graceful shutdown falls on your shoulders. How you go about it, is entirely up to you. The above illustrated examples is nothing more than a possible solution.</p><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>Error, exception &amp; shutdown handling is by no means a trivial task. Perhaps your existing mechanism is sufficient and gets the job done. If not, perhaps this package&#39;s exception handling can offer a suitable alternative.</p>`,8);function Y(j,X){const o=i("ExternalLinkIcon"),t=i("router-link"),l=i("RouterLink");return r(),u("div",null,[k,n("p",null,[s("Presumably, your legacy application already has some kind of "),n("a",h,[s("error"),a(o)]),s(", "),n("a",v,[s("exception"),a(o)]),s(" and "),n("a",m,[s("shutdown handling"),a(o)]),s("[1]. Therefore, "),b,s(". Should you not be happy with your existing solution, then perhaps the possibilities offered here, could prove beneficial. At the very least, it might give you some inspiration.")]),n("nav",g,[n("ul",null,[n("li",null,[a(t,{to:"#laravel-s-exception-handling"},{default:e(()=>[s("Laravel's Exception Handling?")]),_:1})]),n("li",null,[a(t,{to:"#how-it-works"},{default:e(()=>[s("How it Works")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#error-shutdown-handling"},{default:e(()=>[s("Error & Shutdown Handling")]),_:1})])])]),n("li",null,[a(t,{to:"#prerequisite"},{default:e(()=>[s("Prerequisite")]),_:1})]),n("li",null,[a(t,{to:"#enabling-exception-handling"},{default:e(()=>[s("Enabling Exception Handling")]),_:1})]),n("li",null,[a(t,{to:"#last-resort-handler"},{default:e(()=>[s('"Last Resort" Handler')]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#register-your-exception-handler"},{default:e(()=>[s("Register Your Exception Handler")]),_:1})])])]),n("li",null,[a(t,{to:"#reporting"},{default:e(()=>[s("Reporting")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#don-t-report"},{default:e(()=>[s("Don't Report")]),_:1})])])]),n("li",null,[a(t,{to:"#handler-in-action"},{default:e(()=>[s("Handler In Action")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#application-didn-t-terminate"},{default:e(()=>[s("Application didn't Terminate")]),_:1})])])]),n("li",null,[a(t,{to:"#graceful-shutdown"},{default:e(()=>[s("Graceful Shutdown")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#encapsulate-logic-via-run"},{default:e(()=>[s("Encapsulate logic via run()")]),_:1})]),n("li",null,[a(t,{to:"#avoid-using-terminating"},{default:e(()=>[s("Avoid using terminating()?")]),_:1})]),n("li",null,[a(t,{to:"#use-handles-to-cleanup"},{default:e(()=>[s("Use Handles to Cleanup")]),_:1})])])]),n("li",null,[a(t,{to:"#onward"},{default:e(()=>[s("Onward")]),_:1})])])]),f,x,n("p",null,[s("In the "),a(l,{to:"/archive/v5x/core/#limitations"},{default:e(()=>[s("limitations section")]),_:1}),s(", it has been mentioned that the Athenaeum Core Application does not offer Http Request / Response Handling. Since Laravel's "),n("a",y,[s("Error & Exception Handling"),a(o)]),s(" mechanism depends on a Http Request and Response, it cannot be used directly with this application. More specifically, the "),w,s(" method, in Laravel's "),n("a",_,[s("Exception Handler"),a(o)]),s(", requires a request and must return a response. Such cannot be satisfied by the Athenaeum Core Application. Therefore, a different mechanism is offered - "),E]),q,n("p",null,[s("This exception handling mechanism uses a pseudo "),n("a",H,[s("Composite Pattern"),a(o)]),s(', where a captured exception is passed through a series of "leaf" exception handlers. The first handler to return '),A,s(", will stop the process and the exception is considered handled.")]),$,n("p",null,[s("Whenever a PHP "),n("a",I,[s("error"),a(o)]),s(" has been captured, it will be wrapped into an "),n("a",R,[T,a(o)]),s(" and thrown. The exception handling mechanism will then capture and process that exception. Similar logic is applied during PHP's shutdown, in case that an error was encountered.")]),C,n("p",null,[s("This exception handling mechanism depends on Laravel's "),n("a",L,[s("Log"),a(o)]),s("[2] package, as means of default reporting. See "),a(l,{to:"/archive/v5x/core/usage/logging.html"},{default:e(()=>[s("Logging chapter")]),_:1}),s(" for how to install it.")]),D,n("p",null,[s("When exceptions are thrown and PHP's "),n("a",S,[s("native exception handling"),a(o)]),s(" mechanism kicks in, remaining code is not executed. In other words, in the above shown example, the last two lines are never reached, should an exception be thrown. As a consequence of this, any registered termination logic is not executed, by the "),N,s(" method.")]),P,n("p",null,[s("Unfortunately, if an exception is thrown, the "),B,s(" method might never be reached. All of your registered callbacks are therefore not invoked. This could prove problematic, if your application depends on being able to perform "),n("a",O,[s('"graceful shutdown"'),a(o)]),s(" logic.")]),U,n("div",F,[W,n("p",null,[s("Terminating callbacks can also be registered in your Service Provider's "),n("a",M,[s("boot method"),a(o)]),s(".")]),G]),V])}const z=c(d,[["render",Y],["__file","exceptions.html.vue"]]);export{z as default};
