import{_ as i,M as o,p as l,q as r,R as n,N as s,U as t,t as a,a1 as p}from"./framework-efe98465.js";const u={},d=n("h1",{id:"duration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#duration","aria-hidden":"true"},"#"),a(" Duration")],-1),k=n("p",null,[n("code",null,"Duration"),a(" is a helper for dealing with relative time.")],-1),m={class:"table-of-contents"},h=p(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Dates<span class="token punctuation">\\</span>Duration</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;2020-09-23 + 42 seconds + 23456 microseconds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;2020-09-23 - 5 hours - 6 minutes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromDifference</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%r%Y-%M-%D %H:%I:%S.%F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;-00-00-00 05:06:42.023456&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-new-instance" tabindex="-1"><a class="header-anchor" href="#creating-new-instance" aria-hidden="true">#</a> Creating new instance</h2><p>You can create a new Duration instance, using a variety of methods. The following demonstrates some of these:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Using seconds</span>
<span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token function">Duration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;P10Y7DT4H5M34S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Using DateInterval</span>
<span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token function">Duration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;@&#39;</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Using DateTime</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> <code>from()</code></h3><p>The <code>from()</code> is a static alias for the Duration classes constructor.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;P10Y7DT4H5M34S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fromstring" tabindex="-1"><a class="header-anchor" href="#fromstring" aria-hidden="true">#</a> <code>fromString()</code></h3><p><code>fromString()</code> can be used to create a new Duration instance, using a data and time string.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;@&#39;</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fromseconds" tabindex="-1"><a class="header-anchor" href="#fromseconds" aria-hidden="true">#</a> <code>fromSeconds()</code></h3><p>As the name implies, <code>fromSeconds()</code> returns a new instance from specified amount of seconds.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromSeconds</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fromminutes" tabindex="-1"><a class="header-anchor" href="#fromminutes" aria-hidden="true">#</a> <code>fromMinutes()</code></h3><p>To create a new Instance from minutes, use <code>fromMinutes()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fromhoursminutes" tabindex="-1"><a class="header-anchor" href="#fromhoursminutes" aria-hidden="true">#</a> <code>fromHoursMinutes()</code></h3><p>To create an instance from hours and <em>optional</em> minutes, use the <code>fromHoursMinutes()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromHoursMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Minutes are optional</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Should you have a hours and minutes string, like <code>02:30</code> or <code>1:25</code>, then use the <code>fromStringHoursMinutes()</code> method to create duration instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromStringHoursMinutes</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;02:25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fromdifference" tabindex="-1"><a class="header-anchor" href="#fromdifference" aria-hidden="true">#</a> <code>fromDifference()</code></h3><p>When you wish to calculate the difference between two dates (<em>or times</em>), use the <code>fromDifference()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$then</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;2020-09-23 - 5 hours - 6 minutes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$when</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;2020-09-23 + 42 seconds + 23456 microseconds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">fromDifference</span><span class="token punctuation">(</span><span class="token variable">$when</span><span class="token punctuation">,</span> <span class="token variable">$then</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="convert" tabindex="-1"><a class="header-anchor" href="#convert" aria-hidden="true">#</a> Convert</h2><p>To obtain the duration in minutes, seconds or other format, use can use the following:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">52200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">asSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 52200</span>
<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">asMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 870</span>
<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">toHoursMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;14:30&#39;</span>
<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">toHoursMinutes</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;14 hours 30 minutes&#39;</span>
<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">toDaysHoursMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;0-14:30&#39;</span>
<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">toDaysHoursMinutes</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;0 days 14 hours 30 minutes&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h2>`,29),v=n("code",null,"format()",-1),f={href:"https://www.php.net/manual/en/dateinterval.format.php",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"DateInterval::format",-1),g=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$duration</span> <span class="token operator">=</span> <span class="token class-name static-context">Duration</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;P10Y7DT4H5M34S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$duration</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%Y-%M-%D %H:%I:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;10-00-07 04:05:34&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>Please review the source code for additional methods and examples.</p>`,3);function w(x,_){const e=o("router-link"),c=o("ExternalLinkIcon");return l(),r("div",null,[d,k,n("nav",m,[n("ul",null,[n("li",null,[s(e,{to:"#example"},{default:t(()=>[a("Example")]),_:1})]),n("li",null,[s(e,{to:"#creating-new-instance"},{default:t(()=>[a("Creating new instance")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#from"},{default:t(()=>[a("from()")]),_:1})]),n("li",null,[s(e,{to:"#fromstring"},{default:t(()=>[a("fromString()")]),_:1})]),n("li",null,[s(e,{to:"#fromseconds"},{default:t(()=>[a("fromSeconds()")]),_:1})]),n("li",null,[s(e,{to:"#fromminutes"},{default:t(()=>[a("fromMinutes()")]),_:1})]),n("li",null,[s(e,{to:"#fromhoursminutes"},{default:t(()=>[a("fromHoursMinutes()")]),_:1})]),n("li",null,[s(e,{to:"#fromdifference"},{default:t(()=>[a("fromDifference()")]),_:1})])])]),n("li",null,[s(e,{to:"#convert"},{default:t(()=>[a("Convert")]),_:1})]),n("li",null,[s(e,{to:"#format"},{default:t(()=>[a("Format")]),_:1})]),n("li",null,[s(e,{to:"#onward"},{default:t(()=>[a("Onward")]),_:1})])])]),h,n("p",null,[a("The "),v,a(" can be used to format the duration into a string. Behind the scene, PHP native "),n("a",f,[b,s(c)]),a(" is used.")]),g])}const $=i(u,[["render",w],["__file","duration.html.vue"]]);export{$ as default};
