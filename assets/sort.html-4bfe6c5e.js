import{_ as i,M as p,p as c,q as l,R as n,N as a,U as e,t,a1 as o}from"./framework-efe98465.js";const r={},u=o('<h1 id="sorting-processor" tabindex="-1"><a class="header-anchor" href="#sorting-processor" aria-hidden="true">#</a> Sorting Processor</h1><p>To enable sorting by columns in ascending or descending order, use the <code>SortingProcessor</code>. It accepts a comma separated value, from the http query parameter, which determines the &quot;properties&quot; and sorting order.</p><p><strong>Example</strong>: <em><code>https://my-app.org/api/v1/users?sort=name asc,updated_at desc</code> will result in a sql <code>order by</code> clause, in which <code>name</code> and <code>updated_at</code> columns specified, along with the requested sorting direction.</em></p>',3),d={class:"table-of-contents"},m=o(`<h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h2><p>As a minimum, you must specify the table column names that are sortable, using the <code>sortable()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Processors<span class="token punctuation">\\</span>SortingProcessor</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFilterBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
                    <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;updated_at&#39;</span>
                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token comment">// ...etc</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default-sorting" tabindex="-1"><a class="header-anchor" href="#default-sorting" aria-hidden="true">#</a> Default sorting</h3><p>If you wish to enable default sorting, then you can the <code>defaultSort()</code> method, along with the \`force() which will ensure that the processor is always applied, regardless whether a matching http query parameter was received or not. The method accepts a string value, which is expected formatted as you would normally request sorting.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;updated_at&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">defaultSort</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at desc&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="properties-to-column-names" tabindex="-1"><a class="header-anchor" href="#properties-to-column-names" aria-hidden="true">#</a> Properties to column names</h3><p>When the &quot;properties&quot; that your application or API exposes do not match your table columns directly, then you can use the <code>propertiesToColumns()</code> method. For instance, if your application uses a property named &quot;administrator&quot;, which corresponds to a <code>is_admin</code> column name, then you can use the mentioned method to ensure that it&#39;s automatically mapped, when processed.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;is_admin&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">propertiesToColumns</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;administrator&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;is_admin&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, if the following request is made:</p><ul><li><code>https://my-app.org/api/v1/users?sort=administrator desc</code></li></ul><p>Then, the processor will map &quot;administrator&quot; to the correct table column name, before creating the query filter. The result is that the applied query will contain a <code>order by is_admin desc</code> clause.</p><h3 id="maximum-allowed-properties" tabindex="-1"><a class="header-anchor" href="#maximum-allowed-properties" aria-hidden="true">#</a> Maximum allowed properties</h3><p>By the default, the processor will throw a validation exception (<em>results in a <code>422 Unprocessable Entity</code> http response</em>), whenever more than <code>3</code> properties are requested sorted. This can be changed using the <code>maxSortingProperties()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;updated_at&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">maxSortingProperties</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sorting-direction-identifiers" tabindex="-1"><a class="header-anchor" href="#sorting-direction-identifiers" aria-hidden="true">#</a> Sorting direction identifiers</h3><p><code>asc</code> and <code>desc</code> are used as the default sorting direction identifiers. You may change these via the <code>directions()</code>, which accepts an array containing key-value pairs:</p><ul><li>key = identifier</li><li>value = sql sorting direction</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">SortingProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">directions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;+&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;asc&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;-&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;desc&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using the above shown setup, sorting requests are then expected to be formatted in the following way:</p><ul><li><code>https://my-app.org/api/v1/users?sort=name -,email +</code></li></ul><p>Should you require more advanced formatting, then you are encouraged to extend the <code>SortingProcessor</code> and overwrite either of the following internal methods:</p><ul><li><code>extractSortingColumn()</code>: responsible for extracting the table column name</li><li><code>extractSortingDirection()</code>: responsible for extracting the SQL sorting direction</li><li><code>splitSortableItem()</code>: responsible for splitting a sorting value into an array</li></ul><p>Furthermore, you may also specify a different symbol for distinguishing between multiple properties and sorting direction, by changing the <code>$delimiter</code> property. See the source code for additional information.</p>`,24);function k(g,v){const s=p("router-link");return c(),l("div",null,[u,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#setup"},{default:e(()=>[t("Setup")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#default-sorting"},{default:e(()=>[t("Default sorting")]),_:1})]),n("li",null,[a(s,{to:"#properties-to-column-names"},{default:e(()=>[t("Properties to column names")]),_:1})]),n("li",null,[a(s,{to:"#maximum-allowed-properties"},{default:e(()=>[t("Maximum allowed properties")]),_:1})]),n("li",null,[a(s,{to:"#sorting-direction-identifiers"},{default:e(()=>[t("Sorting direction identifiers")]),_:1})])])])])]),m])}const b=i(r,[["render",k],["__file","sort.html.vue"]]);export{b as default};
