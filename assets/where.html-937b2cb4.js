import{_ as p,M as i,p as c,q as d,R as s,N as e,U as n,t as a,a1 as l}from"./framework-efe98465.js";const u={},m=s("h1",{id:"where",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#where","aria-hidden":"true"},"#"),a(" Where")],-1),g=s("p",null,[a("The "),s("code",null,"where()"),a(" method allows you specify condition clauses. It accepts a field, an operator and a value. However, just like the "),s("a",{href:"./select"},"select"),a(" method, the API you are working with may not support operators at all. If so, then you might have to settle using "),s("code",null,"where()"),a(" as a regular key-value construct.")],-1),h={class:"table-of-contents"},v=l(`<h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h2><p><code>where()</code> accepts the following arguments:</p><ul><li><code>$field</code>: <code>string|array</code> name of field or key-value pair, where key = field name, value = mixed.</li><li><code>$operator</code>: <code>mixed</code> operator or value</li><li><code>$value</code>: <code>mixed</code> (<em>optional</em>) value. If omitted, then <code>$operator</code> acts as value.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;john&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?name=john
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[name]=john
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=name eq &#39;john&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="operator" tabindex="-1"><a class="header-anchor" href="#operator" aria-hidden="true">#</a> Operator</h2><p>When passing an operator to the <code>where()</code> method, each grammar will attempt to add it to the final query string. There is no limitation of the types of operators you can use, provided the operator is stated as string. Consider the following example.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;gt&#39;</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?year[gt]=2020
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[year][gt]=2020
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=year gt 2020
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="multiple-conditions" tabindex="-1"><a class="header-anchor" href="#multiple-conditions" aria-hidden="true">#</a> Multiple Conditions</h2><p>You may add as many conditions as you require. The following illustrates multiple conditions on the same field.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;gt&#39;</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;lt&#39;</span><span class="token punctuation">,</span> <span class="token number">2051</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?year[gt]=2020&amp;year[lt]=2051
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[year][gt]=2020&amp;filter[year][lt]=2051
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=year gt 2020 and year lt 2051
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="via-array" tabindex="-1"><a class="header-anchor" href="#via-array" aria-hidden="true">#</a> Via Array</h3><p>If you pass an array as the first argument, then the query builder will interpret it as a list of conditions. Each key acts as the name of the field (<em>or filter name</em>), whereas the value acts as operator / value.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;year&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;gt&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2021</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;lt&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2031</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;john&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?year[gt]=2021&amp;year[lt]=2031&amp;name=john
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[year][gt]=2021&amp;filter[year][lt]=2031&amp;filter[name]=john
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=year gt 2021 and year lt 2031 and name eq &#39;john&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="array-values" tabindex="-1"><a class="header-anchor" href="#array-values" aria-hidden="true">#</a> Array Values</h2><p>When dealing with array values, you should be aware of how your chosen grammar produces it&#39;s final query string. Consider a situation the API you are working allows you to perform &quot;where users in list&quot; filtering. You might construct your condition in the following way.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;in&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above shown example will produce the following query string. <em>Depending on your needs, this outcome might not be favourable for you.</em></p><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?users[in][0]=1&amp;users[in][1]=2&amp;users[in][2]=3&amp;users[in][3]=4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[users][in][0]=1&amp;filter[users][in][1]=2&amp;filter[users][in][2]=3&amp;filter[users][in][3]=4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=users in (1,2,3,4)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><p>Alternatively, you could convert array values in to a comma-separated list. If so, then you could create your condition in the following way:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;in&#39;</span><span class="token punctuation">,</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?users[in]=1,2,3,4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[users][in]=1,2,3,4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><p><strong>Caution</strong>: <em>The above shown example will not create a valid OData &quot;where users in ...&quot; query. Consider using a regular array as value or make use of the <code>whereRaw()</code> method instead.</em></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=users in \`1,2,3,4\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="where-raw" tabindex="-1"><a class="header-anchor" href="#where-raw" aria-hidden="true">#</a> Where Raw</h2><p>The <code>whereRaw()</code> method can be used for stating conditions as raw expressions. Alternatively, you may also use the <a href="./raw">raw</a> method instead.</p><p>Two arguments are supported by the <code>whereRaw()</code> method:</p><ul><li><code>$expression</code>: <code>string</code> the raw expression</li><li><code>$bindings</code>: <code>array</code> (<em>optional</em>) binding values</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter=user eq :amount&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;amount&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter=user eq 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><p><strong>Caution</strong>: <em>Resulting query string is not a valid Json API filter!</em></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter=user eq 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><p><strong>Caution</strong>: <em>Resulting query string is not a valid OData filter!</em></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=filter=user eq 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="or-where" tabindex="-1"><a class="header-anchor" href="#or-where" aria-hidden="true">#</a> Or Where</h2>`,46),k=s("code",null,"orWhere()",-1),b=s("code",null,"orWhereRaw()",-1),y={href:"https://www.odata.org/getting-started/basic-tutorial/#queryData",target:"_blank",rel:"noopener noreferrer"},f=s("strong",null,"NOT considered conventional",-1),w=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;john&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;male&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><p><strong>Caution</strong>: <em>Not conventional!</em></p><p>The ampersand + pipe symbols (<em><code>&amp;|</code></em>) are used as a prefix, for each field/filter that acts as an &quot;or&quot; conjunction. This symbol can be changed in the grammar&#39;s configuration, in <code>config/http-clients.php</code>.</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?name=john&amp;|gender=male
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><p><strong>Caution</strong>: <em>Not conventional!</em></p><p>The pipe symbol (<em><code>|</code></em>) is used as a prefix, for each field/filter that acts as an &quot;or&quot; conjunction. This symbol can be changed in the grammar&#39;s configuration, in <code>config/http-clients.php</code>.</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?filter[name]=john&amp;filter[|gender]=male
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?$filter=name eq &#39;john&#39; or gender eq &#39;male&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details>`,4);function q(x,_){const t=i("router-link"),o=i("ExternalLinkIcon"),r=i("RouterLink");return c(),d("div",null,[m,g,s("nav",h,[s("ul",null,[s("li",null,[e(t,{to:"#arguments"},{default:n(()=>[a("Arguments")]),_:1})]),s("li",null,[e(t,{to:"#operator"},{default:n(()=>[a("Operator")]),_:1})]),s("li",null,[e(t,{to:"#multiple-conditions"},{default:n(()=>[a("Multiple Conditions")]),_:1}),s("ul",null,[s("li",null,[e(t,{to:"#via-array"},{default:n(()=>[a("Via Array")]),_:1})])])]),s("li",null,[e(t,{to:"#array-values"},{default:n(()=>[a("Array Values")]),_:1})]),s("li",null,[e(t,{to:"#where-raw"},{default:n(()=>[a("Where Raw")]),_:1})]),s("li",null,[e(t,{to:"#or-where"},{default:n(()=>[a("Or Where")]),_:1})])])]),v,s("p",null,[k,a(" and "),b,a(' can be used to add "or" conjunctions in your http query string. However, apart from '),s("a",y,[a("OData"),e(o)]),a(", these are "),f,a('. Chances are pretty good that these are NOT supported by API you are working with, if "or" conjunctions are supported at all.')]),w,s("p",null,[a('If your target API does support "or" conjunctions, yet these grammars fail to deliver the desired syntax for such, please consider '),e(r,{to:"/archive/v7x/http/clients/query/custom_grammar.html"},{default:n(()=>[a("creating a custom grammar")]),_:1}),a(".")])])}const j=p(u,[["render",q],["__file","where.html.vue"]]);export{j as default};
