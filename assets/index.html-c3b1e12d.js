import{_ as c,M as p,p as u,q as r,R as n,t as s,N as a,U as e,a1 as i}from"./framework-efe98465.js";const d={},k=n("h1",{id:"summation-collection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#summation-collection","aria-hidden":"true"},"#"),s(" Summation Collection")],-1),v=n("em",null,'"[...] cumulative action or effect [...]"',-1),m={href:"https://www.merriam-webster.com/dictionary/summation",target:"_blank",rel:"noopener noreferrer"},g={class:"table-of-contents"},h=i(`<h2 id="basic-example" tabindex="-1"><a class="header-anchor" href="#basic-example" aria-hidden="true">#</a> Basic Example</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Summation</span><span class="token punctuation">;</span>

<span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;points&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$collection</span>
    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setting-initial-values" tabindex="-1"><a class="header-anchor" href="#setting-initial-values" aria-hidden="true">#</a> Setting initial values</h2><p>To work with a <code>Summation</code> collection, you must first set the initial value(s), which you later wish to process in some way. You can either state them when you create a new instance (<em>e.g. via the <code>make()</code> method</em>), or by using the <code>set()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;strength&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">15</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;agility&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">22</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;intelligence&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">19</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or...</span>

<span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;strength&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;agility&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;intelligence&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="processing-values" tabindex="-1"><a class="header-anchor" href="#processing-values" aria-hidden="true">#</a> Processing values</h2><h3 id="increase" tabindex="-1"><a class="header-anchor" href="#increase" aria-hidden="true">#</a> Increase</h3><p>Use the <code>increase()</code> or <code>add()</code> method to increase a key&#39;s value with a given amount.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="decrease" tabindex="-1"><a class="header-anchor" href="#decrease" aria-hidden="true">#</a> Decrease</h3><p>To decrease a key&#39;s value, you can use the <code>decrease()</code> or <code>subtract()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multiply" tabindex="-1"><a class="header-anchor" href="#multiply" aria-hidden="true">#</a> Multiply</h3><p>You can multiple an existing key&#39;s value using the <code>multiply()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="divide" tabindex="-1"><a class="header-anchor" href="#divide" aria-hidden="true">#</a> Divide</h3><p>To divide and existing key&#39;s value, use the <code>divide()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 8.3333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apply-callback" tabindex="-1"><a class="header-anchor" href="#apply-callback" aria-hidden="true">#</a> Apply Callback</h3><p>All processing methods accept a <code>callable</code> as a value, in which you can process a given key&#39;s value, however you want. The result of the given callback is the used as the key&#39;s new value.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;amount&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Summation</span> <span class="token variable">$summation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$value</span> <span class="token operator">/</span> <span class="token variable">$summation</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;amount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 3.125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dot-notation" tabindex="-1"><a class="header-anchor" href="#dot-notation" aria-hidden="true">#</a> Dot notation</h2><p>Laravel&#39;s &quot;dot notation&quot; is also supported by the <code>Summation</code> collection component.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Summation</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;player.strength&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;player.strength&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;player.strength&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="determine-keys-and-values" tabindex="-1"><a class="header-anchor" href="#determine-keys-and-values" aria-hidden="true">#</a> Determine keys and values</h2><h3 id="has-key" tabindex="-1"><a class="header-anchor" href="#has-key" aria-hidden="true">#</a> Has key</h3><p>The <code>has()</code> method can be used to determine whether a key exists in the collection or not.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;score&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true or false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The <code>has()</code> will return <code>true</code> if a key exists, even if the key&#39;s value is zero (<em>empty</em>).</p></div><h3 id="has-value" tabindex="-1"><a class="header-anchor" href="#has-value" aria-hidden="true">#</a> Has value</h3><p>To determine if a key exists and has a value (<em>nonempty value</em>), use the <code>hasValue()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">hasValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;score&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true if key exists and has a nonempty value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="removing-keys" tabindex="-1"><a class="header-anchor" href="#removing-keys" aria-hidden="true">#</a> Removing keys</h2><p>A key and it&#39;s associated value can be deleted by using the <code>remove()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;player.intelligence&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="exporting" tabindex="-1"><a class="header-anchor" href="#exporting" aria-hidden="true">#</a> Exporting</h2><h3 id="to-array" tabindex="-1"><a class="header-anchor" href="#to-array" aria-hidden="true">#</a> To Array</h3><p>The <code>toArray()</code> method will export all keys and values to a native php <code>array</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="to-json" tabindex="-1"><a class="header-anchor" href="#to-json" aria-hidden="true">#</a> To Json</h3><p>If you wish to retrieve a Json representation of the collection, you can either use the <code>toJson()</code> method or invoke <code>json_encode()</code> directly on the collection.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or...</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$collection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h2>`,43),b={class:"custom-container warning"},f=n("p",{class:"custom-container-title"},"Prerequisite",-1),y={href:"https://packagist.org/packages/symfony/var-dumper",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"symfony/var-dumper",-1),_=i(`<p>The <code>dd()</code> method will dump the collection&#39;s keys and values and stop further script execution.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">dd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Dumps keys and values and STOPS script execution!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>dump()</code> method, on the other hand, will only dump the collection&#39;s keys and values.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$collection</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Dumps keys and values</span>
    <span class="token operator">-&gt;</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;points&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function q(w,$){const l=p("RouterLink"),o=p("ExternalLinkIcon"),t=p("router-link");return u(),r("div",null,[k,n("p",null,[s("A collection of numeric values, which are typically a product of processing multiple items, e.g. database records. Most commonly, you would use this component in combination with an "),a(l,{to:"/archive/v8x/collections/summation/items-processor.html"},{default:e(()=>[s("Items Processor")]),_:1}),s(".")]),n("p",null,[s('Within this context, the term "summation" is referred to as a '),v,s(" ("),n("a",m,[s("Merriam Webster"),a(o)]),s(").")]),n("nav",g,[n("ul",null,[n("li",null,[a(t,{to:"#basic-example"},{default:e(()=>[s("Basic Example")]),_:1})]),n("li",null,[a(t,{to:"#setting-initial-values"},{default:e(()=>[s("Setting initial values")]),_:1})]),n("li",null,[a(t,{to:"#processing-values"},{default:e(()=>[s("Processing values")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#increase"},{default:e(()=>[s("Increase")]),_:1})]),n("li",null,[a(t,{to:"#decrease"},{default:e(()=>[s("Decrease")]),_:1})]),n("li",null,[a(t,{to:"#multiply"},{default:e(()=>[s("Multiply")]),_:1})]),n("li",null,[a(t,{to:"#divide"},{default:e(()=>[s("Divide")]),_:1})]),n("li",null,[a(t,{to:"#apply-callback"},{default:e(()=>[s("Apply Callback")]),_:1})])])]),n("li",null,[a(t,{to:"#dot-notation"},{default:e(()=>[s("Dot notation")]),_:1})]),n("li",null,[a(t,{to:"#determine-keys-and-values"},{default:e(()=>[s("Determine keys and values")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#has-key"},{default:e(()=>[s("Has key")]),_:1})]),n("li",null,[a(t,{to:"#has-value"},{default:e(()=>[s("Has value")]),_:1})])])]),n("li",null,[a(t,{to:"#removing-keys"},{default:e(()=>[s("Removing keys")]),_:1})]),n("li",null,[a(t,{to:"#exporting"},{default:e(()=>[s("Exporting")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#to-array"},{default:e(()=>[s("To Array")]),_:1})]),n("li",null,[a(t,{to:"#to-json"},{default:e(()=>[s("To Json")]),_:1})])])]),n("li",null,[a(t,{to:"#debugging"},{default:e(()=>[s("Debugging")]),_:1})])])]),h,n("div",b,[f,n("p",null,[s("To use the debugging methods, you must have "),n("a",y,[x,a(o)]),s(" installed.")])]),_])}const T=c(d,[["render",q],["__file","index.html.vue"]]);export{T as default};
