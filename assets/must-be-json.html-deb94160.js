import{_ as a,M as t,p as o,q as p,R as s,t as n,N as c,a1 as i}from"./framework-efe98465.js";const l={},r=s("h1",{id:"request-must-be-json",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#request-must-be-json","aria-hidden":"true"},"#"),n(" Request Must Be Json")],-1),u=s("code",null,"RequestMustBeJson",-1),d=s("code",null,"Content-Type",-1),h=s("code",null,"Accept",-1),k=s("code",null,"application/json",-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400",target:"_blank",rel:"noopener noreferrer"},v=i(`<h2 id="registration" tabindex="-1"><a class="header-anchor" href="#registration" aria-hidden="true">#</a> Registration</h2><p>Register the middleware in your <code>app/Http/Kernel.php</code> file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...Inside your App\\Http\\Kernel class </span>
<span class="token keyword">protected</span> <span class="token variable">$routeMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;must-be-json&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>RequestMustBeJson</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    
    <span class="token comment">//...remaining not shown...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assign the middleware to the routes that you wish to use it.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...not shown...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;must-be-json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function g(_,b){const e=t("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("The "),u,n(" middleware ensures that a request's "),d,n(" and "),h,n(" headers are of a JSON type, e.g. "),k,n(". When a client performs a request that is not of a valid JSON type, then this middleware will reject the request and result in a HTTP "),s("a",m,[n("400 Bad Request"),c(e)]),n(" response.")]),v])}const q=a(l,[["render",g],["__file","must-be-json.html.vue"]]);export{q as default};
