import{_ as l,M as i,p as c,q as p,R as e,t as n,N as a,U as t,a1 as o}from"./framework-efe98465.js";const d={},u=e("h1",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),n(" Configuration")],-1),h=e("code",null,"/configs",-1),g=o(`<h2 id="get-and-set-values" tabindex="-1"><a class="header-anchor" href="#get-and-set-values" aria-hidden="true">#</a> Get and Set Values</h2><p>There are many ways to obtain the configuration repository. The following only illustrates a single possibility. For additional possibilities, consider reviewing the <a href="../../support/laravel">Laravel Helpers</a> package.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$config</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$config</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;app.name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$config</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;app.name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Acme Inc. Application&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="behind-the-scene" tabindex="-1"><a class="header-anchor" href="#behind-the-scene" aria-hidden="true">#</a> Behind The Scene</h2>`,4),v={href:"https://github.com/laravel/framework/blob/11.x/src/Illuminate/Config/Repository.php",target:"_blank",rel:"noopener noreferrer"},f=e("a",{href:"../../config"},"Athenaeum Config Loader",-1),m=e("code",null,"/configs",-1),b=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/configs
    /services/
        MyServiceA.json
        MyServiceB.ini
        MyServiceC.yml
    app.php

    // ... remaining not shown ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See <a href="../../config">Package documentation</a> for more information.</p>`,2);function k(_,y){const s=i("RouterLink"),r=i("ExternalLinkIcon");return c(),p("div",null,[u,e("p",null,[n("All of this package's configuration is located within your "),h,n(" directory ("),e("em",null,[n("this path "),a(s,{to:"/archive/current/core/integration.html"},{default:t(()=>[n("can be specified")]),_:1}),n(" in your application instance")]),n(").")]),g,e("p",null,[n("Laravel's "),e("a",v,[n("Configuration Repository"),a(r)]),n(" is used to hold the configuration, whilst the "),f,n(" is used to load and populate the Repository. This offers you slightly different configuration possibilities, than within a regular Laravel application. Amongst such possibilities, is the the ability to use nested directories, within your "),m,n(" directory. Also the loader supports various file types and the possibility to add your own "),a(s,{to:"/archive/current/config/custom.html"},{default:t(()=>[n("custom file parsers")]),_:1}),n(".")]),b])}const w=l(d,[["render",k],["__file","index.html.vue"]]);export{w as default};
