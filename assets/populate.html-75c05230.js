import{_ as s,M as e,p as t,q as o,R as p,t as a,N as i,U as r,a1 as c}from"./framework-efe98465.js";const l={},u=c(`<h1 id="populate" tabindex="-1"><a class="header-anchor" href="#populate" aria-hidden="true">#</a> Populate</h1><p>To populating your DTO with data, provide the constructor with an array or use the <code>populate()</code> method. Alternatively, you can also populate a DTO from a JSON string.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Getters and setter methods are automatically invoked for each property, if available.</p></div><h2 id="via-constructor" tabindex="-1"><a class="header-anchor" href="#via-constructor" aria-hidden="true">#</a> Via constructor</h2><p>If you are extending the default DTO abstraction, then you can also pass in an array in the constructor.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Carmen Rock&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>  <span class="token operator">=&gt;</span> <span class="token number">25</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="via-populate" tabindex="-1"><a class="header-anchor" href="#via-populate" aria-hidden="true">#</a> Via <code>populate()</code></h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Timmy Jones&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>  <span class="token operator">=&gt;</span> <span class="token number">32</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="from-json" tabindex="-1"><a class="header-anchor" href="#from-json" aria-hidden="true">#</a> From JSON</h2>`,9);function d(h,v){const n=e("RouterLink");return t(),o("div",null,[u,p("p",null,[a("See "),i(n,{to:"/archive/v7x/dto/json.html"},{default:r(()=>[a("JSON")]),_:1}),a(" section.")])])}const k=s(l,[["render",d],["__file","populate.html.vue"]]);export{k as default};
