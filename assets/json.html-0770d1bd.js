import{_ as o,M as t,p as c,q as p,R as n,t as e,N as a,a1 as i}from"./framework-efe98465.js";const l={},r=n("h1",{id:"json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),e(" Json")],-1),d=n("code",null,"Json",-1),u={href:"https://www.json.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://secure.php.net/manual/en/function.json-encode.php",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"json_encode()",-1),k={href:"https://secure.php.net/manual/en/function.json-decode.php",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"json_decode()",-1),m=n("h2",{id:"encoding-and-decoding",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#encoding-and-decoding","aria-hidden":"true"},"#"),e(" Encoding and Decoding")],-1),v=n("code",null,"encode()",-1),f=n("code",null,"decode()",-1),b={href:"http://php.net/manual/en/class.jsonexception.php",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"\\JsonException ",-1),j={href:"http://php.net/manual/en/json.constants.php",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"JSON_THROW_ON_ERROR",-1),w=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Json</span><span class="token punctuation">;</span>

<span class="token variable">$encoded</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Reilly&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>   <span class="token operator">=&gt;</span> <span class="token number">32</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ------------------------------------------ //</span>

<span class="token variable">$decoded</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;Michele Rodriguez&quot;,&quot;age&quot;:4}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function J(N,R){const s=t("ExternalLinkIcon");return c(),p("div",null,[r,n("p",null,[e("The "),d,e(" component offers a few "),n("a",u,[e("JSON"),a(s)]),e(" utilities. It uses PHP's native "),n("a",h,[_,a(s)]),e(" and "),n("a",k,[g,a(s)]),e(".")]),m,n("p",null,[e("The "),v,e(" and "),f,e(" methods will automatically throw a "),n("a",b,[x,a(s)]),e(", if encoding or decoding fails. It does so by setting the "),n("a",j,[q,a(s)]),e(" bitmask option, when invoked.")]),w])}const O=o(l,[["render",J],["__file","json.html.vue"]]);export{O as default};
