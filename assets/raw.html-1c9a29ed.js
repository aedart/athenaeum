import{_ as e,p as s,q as a,a1 as n}from"./framework-efe98465.js";const t={},i=n(`<h1 id="raw-expressions" tabindex="-1"><a class="header-anchor" href="#raw-expressions" aria-hidden="true">#</a> Raw Expressions</h1><p>Unlike <code>selectRaw()</code>, <code>whereRaw()</code> or other equivalent methods, <code>raw()</code> allows you to add an expression, without prefixing, affixing or in other ways process the added expression.<br> The method will, however, inject binding values into the provided expression, if any are given.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Raw expressions added via <code>raw()</code> will always be added at the end of the final assembled http query string, regardless of the order stated via the builder.</p></div><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h2><p><code>raw()</code> accepts the following arguments:</p><ul><li><code>$expression</code>: <code>string</code> the raw expression</li><li><code>$bindings</code>: <code>array</code> (<em>optional</em>) binding values</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;search=person from (:list)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;list&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;a,b,c&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>default</summary><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?search=person from (a,b,c)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>json api</summary><p><strong>Caution</strong>: <em>Produced http query is not in accordance with Json API recommendations.</em></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>/users?search=person from (a,b,c)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>odata</summary><p><strong>Caution</strong>: <em>Produced http query is not a valid OData query.</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/users?search=person from (a,b,c)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details>`,11),r=[i];function o(d,c){return s(),a("div",null,r)}const p=e(t,[["render",o],["__file","raw.html.vue"]]);export{p as default};
