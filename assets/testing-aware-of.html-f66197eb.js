import{_ as t,M as p,p as o,q as c,R as s,t as n,N as e,a1 as i}from"./framework-efe98465.js";const l={},u=i(`<h1 id="testing-aware-of-helpers" tabindex="-1"><a class="header-anchor" href="#testing-aware-of-helpers" aria-hidden="true">#</a> Testing Aware-of Helpers</h1><p>If you are working with Aware-of Helpers (<em>&quot;getter-setter-traits&quot;</em>), then you can easily test them using the <code>GetterSetterTraitTester</code>.</p><h2 id="prerequisite" tabindex="-1"><a class="header-anchor" href="#prerequisite" aria-hidden="true">#</a> Prerequisite</h2><p>The helper that you wish to test <strong>MUST</strong> have it&#39;s methods declared in accordance with the following:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>set<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span>?<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token variable">$property</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
get<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: ?<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token punctuation">;</span>
has<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: bool <span class="token punctuation">;</span>
getDefault<span class="token punctuation">[</span>property-name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: ?<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>
<span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Helpers</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NameTrait</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getDefaultName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getDefaultName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-test-aware-of-helper" tabindex="-1"><a class="header-anchor" href="#how-to-test-aware-of-helper" aria-hidden="true">#</a> How to Test Aware-Of Helper</h2><p>To test the helper, use the <code>assertGetterSetterTraitMethods</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>TestCases<span class="token punctuation">\\</span>UnitTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>GetterSetterTraitTester</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>NameTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NameTraitTest</span> <span class="token keyword">extends</span> <span class="token class-name">UnitTestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">GetterSetterTraitTester</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@test</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canInvokeAllMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getFaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertGetterSetterTraitMethods</span><span class="token punctuation">(</span>
            <span class="token class-name static-context">NameTrait</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token variable">$faker</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">,</span> <span class="token comment">// Value to set</span>
            <span class="token variable">$faker</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token comment">// Default value to return</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="auto-generate-argument-data" tabindex="-1"><a class="header-anchor" href="#auto-generate-argument-data" aria-hidden="true">#</a> Auto Generate Argument Data</h3><p>As an alternative, you can allow the tester to automatically detect and generate argument data, based on the argument&#39;s type. To do so, use the <code>assertTraitMethods</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>TestCases<span class="token punctuation">\\</span>UnitTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>GetterSetterTraitTester</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>NameTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NameTraitTest</span> <span class="token keyword">extends</span> <span class="token class-name">UnitTestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">GetterSetterTraitTester</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@test</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canInvokeAllMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertTraitMethods</span><span class="token punctuation">(</span><span class="token class-name static-context">NameTrait</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),r={class:"custom-container warning"},d=s("p",{class:"custom-container-title"},"Caution",-1),k=s("code",null,"assertTraitMethods()",-1),v={href:"http://php.net/manual/en/language.types.intro.php",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/mockery/mockery",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"assertGetterSetterTraitMethods()",-1);function h(g,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,s("div",r,[d,s("p",null,[n("The "),k,n(" method is able to generate data for "),s("a",v,[n("scalar-types"),e(a)]),n(". When an object is expected, the method will attempt to "),s("a",m,[n("mock that object"),e(a)]),n(". But, depending on the expected object's constructor arguments, it might fail to be mocked. If this is the case for you, then you are better of using the "),b,n(" and manually create the desired mocked object.")])])])}const w=t(l,[["render",h],["__file","testing-aware-of.html.vue"]]);export{w as default};
