import{_ as i,M as c,p as r,q as u,R as s,N as a,U as e,t as n,a1 as l}from"./framework-efe98465.js";const d={},k=s("h1",{id:"introduction",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),v={class:"table-of-contents"},h=s("h2",{id:"the-basics",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-basics","aria-hidden":"true"},"#"),n(" The Basics")],-1),m=s("code",null,"Evaluator",-1),b={href:"https://httpwg.org/specs/rfc9110.html#preconditions",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"If-Match",-1),f=s("p",null,"In general, when a precondition is evaluated either of the following will happen:",-1),_=s("code",null,"true",-1),x=s("li",null,[n("Evaluator continues to evaluate another precondition ("),s("em",null,"if requested"),n(").")],-1),w=s("em",null,"e.g. a state change or perhaps entirely modified resource",-1),y=s("code",null,"false",-1),q=s("code",null,"HttpException",-1),T=s("code",null,"Actions",-1),E={href:"https://httpwg.org/specs/rfc9110.html#precedence",target:"_blank",rel:"noopener noreferrer"},R=s("h2",{id:"how-to-evaluate",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-evaluate","aria-hidden":"true"},"#"),n(" How to Evaluate")],-1),$={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer"},C={href:"https://laravel.com/docs/10.x/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"},H=l(`<h3 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>HasEtag</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Preconditions<span class="token punctuation">\\</span>ResourceContext</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Preconditions<span class="token punctuation">\\</span>Evaluator</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Preconditions<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>GenericResource</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Validator</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>FormRequest</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ShowUserRequest</span> <span class="token keyword">extends</span> <span class="token class-name">FormRequest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name type-declaration">ResourceContext</span> <span class="token variable">$resource</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prepareForValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 1) Find requested resource or fail.</span>
        <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">findOrFailModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2) Wrap it inside a Resource Context</span>
        <span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">makeResourceContext</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3) Evaluate request&#39;s preconditions against resource...</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">resource</span> <span class="token operator">=</span> <span class="token class-name static-context">Evaluator</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">makeResourceContext</span><span class="token punctuation">(</span>Model <span class="token operator">&amp;</span> <span class="token class-name type-declaration">HasEtag</span> <span class="token variable">$model</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ResourceContext</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GenericResource</span><span class="token punctuation">(</span>
            <span class="token argument-name">data</span><span class="token punctuation">:</span> <span class="token variable">$model</span><span class="token punctuation">,</span>
            <span class="token argument-name">etag</span><span class="token punctuation">:</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">getStrongEtag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token argument-name">lastModifiedDate</span><span class="token punctuation">:</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token property">updated_at</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">findOrFailModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Model</span> <span class="token operator">&amp;</span> HasEtag
    <span class="token punctuation">{</span>
        <span class="token comment">// ...not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="route-or-controller-action" tabindex="-1"><a class="header-anchor" href="#route-or-controller-action" aria-hidden="true">#</a> Route or Controller Action</h3>`,3),M=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/user/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ShowUserRequest</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">resource</span><span class="token punctuation">;</span>
    <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token variable">$resource</span>
        <span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withCache</span><span class="token punctuation">(</span>
            <span class="token argument-name">etag</span><span class="token punctuation">:</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">etag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token argument-name">lastModified</span><span class="token punctuation">:</span> <span class="token variable">$resource</span><span class="token operator">-&gt;</span><span class="token function">lastModifiedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">private</span><span class="token punctuation">:</span> <span class="token constant boolean">true</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="responses" tabindex="-1"><a class="header-anchor" href="#responses" aria-hidden="true">#</a> Responses</h3><p>Whenever a request without preconditions is received by your application, your application will return the requested resource, along with a few cache headers. For instance:</p><p><strong>Request (<em>without precondition</em>)</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>GET /users/42 HTTP/1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Response (<em>with cache headers</em>)</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>HTTP/1.1 200 OK
Cache-Control: private
Etag: &quot;a81283f2670a78cd4c5a2e56cb0cd4ef5e357eb1&quot;
Last-Modified: Sun, 15 Jan 2023 16:13:23 GMT
Content-Type: application/json

{&quot;id&quot;:42,&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:31,&quot;updated_at&quot;:&quot;2023-01-15T16:13:23.000000Z&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),I={href:"https://httpwg.org/specs/rfc9110.html#field.if-none-match",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"If-None-Match",-1),P={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304",target:"_blank",rel:"noopener noreferrer"},F=l(`<p><strong>Request (<em>with precondition</em>)</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>GET /users/42 HTTP/1.1
If-None-Match: &quot;a81283f2670a78cd4c5a2e56cb0cd4ef5e357eb1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Response (<em>If-None-Match precondition failed</em>)</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>HTTP/1.1 304 Not Modified
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The controller or route action is never executed. Instead, an exception is thrown and your application converts it into an appropriate response. If the precondition had passed instead, then controller or route action would have been processed (<em>in this example</em>).</p><h2 id="the-evaluator" tabindex="-1"><a class="header-anchor" href="#the-evaluator" aria-hidden="true">#</a> The Evaluator</h2><p>You are free to implement the evaluation logic as you see fit, within your application. The previous shown examples are only meant to demonstrate the general process. The rest is up to you. To instantiate an <code>Evaluator</code> instance, invoke the <code>Evaluator::make()</code> method.</p><p>The method accepts 3 arguments:</p>`,8),N=s("li",null,[s("code",null,"Request $request"),n(": the incoming request.")],-1),S=s("code",null,"string[]|Precondition[] $preconditions = []",-1),L=s("em",null,"(optional)",-1),V=s("ul",null,[s("li",null,[s("em",null,"Defaults to RFC 9110 + extension preconditions, when none are given.")])],-1),W=s("code",null,"Actions|null $actions = null",-1),D=s("em",null,"(optional)",-1),O=s("ul",null,[s("li",null,[s("em",null,"Defaults to a default actions instance, when none is given.")])],-1),B=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Preconditions<span class="token punctuation">\\</span>Evaluator</span><span class="token punctuation">;</span>

<span class="token comment">// Create evaluator instance (with defaults)</span>
<span class="token variable">$evaluator</span> <span class="token operator">=</span> <span class="token class-name static-context">Evaluator</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...Or when you have custom preconditions / actions</span>
<span class="token variable">$evaluator</span> <span class="token operator">=</span> <span class="token class-name static-context">Evaluator</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span>
    <span class="token argument-name">reqeust</span><span class="token punctuation">:</span> <span class="token variable">$request</span><span class="token punctuation">,</span>
    <span class="token argument-name">preconditions</span><span class="token punctuation">:</span> <span class="token variable">$myPreconditionsArray</span><span class="token punctuation">,</span>
    <span class="token argument-name">actions</span><span class="token punctuation">:</span> <span class="token variable">$myActions</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=s("code",null,"evaluate()",-1),U=s("code",null,"ResourceContext",-1),j=s("em",null,"possible changed",-1),z=s("code",null,"HttpException",-1),J=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$evaluator</span><span class="token operator">-&gt;</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="exception-handling" tabindex="-1"><a class="header-anchor" href="#exception-handling" aria-hidden="true">#</a> Exception Handling</h2>`,2),K=s("code",null,"Evaluator",-1),Y={href:"https://laravel.com/docs/10.x/errors#the-exception-handler",target:"_blank",rel:"noopener noreferrer"};function Z(Q,X){const o=c("router-link"),p=c("ExternalLinkIcon"),t=c("RouterLink");return r(),u("div",null,[k,s("nav",v,[s("ul",null,[s("li",null,[a(o,{to:"#the-basics"},{default:e(()=>[n("The Basics")]),_:1})]),s("li",null,[a(o,{to:"#how-to-evaluate"},{default:e(()=>[n("How to Evaluate")]),_:1}),s("ul",null,[s("li",null,[a(o,{to:"#request"},{default:e(()=>[n("Request")]),_:1})]),s("li",null,[a(o,{to:"#route-or-controller-action"},{default:e(()=>[n("Route or Controller Action")]),_:1})]),s("li",null,[a(o,{to:"#responses"},{default:e(()=>[n("Responses")]),_:1})])])]),s("li",null,[a(o,{to:"#the-evaluator"},{default:e(()=>[n("The Evaluator")]),_:1})]),s("li",null,[a(o,{to:"#exception-handling"},{default:e(()=>[n("Exception Handling")]),_:1})])])]),h,s("p",null,[n("The design philosophy behind the request preconditions "),m,n(" is to evaluate an incoming "),s("a",b,[n("conditional request"),a(p)]),n(", e.g. "),g,n(", against the requested "),a(t,{to:"/archive/v7x/etags/evaluator/resource-context.html"},{default:e(()=>[n("resource")]),_:1}),n(".")]),f,s("ul",null,[s("li",null,[n("When it passes ("),_,n("): "),s("ul",null,[x,s("li",null,[n("Or it returns a changed "),a(t,{to:"/archive/v7x/etags/evaluator/resource-context.html"},{default:e(()=>[n("resource")]),_:1}),n(" ("),w,n(").")])])]),s("li",null,[n("When it fails ("),y,n("): "),s("ul",null,[s("li",null,[n("The request is aborted by throwing an appropriate "),q,n(", via an "),a(t,{to:"/archive/v7x/etags/evaluator/actions.html"},{default:e(()=>[T,n(" component")]),_:1}),n(".")]),s("li",null,[n("The "),a(t,{to:"/archive/v7x/etags/evaluator/resource-context.html"},{default:e(()=>[n("resource")]),_:1}),n(" changed and returned.")])])])]),s("p",null,[n("All preconditions are evaluated in accordance with "),s("a",E,[n("RFC 9110's order of precedence"),a(p)]),n(". See "),a(t,{to:"/archive/v7x/etags/evaluator/preconditions.html#supported-preconditions"},{default:e(()=>[n("supported preconditions")]),_:1}),n(" for additional information.")]),R,s("p",null,[n("Http Conditional Requests are always specific to the requested resource and the "),s("a",$,[n("Http Method"),a(p)]),n(". It is therefore recommended that you evaluate the requested resource inside your "),s("a",C,[n("Form Request"),a(p)]),n(". The following shows an example request:")]),H,s("p",null,[n("In your controller or route action, you can then return the requested resource with "),a(t,{to:"/archive/v7x/etags/macros.html#withcache"},{default:e(()=>[n("cache headers")]),_:1}),n(".")]),M,s("p",null,[n("However, when a request contains a preconditions, e.g. "),s("a",I,[A,a(p)]),n(", then it is processed. In the example below, the precondition fails because the etag value matches the resource's etag. Therefore, a "),s("a",P,[n("304 Not Modified"),a(p)]),n(" response is returned.")]),F,s("ul",null,[N,s("li",null,[S,n(": "),L,n(" list of "),a(t,{to:"/archive/v7x/etags/evaluator/preconditions.html"},{default:e(()=>[n("preconditions")]),_:1}),n(" to evaluate. "),V]),s("li",null,[W,n(": "),D,n(' "abort" or "state change" '),a(t,{to:"/archive/v7x/etags/evaluator/actions.html"},{default:e(()=>[n("actions")]),_:1}),n(" instance. "),O])]),B,s("p",null,[n("Once you have instantiated an evaluator instance, use the "),G,n(" method to evaluate request's preconditions against the requested resource. The method accepts a "),a(t,{to:"/archive/v7x/etags/evaluator/resource-context.html"},{default:e(()=>[U]),_:1}),n(" instance and will either return the resource ("),j,n("), or throw a "),z,n(".")]),J,s("p",null,[n("Whenever the "),K,n(" throws an exception, your Laravel application's exception handler will process it and create an appropriate response. Please read "),s("a",Y,[n("Laravel's exception handler documentation"),a(p)]),n(" for additional information.")])])}const sn=i(d,[["render",Z],["__file","index.html.vue"]]);export{sn as default};
