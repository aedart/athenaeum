import{_ as l,M as o,p as c,q as u,R as n,t as s,N as a,U as t,a1 as i}from"./framework-efe98465.js";const r={},d=n("h1",{id:"middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#middleware","aria-hidden":"true"},"#"),s(" Middleware")],-1),k={href:"https://www.php-fig.org/psr/psr-15/",target:"_blank",rel:"noopener noreferrer"},m={class:"table-of-contents"},v=i(`<h2 id="create-middleware" tabindex="-1"><a class="header-anchor" href="#create-middleware" aria-hidden="true">#</a> Create Middleware</h2><p>To create a custom middleware component, you must inherit from the <code>Middleware</code> interface.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Middleware</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Middleware</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Handler</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>RequestInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>ResponseInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Logger<span class="token punctuation">\\</span>ResponseLogger</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">LogsResponse</span> <span class="token keyword">implements</span> <span class="token class-name">Middleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Handler</span> <span class="token variable">$handler</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ResponseInterface</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$handler</span><span class="token operator">-&gt;</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name static-context">ResponseLogger</span><span class="token operator">::</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Differs from PSR-15</p><p>If you are familiar with PSR-15, you will immediately notice the similarity between the above shown middleware example, and the one defined in PST-15. Currently, it is not possible to use the same middleware component(s), as for PSR-15. This is because <code>Psr\\Http\\Server\\MiddlewareInterface</code> relies on <code>ServerRequestInterface</code>. In other words, it was designed to process incoming server requests, and not outgoing requests. Therefore, to avoid confusion and misuse of PSR-15, custom <code>Middleware</code> and <code>Handler</code> components have been added to this package.</p><p>Even so, the <code>Middleware</code> and <code>Handler</code> from this package offer the same look &amp; feel, as those defined by PSR-15.</p></div>`,4),g={class:"custom-container tip"},h=n("p",{class:"custom-container-title"},"Differs from Guzzle",-1),b={href:"http://docs.guzzlephp.org/en/stable/handlers-and-middleware.html",target:"_blank",rel:"noopener noreferrer"},w={href:"http://docs.guzzlephp.org/en/stable/handlers-and-middleware.html",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="apply-middleware" tabindex="-1"><a class="header-anchor" href="#apply-middleware" aria-hidden="true">#</a> Apply Middleware</h2><p>To apply middleware use the <code>withMiddleware()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LogsResponse</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">withMiddleware</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogsResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/weather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-list-of-middleware" tabindex="-1"><a class="header-anchor" href="#add-list-of-middleware" aria-hidden="true">#</a> Add List of Middleware</h3><p>You may also provide a list of middleware, using the same method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>SetsAuthenticationHeaders</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LimitsResults</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LogsResponse</span><span class="token punctuation">;</span>

<span class="token comment">// Will automatically resolve provided class paths...</span>
<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">withMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token class-name static-context">SetsAuthenticationHeaders</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token class-name static-context">LimitsResults</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token class-name static-context">LogsResponse</span><span class="token operator">::</span><span class="token keyword">class</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/weather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="via-configuration" tabindex="-1"><a class="header-anchor" href="#via-configuration" aria-hidden="true">#</a> Via Configuration</h2><p>Alternatively, you may also specify a list of middleware in your configuration.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token string single-quoted-string">&#39;profiles&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;driver&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Drivers<span class="token punctuation">\\</span>DefaultHttpClient</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;options&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                
                <span class="token string single-quoted-string">&#39;middleware&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>SetsAuthenticationHeaders</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LimitsResults</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LogsResponse</span><span class="token operator">::</span><span class="token keyword">class</span>
                <span class="token punctuation">]</span>

                <span class="token comment">// ... remaining not shown ...</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arguments-for-middleware" tabindex="-1"><a class="header-anchor" href="#arguments-for-middleware" aria-hidden="true">#</a> Arguments for Middleware</h3><p>Behind the scene, the <a href="../../../container/list-resolver">List Resolver</a> is used, to resolve middleware. This means that you can provide custom arguments for your middleware component, directly from the configuration.</p><p>The following hypothetical example assumes that each middleware component accepts one or more arguments. When resolved, each middleware instance will be provided with the arguments defined in the configuration.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token string single-quoted-string">&#39;profiles&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;driver&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Drivers<span class="token punctuation">\\</span>DefaultHttpClient</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;options&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                
                <span class="token string single-quoted-string">&#39;middleware&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>SetsAuthenticationHeaders</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                        <span class="token string single-quoted-string">&#39;token&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;WEATHER_SERVICE_TOKEN&#39;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LimitsResults</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                        <span class="token string single-quoted-string">&#39;maxResults&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">25</span><span class="token punctuation">,</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>LogsResponse</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                        <span class="token string single-quoted-string">&#39;maxEntries&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">15</span><span class="token punctuation">,</span>
                        <span class="token string single-quoted-string">&#39;path&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">storage_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/logs/weather-service-responses.log&#39;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">]</span>

                <span class="token comment">// ... remaining not shown ...</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="obtain-request-builder-in-middleware" tabindex="-1"><a class="header-anchor" href="#obtain-request-builder-in-middleware" aria-hidden="true">#</a> Obtain Request Builder in Middleware</h2><p>Should your middleware require the Http Request <code>Builder</code> instance, then just inherit from the <code>HttpRequestBuilderAware</code> interface. When resolved, the <code>Builder</code> will automatically be injected into your middleware.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Middleware</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Builders<span class="token punctuation">\\</span>HttpRequestBuilderAware</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Handler</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>HttpRequestBuilderTrait</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>RequestInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>ResponseInterface</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">LogsResponse</span> <span class="token keyword">implements</span>
    <span class="token class-name">Middleware</span><span class="token punctuation">,</span>
    HttpRequestBuilderAware
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">HttpRequestBuilderTrait</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Handler</span> <span class="token variable">$handler</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ResponseInterface</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Obtain builder</span>
        <span class="token variable">$builder</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getHttpRequestBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ... remaining not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The <code>Builder</code> is no longer able to alter the outgoing request, during middleware processing. It can, however, be used to obtain settings and options.</p></div>`,17);function y(q,R){const p=o("ExternalLinkIcon"),e=o("router-link");return c(),u("div",null,[d,n("p",null,[s("Inspired by "),n("a",k,[s("PSR-15: HTTP Server Request Handlers"),a(p)]),s(", the Http Client is able to process outgoing requests and incoming responses, using middleware.")]),n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#create-middleware"},{default:t(()=>[s("Create Middleware")]),_:1})]),n("li",null,[a(e,{to:"#apply-middleware"},{default:t(()=>[s("Apply Middleware")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#add-list-of-middleware"},{default:t(()=>[s("Add List of Middleware")]),_:1})])])]),n("li",null,[a(e,{to:"#via-configuration"},{default:t(()=>[s("Via Configuration")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#arguments-for-middleware"},{default:t(()=>[s("Arguments for Middleware")]),_:1})])])]),n("li",null,[a(e,{to:"#obtain-request-builder-in-middleware"},{default:t(()=>[s("Obtain Request Builder in Middleware")]),_:1})])])]),v,n("div",g,[h,n("p",null,[s("You should not confuse this middleware mechanism with "),n("a",b,[s("Guzzle's Handlers and Middleware"),a(p)]),s(". While they might overlap in purpose and functionality, they are distinctively two different mechanisms.")]),n("p",null,[s("It is possible to use both mechanisms. If so, then you should know that Guzzle's handlers and middleware will always be executed first. See "),n("a",w,[s("Guzzle's documentation"),a(p)]),s(" for additional information.")])]),f])}const M=l(r,[["render",y],["__file","middleware.html.vue"]]);export{M as default};
