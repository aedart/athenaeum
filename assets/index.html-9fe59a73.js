import{_ as t,M as o,p,q as i,R as s,t as n,N as e,a1 as l}from"./framework-efe98465.js";const c={},r=s("h1",{id:"http-clients",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#http-clients","aria-hidden":"true"},"#"),n(" Http Clients")],-1),u={href:"https://jsonapi.org/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.odata.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://docs.guzzlephp.org/en/stable/index.html",target:"_blank",rel:"noopener noreferrer"},h=l(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token string single-quoted-string">&#39;profiles&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token string single-quoted-string">&#39;my-client&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;driver&#39;</span>    <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Drivers<span class="token punctuation">\\</span>JsonHttpClient</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;options&#39;</span>   <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;base_uri&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;https://acme.com/api/v2&#39;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    
    <span class="token comment">// ... remaining not shown ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>HttpClientsManagerTrait</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Responses<span class="token punctuation">\\</span>Status</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Teapot<span class="token punctuation">\\</span>StatusCode</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">DateTime</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CurrencyController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">HttpClientsManagerTrait</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getHttpClientsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-client&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Perform a GET request</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
            <span class="token operator">-&gt;</span><span class="token function">useTokenAuth</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-secret-api-token&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;currency&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;DKK&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;now&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name static-context">StatusCode</span><span class="token operator">::</span><span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Status</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;API is not available: &#39;</span> <span class="token operator">.</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/currencies&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// ...remaining not shown</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="motivation" tabindex="-1"><a class="header-anchor" href="#motivation" aria-hidden="true">#</a> Motivation</h2>`,6),v={href:"https://laravel.com/docs/8.x/http-client#introduction",target:"_blank",rel:"noopener noreferrer"},m={href:"https://laravel.com/docs/8.x/queries#introduction",target:"_blank",rel:"noopener noreferrer"},g=s("p",null,"When considering whether to use this Http Client, Laravel's or other Http Client, then it's probably best to stick with what you feel most comfortable with. To put a different perspective on this matter, consider that Laravel has a far better support for their packages, than I can currently offer.",-1);function b(f,w){const a=o("ExternalLinkIcon");return p(),i("div",null,[r,s("p",null,[n("This package offers a Http Client wrapper, with a powerful fluent request builder that is able to use different Http Query grammars, supporting both "),s("a",u,[n("Json Api"),e(a)]),n(" and "),s("a",d,[n("OData"),e(a)]),n(`. In addition, it also comes with a manager that allows you to handle multiple http client "profiles". This allows you to segment each api you communicate with, into it's own client instance.`)]),s("p",null,[s("a",k,[n("Guzzle Http Client"),e(a)]),n(" is used behind the scene.")]),h,s("p",null,[n(`A Http Client "package" was made available in version 3.x of the Athenaeum library. It offered the manager to handle multiple "profiles" and some fluent methods for gradually building a request. But it was not as comprehensive as the current version. When Laravel released it's v7.x version, it came with a custom `),s("a",v,[n("Http Client"),e(a)]),n(". Therefore, this package became somewhat irrelevant and was considered for deprecation. Ultimately, I decided to redesign this package entirely, mixing some of the already provided features with lots of new ones.")]),s("p",null,[n("As a result, this package now draws inspiration from both Laravel's Http Client, as well as the "),s("a",m,[n("Database Query Builder"),e(a)]),n(". You will find many similarities between the client offered by Laravel, and the one provided by this package. The intent isn't to copy Laravel's Http Client, but rather to provide a slightly different approach on request building.")]),g])}const _=t(c,[["render",b],["__file","index.html.vue"]]);export{_ as default};
