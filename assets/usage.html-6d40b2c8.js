import{_ as c,M as l,p as u,q as r,R as n,N as a,U as e,t as s,a1 as p}from"./framework-efe98465.js";const d={},k=n("h1",{id:"how-to-use",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-to-use","aria-hidden":"true"},"#"),s(" How to use")],-1),v={class:"table-of-contents"},m=p(`<h2 id="manager" tabindex="-1"><a class="header-anchor" href="#manager" aria-hidden="true">#</a> Manager</h2><p>A <code>Manager</code> is responsible for obtaining an antivirus scanner instance. To obtain the <code>Manager</code> instance, you can use <code>AntivirusManagerTrait</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Antivirus<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>AntivirusManagerTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FilesController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">AntivirusManagerTrait</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$manager</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getAntivirusManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// ...remaining not shown...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scanner" tabindex="-1"><a class="header-anchor" href="#scanner" aria-hidden="true">#</a> Scanner</h2><p>Before you can scan a file, you must first obtain a scanner instance from the <code>Manager</code>. This can be achieved via the <code>profile()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$scanner</span> <span class="token operator">=</span> <span class="token variable">$manager</span><span class="token operator">-&gt;</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Default profile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To obtain a scanner for a specific profile, specify the profile&#39;s name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$scanner</span> <span class="token operator">=</span> <span class="token variable">$manager</span><span class="token operator">-&gt;</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-scanner-profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="scan-a-file" tabindex="-1"><a class="header-anchor" href="#scan-a-file" aria-hidden="true">#</a> Scan a File</h3><p>The <code>scan()</code> method is used for scanning a file for infections, e.g. viruses, malware or other harmful code. It returns a <code>ScanResult</code> instance, which contains a status and few details about what was scanned.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$scanner</span><span class="token operator">-&gt;</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output of the above shown example can be similar to this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Array
(
    [status] =&gt; Infected: Win.Test.EICAR_HDB-1
    [filename] =&gt; contacts.txt
    [filepath] =&gt; /tmp/phpm7zz6s
    [filesize] =&gt; 68
    [datetime] =&gt; 2023-03-01T08:15:18.753Z
    [user] =&gt; null 
    [details] =&gt; Array
        (
            [profile] =&gt; default
            [clamav_session_id] =&gt; 1
        )
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="supported-types" tabindex="-1"><a class="header-anchor" href="#supported-types" aria-hidden="true">#</a> Supported Types</h3><p>The <code>scan()</code> method accepts the following types as it&#39;s file argument:</p>`,15),h=n("li",null,[n("code",null,"string"),s(" path to file.")],-1),f=n("code",null,"SplFileInfo",-1),b={href:"https://laravel.com/docs/12.x/http-tests#testing-file-uploads",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"UploadedFile",-1),_=n("code",null,"FileStream",-1),w=n("code",null,"UploadedFileInterface",-1),y={href:"https://www.php-fig.org/psr/psr-7/#36-psrhttpmessageuploadedfileinterface",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"StreamInterface",-1),$={href:"https://www.php-fig.org/psr/psr-7/#34-psrhttpmessagestreaminterface",target:"_blank",rel:"noopener noreferrer"},A={class:"custom-container warning"},F=n("p",{class:"custom-container-title"},"Using PSR-7 Components",-1),S=n("code",null,"scan()",-1),R=p(`<h3 id="result-status" tabindex="-1"><a class="header-anchor" href="#result-status" aria-hidden="true">#</a> Result &amp; Status</h3><p>The <code>ScanResult</code> instance can be used to determine if the scanned file was clean. A scan is <strong>ONLY</strong> considered okay when the following conditions are meet:</p><ul><li>Antivirus has scanned the file.</li><li>No infections were found (<em>virus, malware,...etc</em>).</li><li>No scanning failure occurred, e.g. timeout, could not read file, filetype unsupported... etc.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Determine if file is clean (ok)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... do something when file is clean ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// Or, the Opposite of isOk</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">hasFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... take action, e.g. abort the request...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),q=n("code",null,"Status",-1),T=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$status</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// General for all status instances</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$status</span><span class="token operator">-&gt;</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$status</span><span class="token operator">-&gt;</span><span class="token function">hasReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$status</span><span class="token operator">-&gt;</span><span class="token function">reason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ...etc</span>
<span class="token punctuation">}</span>

<span class="token comment">// ------------------------------------------------------------ //</span>
<span class="token comment">// Driver specific</span>

<span class="token comment">// E.g. for ClamAV scanner</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token operator">-&gt;</span><span class="token function">hasInfection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$status</span><span class="token operator">-&gt;</span><span class="token function">hasError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="is-file-clean" tabindex="-1"><a class="header-anchor" href="#is-file-clean" aria-hidden="true">#</a> Is File Clean</h3><p>As an alternative to scanning a file and manually checking the scan result, you can use the <code>isClean()</code> method. It returns <code>true</code> if the scanned file is clean.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$scanner</span><span class="token operator">-&gt;</span><span class="token function">isClean</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// Equivalent to the above...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$scanner</span><span class="token operator">-&gt;</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="facade" tabindex="-1"><a class="header-anchor" href="#facade" aria-hidden="true">#</a> Facade</h2>`,5),I=n("code",null,"Antivirus",-1),C={href:"https://laravel.com/docs/12.x/facades",target:"_blank",rel:"noopener noreferrer"},M=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Antivirus<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Antivirus</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Antivirus</span><span class="token operator">::</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Scan using default profile</span>

<span class="token comment">// Or, check if file is clean...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Antivirus</span><span class="token operator">::</span><span class="token function">isClean</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use the facade to obtain a scanner for a specific profile.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$scanner</span> <span class="token operator">=</span> <span class="token class-name static-context">Antivirus</span><span class="token operator">::</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-scanner-profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="validation-rule" tabindex="-1"><a class="header-anchor" href="#validation-rule" aria-hidden="true">#</a> Validation Rule</h2>`,4),N={href:"https://laravel.com/docs/12.x/validation#custom-validation-rules",target:"_blank",rel:"noopener noreferrer"},O=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Antivirus<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>InfectionFreeFile</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/files&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;file&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InfectionFreeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ... do something with uploaded file...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unless otherwise specified, the <code>InfectionFreeFile</code> rule will use the default scanner profile. To use a different profile, specify the profile name as the first argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$rule</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfectionFreeFile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-scanner-profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function V(E,L){const t=l("router-link"),i=l("ExternalLinkIcon"),o=l("RouterLink");return u(),r("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#manager"},{default:e(()=>[s("Manager")]),_:1})]),n("li",null,[a(t,{to:"#scanner"},{default:e(()=>[s("Scanner")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#scan-a-file"},{default:e(()=>[s("Scan a File")]),_:1})]),n("li",null,[a(t,{to:"#supported-types"},{default:e(()=>[s("Supported Types")]),_:1})]),n("li",null,[a(t,{to:"#result-status"},{default:e(()=>[s("Result & Status")]),_:1})]),n("li",null,[a(t,{to:"#is-file-clean"},{default:e(()=>[s("Is File Clean")]),_:1})])])]),n("li",null,[a(t,{to:"#facade"},{default:e(()=>[s("Facade")]),_:1})]),n("li",null,[a(t,{to:"#validation-rule"},{default:e(()=>[s("Validation Rule")]),_:1})])])]),m,n("ul",null,[h,n("li",null,[f,s(" uploaded file ("),n("em",null,[s("e.g. Laravel's "),n("a",b,[g,s(" instance"),a(i)])]),s(").")]),n("li",null,[_,s(),a(o,{to:"/archive/current/streams/"},{default:e(()=>[s("file stream")]),_:1}),s(".")]),n("li",null,[w,s(),n("a",y,[s("PSR-7 uploaded file"),a(i)]),s(" instance.")]),n("li",null,[x,s(),n("a",$,[s("PSR-7 stream"),a(i)]),s(" instance.")])]),n("div",A,[F,n("p",null,[s("There is a considerable performance cost, when using "),S,s(" in combination with PSR components. Please read the "),a(o,{to:"/archive/current/antivirus/psr.html"},{default:e(()=>[s("PSR Uploaded Files & Streams")]),_:1}),s(" chapter, before using!")])]),R,n("p",null,[s("You can also obtain the result's "),q,s(", of the scanned file. The status is always specific to the "),a(o,{to:"/archive/current/antivirus/scanners/"},{default:e(()=>[s("scanner driver")]),_:1}),s(" and may provide you with more specific details about why a result isn't okay.")]),T,n("p",null,[s("An alternative way of performing file scans, is by using the "),I,s(),n("a",C,[s("Facade"),a(i)]),s(". It allows you to perform a scan directly.")]),M,n("p",null,[s("This package also comes with a custom "),n("a",N,[s("validation rule"),a(i)]),s(", which can prevent upload of infected files.")]),O])}const U=c(d,[["render",V],["__file","usage.html.vue"]]);export{U as default};
