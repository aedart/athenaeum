import{_ as c,M as o,p as l,q as r,R as n,N as a,U as t,t as s,a1 as i}from"./framework-efe98465.js";const d={},u=n("h1",{id:"seeking",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#seeking","aria-hidden":"true"},"#"),s(" Seeking")],-1),k={class:"table-of-contents"},h=i(`<h2 id="determine-if-seekable" tabindex="-1"><a class="header-anchor" href="#determine-if-seekable" aria-hidden="true">#</a> Determine if Seekable</h2><p>The <code>isSeekable()</code> method can be used to determine if a stream is seekable or not.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cities.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">isSeekable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-&gt;</span><span class="token function">isSeekable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="position" tabindex="-1"><a class="header-anchor" href="#position" aria-hidden="true">#</a> Position</h2><p>The current read/write pointer position can be obtained via two methods:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$position</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...or via alias method</span>

<span class="token variable">$position</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both methods fail if unable to determine the pointer position (<em><code>StreamException</code> is thrown, if such is the case</em>).</p><h2 id="seek" tabindex="-1"><a class="header-anchor" href="#seek" aria-hidden="true">#</a> Seek</h2><h3 id="via-seek" tabindex="-1"><a class="header-anchor" href="#via-seek" aria-hidden="true">#</a> Via <code>seek()</code></h3><p>Use <code>seek()</code> to set the stream&#39;s read/write position. The method accepts two arguments:</p><ul><li><code>int $offset</code>: <em>streams offset</em></li><li><code>int $whence</code>: <em>how the cursor position will be calculated based on the seek offset</em></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),v={href:"https://www.php.net/manual/en/function.fseek",target:"_blank",rel:"noopener noreferrer"},m=i(`<h3 id="via-positionat" tabindex="-1"><a class="header-anchor" href="#via-positionat" aria-hidden="true">#</a> Via <code>positionAt()</code></h3><p>The <code>positionAt()</code> method is a &quot;fluent&quot; version of the <code>seek()</code> method. After read/write pointer position has been set, a reference to the stream instance is returned.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$position</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">positionAt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$position</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rewind" tabindex="-1"><a class="header-anchor" href="#rewind" aria-hidden="true">#</a> Rewind</h2><h3 id="via-rewind" tabindex="-1"><a class="header-anchor" href="#via-rewind" aria-hidden="true">#</a> Via <code>rewind()</code></h3><p>The <code>rewind()</code> method sets the read/write pointer position to <code>0</code> (<em>beginning of the file stream</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="via-positiontostart" tabindex="-1"><a class="header-anchor" href="#via-positiontostart" aria-hidden="true">#</a> Via <code>positionToStart()</code></h3><p>The <code>positionToStart()</code> methods is a &quot;fluent&quot; version of <code>rewind()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$position</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$position</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rewind-after-operation" tabindex="-1"><a class="header-anchor" href="#rewind-after-operation" aria-hidden="true">#</a> Rewind after operation</h3><p>When you need to perform some kind of operation on a stream and rewind it afterwards, then you can use the <code>rewindAfter()</code> method. It accepts a callback, which is executed and the position is thereafter rewound.</p><p>The callback is given the stream reference as argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">rewindAfter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...do something with stream and return evt. output.</span>
        
        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
<span class="token keyword">echo</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> End</h2><p>Use <code>positionToEnd()</code> to move pointer position to the end of the stream (<em>method is also &quot;fluent&quot;</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">positionToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="determine-if-eof" tabindex="-1"><a class="header-anchor" href="#determine-if-eof" aria-hidden="true">#</a> Determine if EOF</h3><p>To determine if position is at end-of-file (<em>EOF</em>), use the <code>eof()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$atEnd</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$atEnd</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="restore-position" tabindex="-1"><a class="header-anchor" href="#restore-position" aria-hidden="true">#</a> Restore Position</h2><p>When you need to restore the current read/write pointer position, after you have performed some kind of operation, then you use the <code>restorePositionAfter()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">positionAt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">restorePositionAfter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment">// (stream&#39;s content)</span>
<span class="token keyword">echo</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50 </span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function b(f,g){const e=o("router-link"),p=o("ExternalLinkIcon");return l(),r("div",null,[u,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#determine-if-seekable"},{default:t(()=>[s("Determine if Seekable")]),_:1})]),n("li",null,[a(e,{to:"#position"},{default:t(()=>[s("Position")]),_:1})]),n("li",null,[a(e,{to:"#seek"},{default:t(()=>[s("Seek")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#via-seek"},{default:t(()=>[s("Via seek()")]),_:1})]),n("li",null,[a(e,{to:"#via-positionat"},{default:t(()=>[s("Via positionAt()")]),_:1})])])]),n("li",null,[a(e,{to:"#rewind"},{default:t(()=>[s("Rewind")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#via-rewind"},{default:t(()=>[s("Via rewind()")]),_:1})]),n("li",null,[a(e,{to:"#via-positiontostart"},{default:t(()=>[s("Via positionToStart()")]),_:1})]),n("li",null,[a(e,{to:"#rewind-after-operation"},{default:t(()=>[s("Rewind after operation")]),_:1})])])]),n("li",null,[a(e,{to:"#end"},{default:t(()=>[s("End")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#determine-if-eof"},{default:t(()=>[s("Determine if EOF")]),_:1})])])]),n("li",null,[a(e,{to:"#restore-position"},{default:t(()=>[s("Restore Position")]),_:1})])])]),h,n("p",null,[s("For additional information, see "),n("a",v,[s("PHP's documentation"),a(p)]),s(".")]),m])}const _=c(d,[["render",b],["__file","seeking.html.vue"]]);export{_ as default};
