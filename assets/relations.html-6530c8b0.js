import{_ as n,p as s,q as a,a1 as e}from"./framework-efe98465.js";const t={},p=e(`<h1 id="relations" tabindex="-1"><a class="header-anchor" href="#relations" aria-hidden="true">#</a> Relations</h1><p>Many of the <a href="../resources">predefined resources</a> offer ways to obtain related resources, via custom relations. As an example, the <code>Issue</code> resource is related to many other kinds of resources. You can obtain them, per record, by invoking their corresponding methods:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Obtain issue&#39;s tracker</span>
<span class="token variable">$tracker</span> <span class="token operator">=</span> <span class="token variable">$issue</span><span class="token operator">-&gt;</span><span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Obtain issue&#39;s parent</span>
<span class="token variable">$parent</span> <span class="token operator">=</span> <span class="token variable">$issue</span><span class="token operator">-&gt;</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Issue&#39;s project</span>
<span class="token variable">$project</span> <span class="token operator">=</span> <span class="token variable">$issue</span><span class="token operator">-&gt;</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="apply-filters" tabindex="-1"><a class="header-anchor" href="#apply-filters" aria-hidden="true">#</a> Apply filters</h2><p>You may also specify filters on the relations, before fetching.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>

<span class="token variable">$children</span> <span class="token operator">=</span> <span class="token variable">$issue</span>
    <span class="token operator">-&gt;</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$reqeust</span>
                    <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;subproject_id&#39;</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span>
                    <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>For more information about supported relations, please review each predefined resource&#39;s relation methods (<em>in the source code</em>).</p>`,8),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","relations.html.vue"]]);export{u as default};
