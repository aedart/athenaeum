import{_ as i,M as c,p as l,q as r,R as n,N as s,U as t,t as a,a1 as o}from"./framework-efe98465.js";const u={},d=n("h1",{id:"open-and-close",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#open-and-close","aria-hidden":"true"},"#"),a(" Open and Close")],-1),m={class:"table-of-contents"},h=o(`<h2 id="how-to-open" tabindex="-1"><a class="header-anchor" href="#how-to-open" aria-hidden="true">#</a> How to open</h2><h3 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h3><p>Use the <code>open()</code> method to open a stream to a file or URL.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;recipients.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={href:"https://www.php.net/manual/en/function.fopen",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"fopen()",-1),g=o(`<h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> Memory</h3><p>To open a stream to <code>php://memory</code>, use the <code>openMemory()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),b={href:"https://www.php.net/manual/en/wrappers.php.php#wrappers.php.memory",target:"_blank",rel:"noopener noreferrer"},f=o(`<h3 id="temporary" tabindex="-1"><a class="header-anchor" href="#temporary" aria-hidden="true">#</a> Temporary</h3><p>You may also open a stream to <code>php://temp</code>, by using <code>openTemporary()</code></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To specify the maximum memory limit, before PHP&#39;s internal mechanisms write to a physical file, use the 2nd argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),y={href:"https://www.php.net/manual/en/wrappers.php.php#wrappers.php.memory",target:"_blank",rel:"noopener noreferrer"},_=o(`<h3 id="existing-resource" tabindex="-1"><a class="header-anchor" href="#existing-resource" aria-hidden="true">#</a> Existing resource</h3><p>If you already have an existing <code>resource</code> to a file or URL, you can &quot;wrap&quot; it into a stream component, by using the <code>make()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;team.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;w+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...Later in your application...</span>
<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">Stream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="existing-psr-stream" tabindex="-1"><a class="header-anchor" href="#existing-psr-stream" aria-hidden="true">#</a> Existing PSR-Stream</h3><p>Use the <code>makeFrom()</code> method when you need to wrap an existing <code>StreamInterface</code> component.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">Stream</span><span class="token operator">::</span><span class="token function">makeFrom</span><span class="token punctuation">(</span><span class="token variable">$psrStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The <code>makeFrom()</code> will automatically detach the given <code>StreamInterface</code> component&#39;s underlying <code>resource</code>. This means that you will no longer be able to use the provided PSR stream instance.</p></div><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> Lazy</h3><p>Lastly, you may also open a stream after you have created a <code>Stream</code> or <code>FileStream</code>, using a callback. The <code>openUsing()</code> accepts a callback, which must return a valid <code>resource</code> of the type &quot;stream&quot;.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...later in your application...</span>
<span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">openUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;countries.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Info</p><p><code>openUsing()</code> will fail if the stream instance already has a valid <code>resource</code> specified (<em>when the stream is already open</em>). Use the <code>isOpen()</code> method to determine if a stream can be opened.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">openUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;countries.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...do something else...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="cloning" tabindex="-1"><a class="header-anchor" href="#cloning" aria-hidden="true">#</a> Cloning</h3><div class="custom-container warning"><p class="custom-container-title">Not supported</p><p>Cloning an existing stream instance is not supported and will result in <code>StreamException</code> to be thrown.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;locations.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$clone</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// Fails - StreamException is thrown!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="how-to-close" tabindex="-1"><a class="header-anchor" href="#how-to-close" aria-hidden="true">#</a> How to close</h2><h3 id="close-stream" tabindex="-1"><a class="header-anchor" href="#close-stream" aria-hidden="true">#</a> Close stream</h3>`,15),w=n("code",null,"close()",-1),x=n("code",null,"resource",-1),S={href:"https://www.php.net/manual/en/function.fclose",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"fclose()",-1),F=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="detaching-resource" tabindex="-1"><a class="header-anchor" href="#detaching-resource" aria-hidden="true">#</a> Detaching resource</h3><p>If you do not wish to close the stream, but you want to detach - to separate the underlying <code>resource</code>, from the stream instance, then you can use the <code>detach()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...stream instance is now useless!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Caution</p><p>When you detach the underlying <code>resource</code> from the stream, the stream instance becomes useless. You SHOULD avoid reusing or reopening a <code>resource</code>, when such is the case.</p><p><strong>Not recommended</strong></p><p>The following example is NOT recommended (<em>even though it is possible</em>)!</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...later... attempt to re-open using same resource</span>
<span class="token comment">// and same stream instance - NOT RECOMMENDED!</span>
<span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">openUsing</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Future versions of <code>Stream</code> and <code>FileStream</code> may prohibit this behaviour.</p></div>`,5);function q(T,P){const e=c("router-link"),p=c("ExternalLinkIcon");return l(),r("div",null,[d,n("nav",m,[n("ul",null,[n("li",null,[s(e,{to:"#how-to-open"},{default:t(()=>[a("How to open")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#file"},{default:t(()=>[a("File")]),_:1})]),n("li",null,[s(e,{to:"#memory"},{default:t(()=>[a("Memory")]),_:1})]),n("li",null,[s(e,{to:"#temporary"},{default:t(()=>[a("Temporary")]),_:1})]),n("li",null,[s(e,{to:"#existing-resource"},{default:t(()=>[a("Existing resource")]),_:1})]),n("li",null,[s(e,{to:"#existing-psr-stream"},{default:t(()=>[a("Existing PSR-Stream")]),_:1})]),n("li",null,[s(e,{to:"#lazy"},{default:t(()=>[a("Lazy")]),_:1})]),n("li",null,[s(e,{to:"#cloning"},{default:t(()=>[a("Cloning")]),_:1})])])]),n("li",null,[s(e,{to:"#how-to-close"},{default:t(()=>[a("How to close")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#close-stream"},{default:t(()=>[a("Close stream")]),_:1})]),n("li",null,[s(e,{to:"#detaching-resource"},{default:t(()=>[a("Detaching resource")]),_:1})])])])])]),h,n("p",null,[a("Behind the scene, PHP's "),n("a",k,[v,s(p)]),a(" is used.")]),g,n("p",null,[a("See "),n("a",b,[a("PHP Documentation"),s(p)]),a(" for additional details.")]),f,n("p",null,[a("See "),n("a",y,[a("PHP Documentation"),s(p)]),a(" for additional details.")]),_,n("p",null,[a("When you need to close a stream, invoke the "),w,a(" method. The underlying "),x,a(" will be detached and closed using PHP's "),n("a",S,[$,s(p)]),a(".")]),F])}const N=i(u,[["render",q],["__file","open-close.html.vue"]]);export{N as default};
