import{_ as l,M as p,p as c,q as i,R as n,t as s,N as a,U as t,a1 as u}from"./framework-efe98465.js";const r={},d=n("h1",{id:"criteria-query-filter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#criteria-query-filter","aria-hidden":"true"},"#"),s(" Criteria (Query Filter)")],-1),k={href:"https://laravel.com/docs/11.x/eloquent#query-scopes",target:"_blank",rel:"noopener noreferrer"},v={class:"table-of-contents"},m=u(`<h2 id="how-to-create-a-new-filter" tabindex="-1"><a class="header-anchor" href="#how-to-create-a-new-filter" aria-hidden="true">#</a> How to create a new filter</h2><p>Extend the <code>Filter</code> abstraction and implement the <code>apply()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span> <span class="token keyword">as</span> EloquentBuilder<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">VideoGamesCategoryFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token class-name">Builder</span><span class="token operator">|</span><span class="token class-name">EloquentBuilder</span> <span class="token variable">$query</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Video Games&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h2><p>Once you have your filter created, you can apply it in your Eloquent model. Use the <code>Filtering</code> trait and call the <code>applyFilters()</code> method.</p><p><strong>In your model</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>Filtering</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Category</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Filtering</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Apply filter</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Category</span><span class="token operator">::</span><span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VideoGamesCategoryFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="apply-multiple-filters" tabindex="-1"><a class="header-anchor" href="#apply-multiple-filters" aria-hidden="true">#</a> Apply Multiple Filters</h3><p>The <code>applyFilters()</code> accepts either a single filter instance or a list of filters.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Category</span><span class="token operator">::</span><span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">OldRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HasDiscounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">NotDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="applicability" tabindex="-1"><a class="header-anchor" href="#applicability" aria-hidden="true">#</a> Applicability</h2><p>Each filter has a <code>isApplicable()</code> method. It is used to determine whether the filter must be applied or not. By default, this method will always return <code>true</code>. However, if you need to exclude a filter, then you should overwrite this method.</p><p>Two parameters are provided:</p><ul><li><code>$query</code>: The current query scope.</li><li><code>$filters</code>: List of all the filters that are about to be applied.</li></ul><p>These parameters can be used for your determination logic, if it makes sense for you. Otherwise, simply ignore them.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>IsDeleted</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span> <span class="token keyword">as</span> EloquentBuilder<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">OldRecords</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">isApplicable</span><span class="token punctuation">(</span><span class="token class-name">Builder</span><span class="token operator">|</span><span class="token class-name">EloquentBuilder</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Prevent this filter, if another specific filter is about</span>
        <span class="token comment">// to be applied...</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$filters</span> <span class="token keyword">as</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$filter</span> <span class="token keyword">instanceof</span> <span class="token class-name">IsDeleted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... remaining not shown ... //</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Whenever the above shown filter is used, in combination with a <code>IsDeleted</code> filter, it will be ignored and not applied.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Category</span><span class="token operator">::</span><span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">OldRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Will be ignored</span>
    <span class="token keyword">new</span> <span class="token class-name">IsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="field-criteria-field-filter" tabindex="-1"><a class="header-anchor" href="#field-criteria-field-filter" aria-hidden="true">#</a> Field Criteria (Field Filter)</h2><p>If you require filters that add <code>where &lt;expression&gt;</code> constraints for a single field (<em>column</em>) on your query, then you can choose to inherit from the <code>FieldFilter</code>. This abstraction allows you to create slightly more constraints to be applied using either <code>AND</code> or <code>OR</code> logical operator.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>FieldFilter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>FieldCriteria</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span> <span class="token keyword">as</span> EloquentBuilder<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">StringFilter</span> <span class="token keyword">extends</span> <span class="token class-name">FieldFilter</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token class-name">Builder</span><span class="token operator">|</span><span class="token class-name">EloquentBuilder</span> <span class="token variable">$query</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name static-context">FieldCriteria</span><span class="token operator">::</span><span class="token constant">OR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Usage</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>FieldCriteria</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Category</span><span class="token operator">::</span><span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name static-context">StringFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;LIKE&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%games%&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">FieldCriteria</span><span class="token operator">::</span><span class="token constant">OR</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name static-context">StringFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;LIKE&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%video%&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">FieldCriteria</span><span class="token operator">::</span><span class="token constant">OR</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How you choose to design your &quot;field&quot; specific filters, is left to your imagination. For additional information, please review the source code.</p>`,26);function b(h,g){const o=p("ExternalLinkIcon"),e=p("router-link");return c(),i("div",null,[d,n("p",null,[s("A way to encapsulate custom queries for your Eloquent models. These can be used as an alternative or complementary to Laravel's "),n("a",k,[s("query scopes"),a(o)]),s(".")]),n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#how-to-create-a-new-filter"},{default:t(()=>[s("How to create a new filter")]),_:1})]),n("li",null,[a(e,{to:"#how-to-use"},{default:t(()=>[s("How to use")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#apply-multiple-filters"},{default:t(()=>[s("Apply Multiple Filters")]),_:1})])])]),n("li",null,[a(e,{to:"#applicability"},{default:t(()=>[s("Applicability")]),_:1})]),n("li",null,[a(e,{to:"#field-criteria-field-filter"},{default:t(()=>[s("Field Criteria (Field Filter)")]),_:1})])])]),m])}const f=l(r,[["render",b],["__file","criteria.html.vue"]]);export{f as default};
