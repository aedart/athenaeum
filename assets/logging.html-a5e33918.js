import{_ as t,M as i,p,q as l,R as a,t as n,N as e,a1 as o}from"./framework-efe98465.js";const c={},r=a("h1",{id:"logging",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#logging","aria-hidden":"true"},"#"),n(" Logging")],-1),d={href:"https://packagist.org/packages/illuminate/log",target:"_blank",rel:"noopener noreferrer"},u=a("code",null,"illuminate/log",-1),g={href:"https://github.com/Seldaek/monolog",target:"_blank",rel:"noopener noreferrer"},h=o(`<h2 id="how-to-install" tabindex="-1"><a class="header-anchor" href="#how-to-install" aria-hidden="true">#</a> How to install</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require illuminate/log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="logger-configuration" tabindex="-1"><a class="header-anchor" href="#logger-configuration" aria-hidden="true">#</a> Logger Configuration</h2>`,3),v=a("code",null,"logging.php",-1),k={href:"https://github.com/laravel/laravel/blob/master/config/logging.php",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"/configs",-1),b={href:"https://laravel.com/docs/11.x/logging",target:"_blank",rel:"noopener noreferrer"},f=o(`<h2 id="register-logserviceprovider" tabindex="-1"><a class="header-anchor" href="#register-logserviceprovider" aria-hidden="true">#</a> Register <code>LogServiceProvider</code></h2><p>Add the class path to <code>LogServiceProvider</code> in your <code>providers</code> array, in your <code>/config/app.php</code> configuration file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ...</span>

    <span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Log<span class="token punctuation">\\</span>LogServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token comment">// ... remaining not shown ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point, you should have logging available in your application.</p><div class="custom-container tip"><p class="custom-container-title">Folder Permissions</p><p>If you chose a log-profile that stores log entries in files, then please ensure that storage directory has the correct permissions. For instance, if you chose to store log-files in the <code>/storage/logs</code> directory, you <em>could</em> change the permissions to the following:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> www-data:www-data /storage/logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>The above example applies to Linux environments. Please seek appropriate guidance regarding read/write permissions, if you work on a difference type of server environment.</em></p></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="via-app" tabindex="-1"><a class="header-anchor" href="#via-app" aria-hidden="true">#</a> Via <code>$app</code></h3><p>If your <code>$app</code> is available, then use the <code>make()</code> method to obtain the logger instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// Obtain logger instance</span>
<span class="token variable">$logger</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;log&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$logger</span><span class="token operator">-&gt;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Logger works great&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-log-facade" tabindex="-1"><a class="header-anchor" href="#via-log-facade" aria-hidden="true">#</a> Via <code>Log</code> Facade</h3>`,10),_=a("code",null,"Log",-1),w={href:"https://laravel.com/docs/11.x/facades",target:"_blank",rel:"noopener noreferrer"},y=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Log</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;User is missing contact information&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;user&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-aware-of-helper" tabindex="-1"><a class="header-anchor" href="#via-aware-of-helper" aria-hidden="true">#</a> Via Aware-of Helper</h3><p>Alternatively, you can make use of the <code>Log</code> <a href="../../support/laravel">Aware-of Helper</a>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>Logging<span class="token punctuation">\\</span>LogTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">DeviceRegistrationController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">LogTrait</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... previous not shown ...</span>

        <span class="token variable">$logger</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$logger</span><span class="token operator">-&gt;</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Device requesting registration&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;device&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;...&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ... Remaining not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function x(L,q){const s=i("ExternalLinkIcon");return p(),l("div",null,[r,a("p",null,[n("Some of Laravel's services depend on the "),a("a",d,[n("Logging"),e(s)]),n(" package¹. Should you stumble across such a dependency, then you might be required to install it, in order to get the service to work as intended.")]),a("p",null,[n("¹: "),a("em",null,[n("The "),u,n(" package uses "),a("a",g,[n("MonoLog"),e(s)]),n(".")])]),h,a("p",null,[n("Copy the "),v,n(" configuration file from Laravel's "),a("a",k,[n("Repository"),e(s)]),n(", and place it within your "),m,n(" directory. You can read more about the configuration in Laravel's "),a("a",b,[n("documentation"),e(s)]),n(".")]),f,a("p",null,[n("You can also use Laravel's "),_,n(),a("a",w,[n("Facade"),e(s)]),n(".")]),y])}const $=t(c,[["render",x],["__file","logging.html.vue"]]);export{$ as default};
