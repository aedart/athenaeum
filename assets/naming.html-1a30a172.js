import{_ as o,M as r,p as i,q as u,R as t,t as e,N as s,a1 as a}from"./framework-efe98465.js";const l={},d=t("h1",{id:"naming-convention",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#naming-convention","aria-hidden":"true"},"#"),e(" Naming Convention")],-1),p=t("h2",{id:"property-names",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#property-names","aria-hidden":"true"},"#"),e(" Property Names")],-1),c={href:"http://en.wikipedia.org/wiki/CamelCase",target:"_blank",rel:"noopener noreferrer"},q={href:"http://en.wikipedia.org/wiki/Snake_case",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">personId</span> <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>

<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">category_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Products&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>

<span class="token comment">// Invalid, because its a mix of both camelCase and underscore</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">swordFish_length</span> <span class="token operator">=</span> <span class="token number">63</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getter-setter-method-names" tabindex="-1"><a class="header-anchor" href="#getter-setter-method-names" aria-hidden="true">#</a> Getter / Setter Method Names</h2>`,2),v={href:"http://en.wikipedia.org/wiki/CamelCase",target:"_blank",rel:"noopener noreferrer"},h=t("code",null,"get",-1),g=t("code",null,"set",-1),k=t("code",null,"Overload",-1),b=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getterMethod = getPrefix, camelCasePropertyName;
getPrefix = &quot;get&quot;;

setterMethod = setPrefix, camelCasePropertyName;
setPrefix = &quot;set&quot;;

camelCasePropertyName = {uppercaseLetter, {lowercaseLetter}};

uppercaseLetter = &quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot;
| &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot;
| &quot;Y&quot; | &quot;Z&quot; ;

lowercaseLetter = &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot;
| &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot;
| &quot;y&quot; | &quot;z&quot; ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={href:"http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form",target:"_blank",rel:"noopener noreferrer"},f=a(`<h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Looks for getPersonId(), setPersonId($value);</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">personId</span> <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span>

<span class="token comment">// Looks for getCategoryName() and setCategoryName($value);</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">category_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Products&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function x(y,C){const n=r("ExternalLinkIcon");return i(),u("div",null,[d,p,t("p",null,[e("Properties can either be stated in "),t("a",c,[e("CamelCase"),s(n)]),e(" or "),t("a",q,[e("Snake Case"),s(n)]),e(".")]),m,t("p",null,[e("Getters and setters follow a most strict naming convention; the must follow "),t("a",v,[e("CamelCase"),s(n)]),e(" and be prefixed with "),h,e(" for getter methods and "),g,e(" for setter methods. In addition, the "),k,e(" component uses the following syntax or rules when searching for a propertyâ€™s corresponding getter or setter:")]),b,t("p",null,[t("em",null,[e("Above stated syntax / rules is expressed in "),t("a",_,[e("EBNF"),s(n)])])]),f])}const N=o(l,[["render",x],["__file","naming.html.vue"]]);export{N as default};
