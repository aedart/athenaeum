import{_ as c,M as i,p as l,q as u,R as n,t as s,N as a,U as t,a1 as o}from"./framework-efe98465.js";const r={},d=n("h1",{id:"service-container",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#service-container","aria-hidden":"true"},"#"),s(" Service Container")],-1),k={href:"https://laravel.com/docs/11.x/container",target:"_blank",rel:"noopener noreferrer"},v={href:"https://laravel.com/docs/11.x/container",target:"_blank",rel:"noopener noreferrer"},m={class:"table-of-contents"},h=o(`<h2 id="bindings" tabindex="-1"><a class="header-anchor" href="#bindings" aria-hidden="true">#</a> Bindings</h2><p>Inside your Service Provider&#39;s <code>register()</code> method, you can use the <code>bind()</code> method to register a binding.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Temperature<span class="token punctuation">\\</span>Measurement</span> <span class="token keyword">as</span> MeasurementInterface<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Temperature<span class="token punctuation">\\</span>Measurement</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WeatherServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">MeasurementInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Measurement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="when-no-interfaces-are-available" tabindex="-1"><a class="header-anchor" href="#when-no-interfaces-are-available" aria-hidden="true">#</a> When no interfaces are available</h3><p>The Service Container does not explicitly require you to state an interface&#39;s class path, as the &quot;abstract&quot; identifier for your binding. You can use a regular string value that you wish, as long as it is unique. Depending on just how &quot;legacy&quot; your application is, this can come very handy for you, should you wish to redesign or refactor certain logic.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;weather-measurement&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Measurement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases" aria-hidden="true">#</a> Aliases</h3><p>Another helpful feature of the Service Container, is the ability to create aliases for your bindings. This will allow you to resolve a bound instance, via both an interface&#39;s class path or your assigned alias.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">MeasurementInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Measurement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &quot;weather-measurement&quot; alias for MeasurementInterface::class</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token class-name static-context">MeasurementInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;weather-measurement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="singleton-bindings" tabindex="-1"><a class="header-anchor" href="#singleton-bindings" aria-hidden="true">#</a> Singleton Bindings</h3><p>To bind a single instance, use the <code>singleton()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Station</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Stations<span class="token punctuation">\\</span>LondonWeatherGateway</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WeatherServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token class-name static-context">Station</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LondonWeatherGateway</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resolving" tabindex="-1"><a class="header-anchor" href="#resolving" aria-hidden="true">#</a> Resolving</h2><p>To resolve a binding, use the <code>make()</code> method on the application instance. Given the above shown examples, imagine that you are somewhere inside your legacy application. To obtain (<em>resolve</em>) your desired bound components, use your <code>$app</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Station</span><span class="token punctuation">;</span>

<span class="token comment">// ... somewhere inside your custom application</span>

<span class="token variable">$weatherStation</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Station</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above example assumes that you are within your entry-point(s), e.g. your <code>index.php</code>, and have direct access to your <code>$app</code>. This might not always be the case for you. In the next few sections, different approaches are explored.</p><h3 id="using-the-app-facade" tabindex="-1"><a class="header-anchor" href="#using-the-app-facade" aria-hidden="true">#</a> Using the <code>App</code> Facade</h3>`,17),b=n("code",null,"App",-1),g={href:"https://laravel.com/docs/11.x/facades",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"$app",-1),f=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Station</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>App</span><span class="token punctuation">;</span>

<span class="token comment">// ... somewhere inside your custom application</span>

<span class="token variable">$weatherStation</span> <span class="token operator">=</span> <span class="token class-name static-context">App</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Station</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w={class:"custom-container warning"},_=n("p",{class:"custom-container-title"},"Caution",-1),S={href:"https://laravel.com/docs/11.x/facades#when-to-use-facades",target:"_blank",rel:"noopener noreferrer"},x=o(`<h3 id="using-the-iocfacade" tabindex="-1"><a class="header-anchor" href="#using-the-iocfacade" aria-hidden="true">#</a> Using the <code>IoCFacade</code></h3><p>The <code>IoCFacade</code> is a custom Facade, which also provides access to your application instance. Just like Laravel&#39;s <code>App</code> facade, it too offers the <code>make()</code> method. In addition, it also comes with a <code>tryMake()</code> method, which does not fail, in case that a binding could not be resolved. When a binding cannot be resolved, it returns a default value that you can specify.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Station</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Stations<span class="token punctuation">\\</span>NullStation</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>IoCFacade</span><span class="token punctuation">;</span>

<span class="token comment">// ... somewhere inside your custom application</span>

<span class="token comment">// Either resolves &quot;station&quot; binding or returns a default value.</span>
<span class="token variable">$weatherStation</span> <span class="token operator">=</span> <span class="token class-name static-context">IoCFacade</span><span class="token operator">::</span><span class="token function">tryMake</span><span class="token punctuation">(</span><span class="token class-name static-context">Station</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NullStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),$={href:"https://github.com/aedart/athenaeum/blob/master/packages/Support/src/Facades/IoCFacade.php",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"IoCFacade",-1),C=n("h3",{id:"inside-your-classes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#inside-your-classes","aria-hidden":"true"},"#"),s(" Inside your Classes")],-1),I={href:"https://en.wikipedia.org/wiki/Dependency_injection",target:"_blank",rel:"noopener noreferrer"},W=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Station</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WeatherController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name type-declaration">Station</span> <span class="token variable">$weatherStation</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Station</span> <span class="token variable">$weatherStation</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">weatherStation</span> <span class="token operator">=</span> <span class="token variable">$weatherStation</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you need to resolve it&#39;s dependencies, use the <code>make()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">// Constructor dependencies are automatically resolved.</span>
<span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">WeatherController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alternative" tabindex="-1"><a class="header-anchor" href="#alternative" aria-hidden="true">#</a> Alternative</h3><p>Another approach to resolving you bindings, is by making use of <a href="../../support">Aware-of Helpers</a>. These helpers are basically &quot;getters and setters&quot; that come with a default value. Consider the following example, where a &quot;Weather Station Aware of&quot; helper is available.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Stations<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>StationTrait</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>ResponseInterface</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WeatherController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">StationTrait</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">ResponseInterface</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// A default station binding resolved from the Service Container.</span>
        <span class="token variable">$weatherStation</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// ... remaining not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The implementation of a &quot;Weather Station Aware of&quot; helper, could look similar to the following example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Stations<span class="token punctuation">\\</span>Traits</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Weather<span class="token punctuation">\\</span>Station</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>IoCFacade</span><span class="token punctuation">;</span>

<span class="token keyword">trait</span> <span class="token class-name-definition class-name">StationTrait</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Station</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$station</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setStation</span><span class="token punctuation">(</span><span class="token class-name">Station</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$station</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">station</span> <span class="token operator">=</span> <span class="token variable">$station</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Station</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setStation</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getDefaultStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">station</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">station</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getDefaultStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Station</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">IoCFacade</span><span class="token operator">::</span><span class="token function">tryMake</span><span class="token punctuation">(</span><span class="token class-name static-context">Station</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The benefit of using an &quot;Aware-of&quot; Helper approach, is that your component(s) can &quot;lazy&quot; resolve their dependencies. Furthermore, you always have the possibility to overwrite its methods, meaning that a different implementation could be returned as a default, should you require such.</p><p>In any case, you have the freedom to choose how, if at all, you wish to resolve dependencies in your custom application.</p>`,10);function q(F,T){const p=i("ExternalLinkIcon"),e=i("router-link");return l(),u("div",null,[d,n("p",null,[s("The Core Application is essentially an extended version of Laravel's "),n("a",k,[s("Service Container"),a(p)]),s(". It works exactly as you are used to, in your Laravel projects. This chapter only briefly highlights some of it's major features. For more saturated examples and information on how to use the Service Container, please review Laravel's "),n("a",v,[s("documentation"),a(p)]),s(".")]),n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#bindings"},{default:t(()=>[s("Bindings")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#when-no-interfaces-are-available"},{default:t(()=>[s("When no interfaces are available")]),_:1})]),n("li",null,[a(e,{to:"#aliases"},{default:t(()=>[s("Aliases")]),_:1})]),n("li",null,[a(e,{to:"#singleton-bindings"},{default:t(()=>[s("Singleton Bindings")]),_:1})])])]),n("li",null,[a(e,{to:"#resolving"},{default:t(()=>[s("Resolving")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#using-the-app-facade"},{default:t(()=>[s("Using the App Facade")]),_:1})]),n("li",null,[a(e,{to:"#using-the-iocfacade"},{default:t(()=>[s("Using the IoCFacade")]),_:1})]),n("li",null,[a(e,{to:"#inside-your-classes"},{default:t(()=>[s("Inside your Classes")]),_:1})]),n("li",null,[a(e,{to:"#alternative"},{default:t(()=>[s("Alternative")]),_:1})])])])])]),h,n("p",null,[s("You can also resolve your bindings, by using Laravel's "),b,s(),n("a",g,[s("Facade"),a(p)]),s(". This Facade provides access to your application instance, as long as your application is running. Such can be useful, in situations where you might not have direct access to your "),y,s(".")]),f,n("div",w,[_,n("p",null,[s("Depending upon how you use Facades, they can either help you to get the job done or become a hindrance. You should take some time to read about their conceptual "),n("a",S,[s("benefits and limitations"),a(p)]),s(".")])]),x,n("p",null,[s("For more information, please review the source code of "),n("a",$,[A,a(p)]),s(".")]),C,n("p",null,[s("Arguably, when situated inside a class, it is considered best practice to rely on "),n("a",I,[s("dependency injection"),a(p)]),s(", rather than using Facades. Given that you have a component with one or more dependencies, you should type-hint them in the component's constructor. Imagine the following component:")]),W])}const L=c(r,[["render",q],["__file","container.html.vue"]]);export{L as default};
