import{_ as p,M as i,p as c,q as r,R as n,N as e,U as t,t as s,a1 as l}from"./framework-efe98465.js";const u={},d=n("h1",{id:"logging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logging","aria-hidden":"true"},"#"),s(" Logging")],-1),g=n("p",null,[s("The "),n("code",null,"log()"),s(" offers a quick way of logging your requests and responses.")],-1),v={class:"table-of-contents"},k=n("h2",{id:"prerequisite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prerequisite","aria-hidden":"true"},"#"),s(" Prerequisite")],-1),h={href:"https://packagist.org/packages/illuminate/log",target:"_blank",rel:"noopener noreferrer"},m=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require illuminate/log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),b=n("code",null,"config/app.php",-1),f=n("code",null,"LogServiceProvider",-1),_=n("code",null,"logging.php",-1),y={href:"https://github.com/laravel/laravel/blob/master/config/logging.php",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"/configs",-1),q={href:"https://laravel.com/docs/12.x/logging",target:"_blank",rel:"noopener noreferrer"},x=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token comment">// ... previous not shown ... //</span>

    <span class="token comment">/*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    */</span>

    <span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Log<span class="token punctuation">\\</span>LogServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span>

        <span class="token comment">// ... remaining services not shown ... //</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>When using the <code>log()</code> method, your outgoing request and received response will be logged as two separate log-entries.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;today&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/weather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &quot;Request&quot; and &quot;Response&quot; log-entries should be available in your log file.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="alternative" tabindex="-1"><a class="header-anchor" href="#alternative" aria-hidden="true">#</a> Alternative</h2><p>The <code>log()</code> is intended for a quick way to selectively log requests / responses. Moreover, it is mostly useful for debugging as it does not offer you much in terms of logging-configuration (<em>E.g. what channel to use, the log severity to log requests or responses, ...etc</em>).</p><p>If you require more control over how and what is being logged, then it&#39;s recommended that you create your own <a href="./middleware">Middleware</a>. By using a middleware, you have full control of how you wish to log Http Messages.</p><h2 id="custom-callback" tabindex="-1"><a class="header-anchor" href="#custom-callback" aria-hidden="true">#</a> Custom callback</h2><p>Similar to <a href="./debugging"><code>debug()</code> and <code>dd()</code></a>, you can provide the <code>log()</code> with a custom callback, which will be invoked when request is sent and response received. When doing so, it&#39;s up to you how a request or response should be logged and how.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>MessageInterface</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;today&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">MessageInterface</span> <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Builder</span> <span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ... log http message ...       </span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/weather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function L(B,C){const a=i("router-link"),o=i("ExternalLinkIcon");return c(),r("div",null,[d,g,n("nav",v,[n("ul",null,[n("li",null,[e(a,{to:"#prerequisite"},{default:t(()=>[s("Prerequisite")]),_:1})]),n("li",null,[e(a,{to:"#example"},{default:t(()=>[s("Example")]),_:1})]),n("li",null,[e(a,{to:"#alternative"},{default:t(()=>[s("Alternative")]),_:1})]),n("li",null,[e(a,{to:"#custom-callback"},{default:t(()=>[s("Custom callback")]),_:1})])])]),k,n("p",null,[s("If you are using the Http Client inside your Laravel application, then logging should already be enabled. But, if you are using this package outside Laravel, then you must register and enable "),n("a",h,[s("Laravel's log package"),e(o)]),s(".")]),m,n("p",null,[s("Afterwards, in your "),b,s(", you need to register the "),f,s(". Also, you will require a copy of the "),_,s(" configuration file from Laravel's "),n("a",y,[s("Repository"),e(o)]),s(", and place it within your "),w,s(" directory. Read more about the configuration in Laravel's "),n("a",q,[s("documentation"),e(o)]),s(".")]),x])}const M=p(u,[["render",L],["__file","logging.html.vue"]]);export{M as default};
