import{_ as l,M as o,p as r,q as u,R as n,N as a,U as e,t as s,a1 as i}from"./framework-efe98465.js";const d={},k=n("h1",{id:"release-notes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#release-notes","aria-hidden":"true"},"#"),s(" Release Notes")],-1),h=n("h2",{id:"v5-x-highlights",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#v5-x-highlights","aria-hidden":"true"},"#"),s(),n("code",null,"v5.x"),s(" Highlights")],-1),v=n("p",null,[s("These are the new features and additions of Athenaeum "),n("code",null,"v5.x"),s(".")],-1),g={class:"table-of-contents"},m=i(`<h3 id="http-client-middleware" tabindex="-1"><a class="header-anchor" href="#http-client-middleware" aria-hidden="true">#</a> Http Client Middleware</h3><p>You can now assign middleware to process your outgoing requests and incoming responses. See <a href="./http/clients/methods/middleware">Http Client Middleware</a> for more examples.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>MeasuresResponseTime</span><span class="token punctuation">;</span>

<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">withMiddleware</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MeasuresResponseTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/weather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extract-response-expectations" tabindex="-1"><a class="header-anchor" href="#extract-response-expectations" aria-hidden="true">#</a> Extract Response Expectations</h3><p>A <code>ResponseExpectations</code> class has been added, which you can use as a base class to extract complex expectations into separate classes. See <a href="./http/clients/methods/expectations">documentation</a> for additional information.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Builders<span class="token punctuation">\\</span>Expectations<span class="token punctuation">\\</span>ResponseExpectation</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Responses<span class="token punctuation">\\</span>Status</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>RequestInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>ResponseInterface</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserWasCreated</span> <span class="token keyword">extends</span> <span class="token class-name">ResponseExpectations</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">expectation</span><span class="token punctuation">(</span>
        <span class="token class-name type-declaration">Status</span> <span class="token variable">$status</span><span class="token punctuation">,</span>
        <span class="token class-name type-declaration">ResponseInterface</span> <span class="token variable">$response</span><span class="token punctuation">,</span>
        <span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...validation not shown here...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// --------------------------------------- /</span>
<span class="token comment">// Use expectation when you send your request</span>
<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserWasCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John Snow&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="debugging-request-and-response" tabindex="-1"><a class="header-anchor" href="#debugging-request-and-response" aria-hidden="true">#</a> Debugging Request and Response</h3><p><a href="./http/clients/methods/debugging">Debugging</a> and <a href="./http/clients/methods/logging">logging</a> utilities have been added for a quick way to dump outgoing request and incoming response.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Dump request / response.</span>
<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// --------------------------------------------</span>

<span class="token comment">// Logs the request / response.</span>
<span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span>
        <span class="token operator">-&gt;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default-otherwise-callback" tabindex="-1"><a class="header-anchor" href="#default-otherwise-callback" aria-hidden="true">#</a> Default otherwise callback</h3><p>The <a href="./circuits">Circuit Breaker</a> now supports setting a default &quot;otherwise&quot; callback, via the <code>otherwise()</code> method. When no &quot;otherwise&quot; callback is provided to the <code>attempt()</code> method, the default &quot;otherwise&quot; callback will be used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Circuits<span class="token punctuation">\\</span>CircuitBreaker</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$circuitBreaker</span>
    <span class="token operator">-&gt;</span><span class="token function">otherwise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CircuitBreaker</span> <span class="token variable">$cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...not shown...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CircuitBreaker</span> <span class="token variable">$cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...callback not shown...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="support-for-toml-configuration-files" tabindex="-1"><a class="header-anchor" href="#support-for-toml-configuration-files" aria-hidden="true">#</a> Support for TOML configuration files</h3>`,13),b={href:"https://en.wikipedia.org/wiki/TOML",target:"_blank",rel:"noopener noreferrer"},f=n("a",{href:"./config"},"configuration loader",-1),w=n("h3",{id:"resolve-list-of-dependencies",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#resolve-list-of-dependencies","aria-hidden":"true"},"#"),s(" Resolve list of dependencies")],-1),x=n("code",null,"ListResolver",-1),_=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Container<span class="token punctuation">\\</span>ListResolver</span><span class="token punctuation">;</span>

<span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>SanitizeInput</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>ConvertEmptyToNull</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>ApplySorting</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;sortBy&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;direction&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;desc&#39;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Resolve list of dependencies</span>
<span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-messages-package" tabindex="-1"><a class="header-anchor" href="#http-messages-package" aria-hidden="true">#</a> Http Messages Package</h3><p>A new package for that offers PSR-7 Http Messages utilities. See <a href="./http/messages">documentation</a> for additional information.</p><h3 id="duration" tabindex="-1"><a class="header-anchor" href="#duration" aria-hidden="true">#</a> Duration</h3><p>Added <code>Duration</code> utility; a small component able to help with dealing with relative date and time. See <a href="./utils/duration">utilities</a> for more information.</p><h3 id="upgraded-dependencies" tabindex="-1"><a class="header-anchor" href="#upgraded-dependencies" aria-hidden="true">#</a> Upgraded Dependencies</h3><p>Upgraded several dependencies, here amongst Laravel which is now running on <code>v8.x</code>.</p><h2 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog" aria-hidden="true">#</a> Changelog</h2>`,8),y={href:"https://github.com/aedart/athenaeum/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"};function q(R,C){const t=o("router-link"),p=o("ExternalLinkIcon"),c=o("RouterLink");return r(),u("div",null,[k,h,v,n("nav",g,[n("ul",null,[n("li",null,[a(t,{to:"#v5-x-highlights"},{default:e(()=>[s("v5.x Highlights")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#http-client-middleware"},{default:e(()=>[s("Http Client Middleware")]),_:1})]),n("li",null,[a(t,{to:"#extract-response-expectations"},{default:e(()=>[s("Extract Response Expectations")]),_:1})]),n("li",null,[a(t,{to:"#debugging-request-and-response"},{default:e(()=>[s("Debugging Request and Response")]),_:1})]),n("li",null,[a(t,{to:"#default-otherwise-callback"},{default:e(()=>[s("Default otherwise callback")]),_:1})]),n("li",null,[a(t,{to:"#support-for-toml-configuration-files"},{default:e(()=>[s("Support for TOML configuration files")]),_:1})]),n("li",null,[a(t,{to:"#resolve-list-of-dependencies"},{default:e(()=>[s("Resolve list of dependencies")]),_:1})]),n("li",null,[a(t,{to:"#http-messages-package"},{default:e(()=>[s("Http Messages Package")]),_:1})]),n("li",null,[a(t,{to:"#duration"},{default:e(()=>[s("Duration")]),_:1})]),n("li",null,[a(t,{to:"#upgraded-dependencies"},{default:e(()=>[s("Upgraded Dependencies")]),_:1})])])]),n("li",null,[a(t,{to:"#changelog"},{default:e(()=>[s("Changelog")]),_:1})])])]),m,n("p",null,[s("Added configuration file parser for "),n("a",b,[s("TOML"),a(p)]),s(" format, for the "),f,s(".")]),w,n("p",null,[s("Using the new "),x,s(", you can resolve a list of dependencies, including custom arguments. ("),n("em",null,[s("Component is available in the "),a(c,{to:"/archive/v5x/container/list-resolver.html"},{default:e(()=>[s("Service Container package")]),_:1})]),s(").")]),_,n("p",null,[s("Make sure to read the "),n("a",y,[s("changelog"),a(p)]),s(" for additional information about the latest release, new features, changes and bug fixes.")])])}const $=l(d,[["render",q],["__file","index.html.vue"]]);export{$ as default};
