import{_ as l,M as i,p as r,q as u,R as n,N as a,U as e,t as s,a1 as o}from"./framework-efe98465.js";const d={},k=n("h1",{id:"writing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#writing","aria-hidden":"true"},"#"),s(" Writing")],-1),m={class:"table-of-contents"},h=o(`<h2 id="determine-if-writable" tabindex="-1"><a class="header-anchor" href="#determine-if-writable" aria-hidden="true">#</a> Determine if Writable</h2><p>The <code>isWritable()</code> determines if a stream is writable or not.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-&gt;</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> Write</h2><p>Use the <code>write()</code> method to write data to the stream.</p><p>The method returns amount of bytes written to the stream.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$bytes</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),v={href:"https://www.php.net/manual/en/function.fwrite.php",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"fwrite()",-1),b=n("h3",{id:"write-formatted",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#write-formatted","aria-hidden":"true"},"#"),s(" Write Formatted")],-1),f=n("p",null,[s("If you want to write data using a specific format, then you can use the "),n("code",null,"writeFormatted()"),s(" method.")],-1),_=n("code",null,"$format",-1),y={href:"https://www.php.net/manual/en/function.fprintf",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"fprintf()",-1),$=o(`<p>Similar to <code>write()</code>, this method also returns the amount of bytes written to the stream.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$greetings</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Hi there&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">writeFormatted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%s &lt;&lt;%s&gt;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$greetings</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$bytes</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// Hi there &lt;&lt;John&gt;&gt;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="put" tabindex="-1"><a class="header-anchor" href="#put" aria-hidden="true">#</a> Put</h2><p>Alternatively, you can use the <code>put()</code> method to write data to a stream. This method is a &quot;fluent&quot; version of <code>write()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="put-formatted" tabindex="-1"><a class="header-anchor" href="#put-formatted" aria-hidden="true">#</a> Put Formatted</h3><p><code>putFormatted()</code> is a &quot;fluent&quot; version of the <code>writeFormatted()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Hi there&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Smith&#39;</span>

<span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">putFormatted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%s &#39;</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">putFormatted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;&lt;&lt;%s &#39;</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">putFormatted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%s&gt;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// Hi there &lt;&lt;John Smith&gt;&gt;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> Append</h2>`,9),x=n("code",null,"append()",-1),S=n("code",null,"StreamNotSeekable",-1),q=o("<p>The method accepts four arguments:</p><ul><li><code>$data</code>: Data to be appended.</li><li><code>int|null $length</code>: (<em>optional</em>) Maximum bytes to append. By default, all bytes left in <code>$data</code> are appended.</li><li><code>int $offset</code>: (<em>optional</em>) The offset where to start to copy data (<em>offset on <code>$data</code></em>).</li><li><code>int|null $maximumMemory</code>: (<em>optional</em>) Maximum amount of bytes, before writing to a temporary file. (<em>Defaults to 2 MB if not specified</em>).</li></ul>",2),F=n("code",null,"$maximumMemory",-1),T=n("code",null,"$data",-1),P=n("code",null,"append()",-1),I=n("code",null,"$data",-1),A=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;\\nJohn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W={href:"https://www.php.net/manual/en/function.stream-copy-to-stream.php",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"stream_copy_to_stream()",-1),B=o(`<h3 id="append-resource" tabindex="-1"><a class="header-anchor" href="#append-resource" aria-hidden="true">#</a> Append Resource</h3><p>To append data from a resource, pass in the resource as the <code>$data</code> argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="append-stream" tabindex="-1"><a class="header-anchor" href="#append-stream" aria-hidden="true">#</a> Append Stream</h3><p>You may also append directly from another stream.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$from</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),H={class:"custom-container warning"},R=n("p",{class:"custom-container-title"},"Caution",-1),M=n("p",null,[n("strong",null,[s("When pure PSR-7 "),n("code",null,"StreamInterface"),s(" is appended")])],-1),N=n("em",null,[s("a stream that inherits from "),n("code",null,"StreamInterface"),s(", but not from "),n("code",null,"\\Aedart\\Contracts\\Streams\\Stream")],-1),J=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$psrStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Attempt using &quot;psr stream&quot; after it was appended...</span>
<span class="token variable">$psrStream</span><span class="token operator">-&gt;</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Invalid - Exception is thrown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D={href:"https://www.php-fig.org/psr/psr-7/#34-psrhttpmessagestreaminterface",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"StreamInterface",-1),L={href:"https://www.php.net/manual/en/function.stream-copy-to-stream.php",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"stream_copy_to_stream()",-1),U=n("p",null,[n("strong",null,"Workaround")],-1),Y=n("p",null,[s("See "),n("a",{href:"#copy-from"},[n("code",null,"copyFrom()")]),s(".")],-1),j=n("h2",{id:"copy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#copy","aria-hidden":"true"},"#"),s(" Copy")],-1),z=n("p",null,[s("In situations when you wish to copy the stream, then you can use the "),n("code",null,"copy()"),s(" method.")],-1),G=n("code",null,"openTemporary()",-1),K=o(`<p>It accepts optional <code>$length</code> and <code>$offset</code> as arguments.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-file.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$copyA</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$copyB</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$copyA</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
<span class="token keyword">echo</span> <span class="token variable">$copyB</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The initial stream&#39;s position is affected by the <code>copy()</code> method.</p></div>`,3),O={href:"https://www.php.net/manual/en/function.stream-copy-to-stream.php",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"stream_copy_to_stream()",-1),X=o(`<h3 id="copy-to-target" tabindex="-1"><a class="header-anchor" href="#copy-to-target" aria-hidden="true">#</a> Copy To Target</h3><p>If you wish to copy a stream into a specific target stream, then use the <code>copyTo()</code> method.</p><p>It accepts a <code>$target</code> stream, <code>$length</code> and <code>$offset</code> as optional arguments.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-file.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$target</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;target.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$copy</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">copyTo</span><span class="token punctuation">(</span><span class="token variable">$target</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$copy</span> <span class="token operator">===</span> <span class="token variable">$target</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$copy</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="copy-from" tabindex="-1"><a class="header-anchor" href="#copy-from" aria-hidden="true">#</a> Copy From</h3><p>Alternatively, you may also copy data from an existing resource or stream.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token variable">$existing</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Similar to the <a href="#copy-to-target"><code>copyTo()</code></a> method, this method accepts a <code>$source</code> stream, a <code>$length</code> and an <code>$offset</code> argument.</p><p>The <code>$source</code> argument accepts the following types:</p><ul><li><code>resource</code></li><li><code>\\Aedart\\Contracts\\Streams\\Stream</code></li><li><code>\\Psr\\Http\\Message\\StreamInterface</code></li></ul>`,10),Z={class:"custom-container tip"},nn=n("p",{class:"custom-container-title"},"PSR-7 Stream",-1),sn=n("a",{href:"#copy"},[n("code",null,"copyTo()")],-1),an=n("a",{href:"#append"},[n("code",null,"append()")],-1),en=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$psrStream</span><span class="token operator">-&gt;</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$target</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token variable">$psrStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$psrStream</span><span class="token operator">-&gt;</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// valid - underlying resource is still attached</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function tn(on,pn){const t=i("router-link"),p=i("ExternalLinkIcon"),c=i("RouterLink");return r(),u("div",null,[k,n("nav",m,[n("ul",null,[n("li",null,[a(t,{to:"#determine-if-writable"},{default:e(()=>[s("Determine if Writable")]),_:1})]),n("li",null,[a(t,{to:"#write"},{default:e(()=>[s("Write")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#write-formatted"},{default:e(()=>[s("Write Formatted")]),_:1})])])]),n("li",null,[a(t,{to:"#put"},{default:e(()=>[s("Put")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#put-formatted"},{default:e(()=>[s("Put Formatted")]),_:1})])])]),n("li",null,[a(t,{to:"#append"},{default:e(()=>[s("Append")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#append-resource"},{default:e(()=>[s("Append Resource")]),_:1})]),n("li",null,[a(t,{to:"#append-stream"},{default:e(()=>[s("Append Stream")]),_:1})])])]),n("li",null,[a(t,{to:"#copy"},{default:e(()=>[s("Copy")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#copy-to-target"},{default:e(()=>[s("Copy To Target")]),_:1})]),n("li",null,[a(t,{to:"#copy-from"},{default:e(()=>[s("Copy From")]),_:1})])])])])]),h,n("p",null,[s("Behind the scene, "),n("a",v,[s("PHP's "),g,a(p)]),s(" is used for writing data to the stream.")]),b,f,n("p",null,[s("The method accepts a "),_,s(" argument, as specified by "),n("a",y,[s("PHP's "),w,a(p)]),s(", and an arbitrary amount of values.")]),$,n("p",null,[s("The "),x,s(" method is able to add data, at the end of the stream, if the stream is "),a(c,{to:"/archive/v8x/streams/usage/seeking.html#determine-if-seekable"},{default:e(()=>[s("seekable")]),_:1}),s(". If the stream is not seekable, then a "),S,s(" exception will be thrown.")]),q,n("p",null,[s("The "),F,s(" argument is relevant when "),T,s(" is a pure string, or numeric. If that is the case, then the "),P,s(" method will wrap the "),I,s(" into a "),a(c,{to:"/archive/v8x/streams/usage/open-close.html#temporary"},{default:e(()=>[s('"temporary" stream')]),_:1}),s(" internally, before reading from it.")]),A,n("p",null,[s("Behind the scene, "),n("a",W,[s("PHP's "),C,a(p)]),s(" is used to append.")]),B,n("div",H,[R,M,n("p",null,[s('If you choose to append from pure "PSR stream" ('),N,s('), then the given "data" stream is automatically '),a(c,{to:"/archive/v8x/streams/usage/open-close.html#detaching-resource"},{default:e(()=>[s("detached")]),_:1}),s(".")]),J,n("p",null,[s("The reason for this behavior is due to the limitation of "),n("a",D,[s("PSR-7's defined "),E,a(p)]),s(". There is no safe way to obtain a reference to the underlying resource, without detaching it. PHP's native "),n("a",L,[V,a(p)]),s(" can therefore not be applied.")]),U,Y]),j,z,n("p",null,[s('This method will create a new "temporary" stream via '),a(c,{to:"/archive/v8x/streams/usage/open-close.html#temporary"},{default:e(()=>[G]),_:1}),s(".")]),K,n("p",null,[s("Behind the scene, "),n("a",O,[s("PHP's "),Q,a(p)]),s(" is used for the copy operation.")]),X,n("div",Z,[nn,n("p",null,[s("Unlike the "),sn,s(" or "),an,s(" methods, this method will not "),a(c,{to:"/archive/v8x/streams/usage/open-close.html#detaching-resource"},{default:e(()=>[s("detach")]),_:1}),s(" the underlying resource of the source PSR-7 stream.")]),en])])}const ln=l(d,[["render",tn],["__file","writing.html.vue"]]);export{ln as default};
