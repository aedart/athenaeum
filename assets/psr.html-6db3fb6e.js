import{_ as l,M as p,p as c,q as r,R as n,t as s,N as a,U as t,a1 as i}from"./framework-efe98465.js";const u={},d=n("h1",{id:"psr-uploaded-files-streams",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#psr-uploaded-files-streams","aria-hidden":"true"},"#"),s(" PSR Uploaded Files & Streams")],-1),m=n("code",null,"scan()",-1),v=n("code",null,"FileStream",-1),k={href:"https://www.php-fig.org/psr/psr-7/#36-psrhttpmessageuploadedfileinterface",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.php-fig.org/psr/psr-7/#34-psrhttpmessagestreaminterface",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"Stream",-1),f=n("strong",null,"copied",-1),g=n("code",null,"FileStream",-1),_=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$scanner</span><span class="token operator">-&gt;</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token variable">$psrUploadedFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PSR Stream is copied...</span>

<span class="token comment">// Later...</span>
<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token variable">$psrUploadedFile</span><span class="token operator">-&gt;</span><span class="token function">getStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// You can safely use the stream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=n("strong",null,"ONLY",-1),S=n("code",null,"FileStream",-1),w=i(`<h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h2><p>The PSR stream copy behaviour may cause some performance issues for your application. This is especially true, if you plan to scan files of large filesize. If that is the case, please consider detaching the PSR stream. Doing so ensures that the copy behaviour is entirely omitted.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>

<span class="token comment">// Detach PSR stream, wrap it into a new stream</span>
<span class="token variable">$fileStream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">makeFrom</span><span class="token punctuation">(</span>
    <span class="token variable">$psrUploadedFile</span><span class="token operator">-&gt;</span><span class="token function">getStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$scanner</span><span class="token operator">-&gt;</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token variable">$fileStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Later...</span>
<span class="token keyword">echo</span> <span class="token variable">$fileStream</span><span class="token operator">-&gt;</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the above is not possible for you, then consider tinkering with the stream copy options, which are available for all scanners. In your <code>config/antivirus.php</code>, you may add the following options and configure them as you see fit.</p><ul><li><code>temporary_stream_max_memory</code>, the maximum memory limit in bytes, before PHP&#39;s internal mechanisms write to a physical file.</li><li><code>stream_buffer_size</code> amount of bytes to read from PSR stream, per read iteration (<em>buffer</em>).</li></ul><p>Both values default to 2 Mb, if not specified in the profile&#39;s options.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>BufferSizes</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>

    <span class="token comment">// ...previous not shown...</span>

    <span class="token comment">/*
    |--------------------------------------------------------------------------
    | Scanner Profiles
    |--------------------------------------------------------------------------
    */</span>

    <span class="token string single-quoted-string">&#39;profiles&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;driver&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Antivirus<span class="token punctuation">\\</span>Scanners<span class="token punctuation">\\</span>ClamAv</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;options&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

                <span class="token comment">// When dealing with PSR-7 Uploaded Files / Streams</span>
                <span class="token string single-quoted-string">&#39;temporary_stream_max_memory&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BufferSizes</span><span class="token operator">::</span><span class="token constant">BUFFER_1MB</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;stream_buffer_size&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BufferSizes</span><span class="token operator">::</span><span class="token constant">BUFFER_1MB</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
                
                <span class="token comment">// ...other options not shown...</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>

        <span class="token comment">// ... other profiles not shown...</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function x(F,R){const e=p("RouterLink"),o=p("ExternalLinkIcon");return c(),r("div",null,[d,n("p",null,[s("Internally, the "),m,s(" method wraps its file argument into a "),a(e,{to:"/archive/v8x/streams/"},{default:t(()=>[v]),_:1}),s(" before processing it. When a "),n("a",k,[s("PSR-7 uploaded file"),a(o)]),s(" instance is provided, its "),n("a",h,[b,a(o)]),s(" will be extracted and "),f,s(" into a new "),a(e,{to:"/archive/v8x/streams/usage/writing.html#copy-from"},{default:t(()=>[s("temporary "),g]),_:1}),s(". This behaviour ensures that the original stream is not "),a(e,{to:"/archive/v8x/streams/usage/open-close.html#detaching-resource"},{default:t(()=>[s("detached")]),_:1}),s(", and you can safely continue to work with it after a scan has been performed.")]),_,n("p",null,[s("The above described stream copy behaviour applies "),y,s(" to PSR-7 streams that are not instance of "),a(e,{to:"/archive/v8x/streams/"},{default:t(()=>[S]),_:1}),s(".")]),w])}const $=l(u,[["render",x],["__file","psr.html.vue"]]);export{$ as default};
