import{_ as i,M as o,p,q as r,R as s,t as n,N as e,a1 as t}from"./framework-efe98465.js";const c={},l=s("h1",{id:"generator",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#generator","aria-hidden":"true"},"#"),n(" Generator")],-1),d=s("p",null,[n("Creating aware-of components ("),s("em",null,"glorified getters and setters"),n(") can be a tiresome task. To make it a bit easier for yourself, you can use this package's aware-of component generator. Based on a php configuration file, it will generate a series of interfaces and traits, for your desired properties.")],-1),u=s("h2",{id:"prerequisite",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#prerequisite","aria-hidden":"true"},"#"),n(" Prerequisite")],-1),v={href:"https://twig.symfony.com/",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>composer require twig/twig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="create-configuration-file" tabindex="-1"><a class="header-anchor" href="#create-configuration-file" aria-hidden="true">#</a> Create Configuration File</h2><p>The first thing that you need to do, is to create a configuration file. The easiest way to do so, is via the <code>dto:scaffold</code> command. When executed, it will create a <code>aware-of-properties.php</code> file in your project.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php athenaeum dto:scaffold
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can specify the directory of where the configuration file should be created, via the <code>--output</code> option. See <code>php athenaeum dto:scaffold -h</code> for additional information.</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The name of the configuration file is not important. You can change this to whatever suits you.</p></div><h2 id="run-generate-command" tabindex="-1"><a class="header-anchor" href="#run-generate-command" aria-hidden="true">#</a> Run Generate Command</h2><p>Provided that you have edited your configuration and specified what aware-of components should be generated (<em>covered later in this document</em>), you can run the generate command. The command expects a path to the configuration file that you wish to use.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php athenaeum dto:create-aware-of aware-of-properties.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="force-generate" tabindex="-1"><a class="header-anchor" href="#force-generate" aria-hidden="true">#</a> Force Generate</h3><p>Should you wish to force create your aware-of components, set the <code>--force</code> flag, when running the command. It will overwrite any existing interfaces and traits.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php athenaeum dto:create-aware-of aware-of-properties.php <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>In your configuration file, you will find a series settings that you can tinker with. Some of these are highlighted here. For full reference, please read the files internal comments.</p><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> <code>output</code></h3>`,15),m={href:"https://www.php-fig.org/psr/psr-4/",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;output&#39;</span>    <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;src/&#39;</span><span class="token punctuation">,</span>
    
    <span class="token comment">// ... remaining not shown ... //</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you are not accustomed with this generator, try setting the <code>output</code> to a dummy directory, e.g. <code>temp/</code>, to ensure that all generated interfaces and traits to not conflict with your project&#39;s existing classes and directories.</p></div><h3 id="namespaces" tabindex="-1"><a class="header-anchor" href="#namespaces" aria-hidden="true">#</a> <code>namespaces</code></h3><p>Contains two series of namespaces to apply, when creating aware-of components; one for interfaces and one for traits.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;namespaces&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token string single-quoted-string">&#39;vendor&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Acme\\\\&#39;</span><span class="token punctuation">,</span>

        <span class="token string single-quoted-string">&#39;interfaces&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

            <span class="token string single-quoted-string">&#39;prefix&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Contracts\\\\&#39;</span><span class="token punctuation">,</span>

            <span class="token comment">// ... remaining not shown ... //</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>

        <span class="token string single-quoted-string">&#39;traits&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

            <span class="token string single-quoted-string">&#39;prefix&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Traits\\\\&#39;</span><span class="token punctuation">,</span>

            <span class="token comment">// ... remaining not shown ... //</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    
    <span class="token comment">// ... remaining not shown ... //</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="namespaces-vendor" tabindex="-1"><a class="header-anchor" href="#namespaces-vendor" aria-hidden="true">#</a> <code>namespaces.vendor</code></h4><p>Top-most prefix to apply on all generated namespaces.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;namespaces&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token string single-quoted-string">&#39;vendor&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Acme\\\\Dto\\\\&#39;</span><span class="token punctuation">,</span>
        
        <span class="token comment">// ... remaining not shown ... //    </span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    
    <span class="token comment">// ... remaining not shown ... //</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aware-of-properties" tabindex="-1"><a class="header-anchor" href="#aware-of-properties" aria-hidden="true">#</a> <code>aware-of-properties</code></h3><p>Contains a list of all the aware-of components that you wish to create.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">stringProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Name of a person&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">integerProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Age of a person&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;years&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The data structure of this setting is a list of arrays, containing the information about the following:</p><ul><li>Name of property (aware-of component)</li><li>Description of property</li><li>Data Type, e.g. string, int, boolean... etc</li><li>(<em>optionally</em>) input argument name for the generated setter method</li></ul><p>To make it a bit easier, several global methods are offered, which return the desired data structure. These are covered in the next section.</p><h2 id="global-helpers-methods" tabindex="-1"><a class="header-anchor" href="#global-helpers-methods" aria-hidden="true">#</a> Global Helpers Methods</h2><h3 id="stringproperty" tabindex="-1"><a class="header-anchor" href="#stringproperty" aria-hidden="true">#</a> <code>stringProperty()</code></h3><p>Returns &quot;string&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">stringProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Name of a person&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="integerproperty" tabindex="-1"><a class="header-anchor" href="#integerproperty" aria-hidden="true">#</a> <code>integerProperty()</code></h3><p>Returns &quot;integer&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">integerProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;identifier&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floatproperty" tabindex="-1"><a class="header-anchor" href="#floatproperty" aria-hidden="true">#</a> <code>floatProperty()</code></h3><p>Returns &quot;float&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">floatProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Product price&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="booleanproperty" tabindex="-1"><a class="header-anchor" href="#booleanproperty" aria-hidden="true">#</a> <code>booleanProperty()</code></h3><p>Returns &quot;boolean&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">booleanProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;isRobot&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;State of player&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;state&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrayproperty" tabindex="-1"><a class="header-anchor" href="#arrayproperty" aria-hidden="true">#</a> <code>arrayProperty()</code></h3><p>Returns &quot;array&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">arrayProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;categories&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;List of categories&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="callableproperty" tabindex="-1"><a class="header-anchor" href="#callableproperty" aria-hidden="true">#</a> <code>callableProperty()</code></h3><p>Returns &quot;callable&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">callableProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;scoreFn&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Callback to handle score&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;callback&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iterableproperty" tabindex="-1"><a class="header-anchor" href="#iterableproperty" aria-hidden="true">#</a> <code>iterableProperty()</code></h3><p>Returns &quot;iterable&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">iterableProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;players&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;List of players&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;players&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mixedproperty" tabindex="-1"><a class="header-anchor" href="#mixedproperty" aria-hidden="true">#</a> <code>mixedProperty()</code></h3><p>Returns &quot;mixed&quot; aware-of property configuration (<em>array</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">mixedProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;player&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;The player of this game&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;instance&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The &quot;mixed&quot; type ensures that no type hinting is applied for the generated aware-of component.</p></div><h3 id="datetimeproperty" tabindex="-1"><a class="header-anchor" href="#datetimeproperty" aria-hidden="true">#</a> <code>dateTimeProperty()</code></h3>`,41),h={href:"https://secure.php.net/manual/en/class.datetime.php",target:"_blank",rel:"noopener noreferrer"},b=s("em",null,"array",-1),f=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">dateTimeProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Date of creation&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="awareofproperty" tabindex="-1"><a class="header-anchor" href="#awareofproperty" aria-hidden="true">#</a> <code>awareOfProperty()</code></h3><p>Returns an array of configuration that allows a generator to build an &quot;aware-of property&quot; component. It accepts four arguments;</p><ul><li><code>string $property</code> Name of property.</li><li><code>string $description</code> Description of property.</li><li><code>string $dataType</code> (<em>optional</em>) Property data type. Defaults to &quot;string&quot; if none given.</li><li><code>string|null $inputArgName</code> (<em>optional</em>) Name of property input argument (for setter method). If <code>null</code> given, then input argument name is the same as the property name.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>DataTypes</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ... //</span>
    
    <span class="token string single-quoted-string">&#39;aware-of-properties&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token function">awareOfProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Name of a person&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">DataTypes</span><span class="token operator">::</span><span class="token constant">STRING_TYPE</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creating-your-own-type" tabindex="-1"><a class="header-anchor" href="#creating-your-own-type" aria-hidden="true">#</a> Creating Your Own Type</h3><p>By using the <code>awareOfProperty()</code> helper method, you will be able to create whatever type you desire. However, the generator will create the interface and trait into your configured <code>namespaces.[interfaces|traits].prefix</code> namespace, if it does not know a specific location for your type.</p><p>In order to determine the namespace of your type, you must add it to the list of namespaces, in your configuration. For instance, lets imaging that you create a new type, called <code>Box</code> and you that it&#39;s interfaces and traits are to be stored in the sub-namespace <code>Boxes</code>. To do so, add it inside the <code>namespaces.[interfaces|traits].</code> settings.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>DataTypes</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;namespaces&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token comment">// ... previous not shown ... //</span>

        <span class="token string single-quoted-string">&#39;interfaces&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

            <span class="token string single-quoted-string">&#39;prefix&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Contracts\\\\&#39;</span><span class="token punctuation">,</span>

            <span class="token string single-quoted-string">&#39;\\Box&#39;</span>                       <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Boxes\\\\&#39;</span><span class="token punctuation">,</span>
            <span class="token class-name static-context">DataTypes</span><span class="token operator">::</span><span class="token constant">STRING_TYPE</span>      <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Strings\\\\&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// ... etc ... //</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>

        <span class="token string single-quoted-string">&#39;traits&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

            <span class="token string single-quoted-string">&#39;prefix&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Traits\\\\&#39;</span><span class="token punctuation">,</span>

            <span class="token string single-quoted-string">&#39;\\Box&#39;</span>                       <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Boxes\\\\&#39;</span><span class="token punctuation">,</span>
            <span class="token class-name static-context">DataTypes</span><span class="token operator">::</span><span class="token constant">STRING_TYPE</span>      <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Strings\\\\&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// ... etc ... //</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>If the above example, the <code>Box</code> type is assumed to be some kind of class reference, in the top-most namespace. Should your desired type be class reference, then you must specify a full and valid namespace as the type!</p></div>`,10);function y(w,q){const a=o("ExternalLinkIcon");return p(),r("div",null,[l,d,u,s("p",null,[n("You must have "),s("a",v,[n("Twig Template Engine"),e(a)]),n(" available in your project.")]),g,s("p",null,[s("a",m,[n("Psr-4"),e(a)]),n(" directory location, where aware-of properties are to be created.")]),k,s("p",null,[n('Returns "'),s("a",h,[n("DateTime"),e(a)]),n('" aware-of property configuration ('),b,n(").")]),f])}const _=i(c,[["render",y],["__file","generator.html.vue"]]);export{_ as default};
