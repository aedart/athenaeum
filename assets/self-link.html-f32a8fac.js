import{_ as o,M as p,p as c,q as l,R as n,N as e,U as t,t as s,a1 as i}from"./framework-efe98465.js";const u={},r=n("h1",{id:"self-link",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#self-link","aria-hidden":"true"},"#"),s(" Self-Link")],-1),d=n("p",null,"Each Api Resource contains a self-link; a URL for showing the individual model. This can be handy for Api Clients when they must automate retrieval of individual resources.",-1),k={class:"table-of-contents"},m=i(`<h2 id="route-name" tabindex="-1"><a class="header-anchor" href="#route-name" aria-hidden="true">#</a> Route Name</h2><p>By default, the self-link is generated based on the following assumptions:</p><ul><li>Api Resource has a named route</li><li>The route&#39;s name is <code>&quot;[plural-resource-type].show&quot;</code>, e.g. <code>addresses.show</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>AddressResource</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Address</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;addresses.show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you follow a different naming convention, then you can overwrite the <code>resourceRouteName()</code> method to specify a different route name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...inside your Api Resource...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">resourceRouteName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
<span class="token punctuation">{</span>
    <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resource type (singular form)</span>

    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;show.<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$type</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-callback" tabindex="-1"><a class="header-anchor" href="#custom-callback" aria-hidden="true">#</a> Custom Callback</h2><p>Alternatively, you can also specify a callback for a single Api Resource instance, when you need to change or set its self-link. This can be done by using the <code>withSelfLink()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name static-context">AddressResource</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withSelfLink</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;my-address-url&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function v(h,f){const a=p("router-link");return c(),l("div",null,[r,d,n("nav",k,[n("ul",null,[n("li",null,[e(a,{to:"#route-name"},{default:t(()=>[s("Route Name")]),_:1})]),n("li",null,[e(a,{to:"#custom-callback"},{default:t(()=>[s("Custom Callback")]),_:1})])])]),m])}const g=o(u,[["render",v],["__file","self-link.html.vue"]]);export{g as default};
