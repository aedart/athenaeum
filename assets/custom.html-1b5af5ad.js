import{_ as n,p as s,q as a,a1 as e}from"./framework-efe98465.js";const t={},o=e(`<h1 id="custom-generator" tabindex="-1"><a class="header-anchor" href="#custom-generator" aria-hidden="true">#</a> Custom Generator</h1><p>While the <code>GenericGenerator</code> is able to create a hash of all kinds of data, it might not be the most suitable for your needs. It comes with a cost. The default generator must determine the given data type, and attempt to return a string representation of that data. This can take some processing power.</p><p>Depending on your needs, it could be more prudent to create your own <code>Generator</code>.</p><h2 id="how-to-create" tabindex="-1"><a class="header-anchor" href="#how-to-create" aria-hidden="true">#</a> How to create</h2><p>Assuming that your generator also must hash content, using two available hashing algorithms (<em>for &quot;weak&quot; and &quot;strong&quot; comparison</em>), then the easiest way to create your own generator is by extending the <code>BaseGenerator</code>.</p><p>The following example assumes that your application has a <code>Person</code> data-type/component, and you wish to create a custom <code>Generator</code> that is able to create Etag representation of each <code>Person</code> instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Generators</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>UnableToGenerateETag</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Generators<span class="token punctuation">\\</span>BaseGenerator</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Acme<span class="token punctuation">\\</span>Data<span class="token punctuation">\\</span>Person</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseGenerator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveContent</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$weak</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Fail when content is not a Person...</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$content</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnableToGenerateETag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Content must be instance of Person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    
        <span class="token comment">// Return content for ETag flagged as weak (&quot;weak&quot; comparison)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$weak</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    
        <span class="token comment">// Return content for ETag NOT flagged as weak (&quot;strong&quot; comparison)</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">}</span></span>_<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>resolveContent()</code> method is responsible for returning a string value which is then hashed using either of the previously mentioned hashing algorithms. Note that you are free to completely ignore the <code>$weak</code> argument and return whatever string representation of the content, as you see fit.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Inside your <code>config/etags.php</code>, add a new profile that uses your custom generator, and specify your desired hashing algorithms.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...previous not shown ...</span>

    <span class="token string single-quoted-string">&#39;profiles&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>

        <span class="token comment">// Add your generator as a new &quot;profile&quot;</span>
        <span class="token string single-quoted-string">&#39;persons&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;driver&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Generators<span class="token punctuation">\\</span>PersonGenerator</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;options&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;weak_algo&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;adler32&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;strong_algo&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;md5&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-obtain-generator" tabindex="-1"><a class="header-anchor" href="#how-to-obtain-generator" aria-hidden="true">#</a> How to obtain generator</h2><p>Once your custom generator and configuration are in order, then you can obtain it by its profile name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Using factory</span>
<span class="token variable">$generator</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;persons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or via facade</span>
<span class="token variable">$generator</span> <span class="token operator">=</span> <span class="token class-name static-context">Generator</span><span class="token operator">::</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;persons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),p=[o];function i(c,r){return s(),a("div",null,p)}const u=n(t,[["render",i],["__file","custom.html.vue"]]);export{u as default};
