import{_ as l,M as c,p as i,q as u,R as n,N as s,U as t,t as a,a1 as o}from"./framework-efe98465.js";const r={},k=n("h1",{id:"invoker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#invoker","aria-hidden":"true"},"#"),a(" Invoker")],-1),d=n("p",null,"A utility for invoking callbacks, with an optional fallback callback. This helper is intended for situations when you dynamically are building a callback, to be executed at a later point.",-1),v={class:"table-of-contents"},b=o(`<h2 id="basic-example" tabindex="-1"><a class="header-anchor" href="#basic-example" aria-hidden="true">#</a> Basic Example</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>Invoker</span><span class="token punctuation">;</span>

<span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token variable">$invoker</span> <span class="token operator">=</span> <span class="token class-name static-context">Invoker</span><span class="token operator">::</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...Later in your application</span>
<span class="token keyword">echo</span> <span class="token variable">$invoker</span><span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h2><p>To provide arguments, use the <code>with()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>Invoker</span><span class="token punctuation">;</span>

<span class="token variable">$invoker</span> <span class="token operator">=</span> <span class="token class-name static-context">Invoker</span><span class="token operator">::</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fallback" tabindex="-1"><a class="header-anchor" href="#fallback" aria-hidden="true">#</a> Fallback</h2>`,6),m={href:"https://www.php.net/manual/en/function.is-callable",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"callable",-1),f=o(`<p><strong>Note</strong>: <em>Any arguments that are provided via <code>width()</code> are passed on to the fallback callback, if &quot;core&quot; callback is not callable!</em></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>Invoker</span><span class="token punctuation">;</span>

<span class="token variable">$unknownCallback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span> <span class="token comment">// Edge-case</span>

<span class="token variable">$invoker</span> <span class="token operator">=</span> <span class="token class-name static-context">Invoker</span><span class="token operator">::</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$unknownCallback</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// E.g. do something else if &quot;core&quot; callback is not callable...</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;No callback provided&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...Later in your application</span>
<span class="token keyword">echo</span> <span class="token variable">$invoker</span><span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws exception</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="caveat" tabindex="-1"><a class="header-anchor" href="#caveat" aria-hidden="true">#</a> Caveat</h2>`,3),_={class:"custom-container warning"},g=n("p",{class:"custom-container-title"},"WARNING",-1),w={href:"https://www.php.net/manual/en/function.is-callable",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"callable",-1),y=n("code",null,"RuntimeException",-1),$=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Helpers<span class="token punctuation">\\</span>Invoker</span><span class="token punctuation">;</span>

<span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token variable">$fallback</span> <span class="token operator">=</span> <span class="token constant">null</span>

<span class="token comment">// Throws RuntimeException</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Invoker</span><span class="token operator">::</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token variable">$fallback</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function I(E,A){const e=c("router-link"),p=c("ExternalLinkIcon");return i(),u("div",null,[k,d,n("nav",v,[n("ul",null,[n("li",null,[s(e,{to:"#basic-example"},{default:t(()=>[a("Basic Example")]),_:1})]),n("li",null,[s(e,{to:"#arguments"},{default:t(()=>[a("Arguments")]),_:1})]),n("li",null,[s(e,{to:"#fallback"},{default:t(()=>[a("Fallback")]),_:1})]),n("li",null,[s(e,{to:"#caveat"},{default:t(()=>[a("Caveat")]),_:1})])])]),b,n("p",null,[a("You may also specify a fallback callback, in case that the core callback is not "),n("a",m,[h,s(p)]),a(".")]),f,n("div",_,[g,n("p",null,[a('If neither the "core" callback nor fallback are '),n("a",w,[x,s(p)]),a(", then the invoker component will throw a "),y,a(" when invoked.")])]),$])}const q=l(r,[["render",I],["__file","invoker.html.vue"]]);export{q as default};
