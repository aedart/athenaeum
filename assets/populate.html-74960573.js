import{_ as n,p as a,q as s,a1 as e}from"./framework-efe98465.js";const t={},p=e(`<h1 id="populate" tabindex="-1"><a class="header-anchor" href="#populate" aria-hidden="true">#</a> Populate</h1><p>You can populate your DTO using an array.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// property-name =&gt; value array</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Timmy Jones&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>  <span class="token operator">=&gt;</span> <span class="token number">32</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Create instance and invoke populate</span>
<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// setName() and setAge() are invoked with the given values</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="via-construct" tabindex="-1"><a class="header-anchor" href="#via-construct" aria-hidden="true">#</a> Via <code>__construct</code></h2><p>If you are extending the default DTO abstraction, then you can also pass in an array in the constructor.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// property-name =&gt; value array</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Carmen Rock&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span>  <span class="token operator">=&gt;</span> <span class="token number">25</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Create instance and invoke populate</span>
<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="export-to-array" tabindex="-1"><a class="header-anchor" href="#export-to-array" aria-hidden="true">#</a> Export to array</h2><p>Each DTO can be exported to an array.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$properties</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$properties</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Will output a &quot;property-name =&gt; value&quot; list</span>
                        <span class="token comment">// Example:</span>
                        <span class="token comment">//  [</span>
                        <span class="token comment">//      &#39;name&#39;  =&gt; &#39;Timmy&#39;</span>
                        <span class="token comment">//      &#39;age&#39;   =&gt; 16</span>
                        <span class="token comment">//  ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function i(l,c){return a(),s("div",null,o)}const u=n(t,[["render",i],["__file","populate.html.vue"]]);export{u as default};
