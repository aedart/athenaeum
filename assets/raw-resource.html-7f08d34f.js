import{_ as c,M as o,p as i,q as d,R as e,N as t,U as a,t as s,a1 as u}from"./framework-efe98465.js";const l={},p=e("h1",{id:"raw-resource",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#raw-resource","aria-hidden":"true"},"#"),s(" Raw Resource")],-1),h=e("p",null,"To obtain the raw underlying resource, there are two methods you should know about.",-1),m={class:"table-of-contents"},g=u(`<h2 id="resource" tabindex="-1"><a class="header-anchor" href="#resource" aria-hidden="true">#</a> <code>resource()</code></h2><p>For situations when you require the underlying <code>resource</code> of a stream instance, you can use the <code>resource()</code> method. It returns the underlying resource directly, without detaching it from the stream instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The <code>resource()</code> method exists for special cases, e.g. to manipulate of access the resource in ways that are not offered by this package&#39;s stream components. What you choose to do with the underlying resource, falls outside the scope of the stream instance. Please be very careful...</p><p><strong>Recommendation</strong></p><p>The <code>detach()</code> method is the preferred and RECOMMENDED way of obtaining the underlying resource, should you require direct access to it.</p><p><strong>Alternative</strong></p><p>Consider extending the <code>Stream</code> or <code>FileStream</code> component and implement desired functionality, rather than manipulating underlying resource outside the scope of the stream instance.</p></div><h2 id="detach" tabindex="-1"><a class="header-anchor" href="#detach" aria-hidden="true">#</a> <code>detach()</code></h2>`,5),f=e("code",null,"detach()",-1);function _(k,v){const n=o("router-link"),r=o("RouterLink");return i(),d("div",null,[p,h,e("nav",m,[e("ul",null,[e("li",null,[t(n,{to:"#resource"},{default:a(()=>[s("resource()")]),_:1})]),e("li",null,[t(n,{to:"#detach"},{default:a(()=>[s("detach()")]),_:1})])])]),g,e("p",null,[s("The "),f,s(" method is considered to be the safest approach to obtaining the underlying resource. Please see "),t(r,{to:"/archive/v8x/streams/usage/open-close.html#detaching-resource"},{default:a(()=>[s("method description")]),_:1}),s(" for documentation.")])])}const y=c(l,[["render",_],["__file","raw-resource.html.vue"]]);export{y as default};
