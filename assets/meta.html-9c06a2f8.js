import{_ as o,M as p,p as i,q as c,R as a,t as n,N as e,a1 as t}from"./framework-efe98465.js";const r={},l=a("h1",{id:"meta",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#meta","aria-hidden":"true"},"#"),n(" Meta")],-1),d=a("code",null,"Repository",-1),u={href:"https://www.php.net/manual/en/function.stream-get-meta-data",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"stream_get_meta_data()",-1),k={href:"https://www.php.net/manual/en/function.fstat",target:"_blank",rel:"noopener noreferrer"},h=a("code",null,"fstat()",-1),g=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$meta</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">meta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$meta</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stats.size&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Raw meta always merged</p><p>The &quot;raw&quot; meta-data that is provided by <code>rawMeta()</code> (<em>see method description below</em>). This data is <em>ALWAYS</em> merged into the meta <code>Repository</code> instance, whenever you invoke the <code>meta()</code> method.</p></div><h2 id="raw-meta" tabindex="-1"><a class="header-anchor" href="#raw-meta" aria-hidden="true">#</a> Raw Meta</h2>`,3),v={href:"https://www.php.net/manual/en/function.stream-get-meta-data",target:"_blank",rel:"noopener noreferrer"},b=a("code",null,"stream_get_meta_data()",-1),f={href:"https://www.php.net/manual/en/function.fstat",target:"_blank",rel:"noopener noreferrer"},_=a("code",null,"fstat()",-1),w=t(`<p>To acquire a raw version of this meta-data, use the <code>rawMeta()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$rawMeta</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">rawMeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong> <em>As previously mentioned, this method is always invoked and its output is automatically merged into the meta <code>Repository</code>, whenever the <code>meta()</code> method is called!</em></p><h2 id="assign-arbitrary-meta-data" tabindex="-1"><a class="header-anchor" href="#assign-arbitrary-meta-data" aria-hidden="true">#</a> Assign Arbitrary Meta-Data</h2><p>To assign arbitrary meta-data to a stream, use the <code>setMetaRepository()</code>. The method can accept the following types as argument:</p><ul><li><code>array</code>: associate array, containing key-value pairs.</li><li><code>\\Aedart\\Contracts\\Streams\\Meta\\Repository</code>: A meta <code>Repository</code> instance.</li><li><code>null</code>: If null is given, then a new meta <code>Repository</code> instance will automatically be set.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">setMetaRepository</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;acme.foo&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;bar&#39;</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$meta</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">meta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$meta</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;acme.foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alternative" tabindex="-1"><a class="header-anchor" href="#alternative" aria-hidden="true">#</a> Alternative</h3><p>Alternatively, you may also specify custom arbitrary data directly in the meta <code>Repository</code>, using it&#39;s <code>set()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">meta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;acme.bar&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">meta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;acme.bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Caution</p><p>You <em>SHOULD</em> always prefix your arbitrary meta-data keys, to avoid accidental naming conflicts and overwrites with values provided by <code>rawMeta()</code>.</p></div>`,11);function y(x,q){const s=p("ExternalLinkIcon");return i(),c("div",null,[l,a("p",null,[n("Whenever a stream component is created, a new meta "),d,n(" is assigned to it. It contains various values obtained by PHP's "),a("a",u,[m,e(s)]),n(" and "),a("a",k,[h,e(s)]),n(". The meta repository can also be used to assign arbitrary data or information to a stream, which can be useful in situations when working with multiple streams at the same time and require some additional information to be associated with each.")]),g,a("p",null,[n(`Each stream instance comes with the ability to obtain the underlying resource's "meta-data", using PHP's `),a("a",v,[b,e(s)]),n(" and "),a("a",f,[_,e(s)]),n(" methods.")]),w])}const M=o(r,[["render",y],["__file","meta.html.vue"]]);export{M as default};
