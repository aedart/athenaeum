import{_ as i,M as o,p,q as l,R as s,t as n,N as a,U as r,a1 as t}from"./framework-efe98465.js";const d={},u=s("h1",{id:"console",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#console","aria-hidden":"true"},"#"),n(" Console")],-1),m={href:"https://laravel.com/docs/8.x/artisan",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="create-commands" tabindex="-1"><a class="header-anchor" href="#create-commands" aria-hidden="true">#</a> Create Commands</h2><p>To create a console command, extend the <code>Command</code> class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Console</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Command</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$signature</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;test:my-command&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;A simple test command&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">output</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Hi there...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v={href:"https://laravel.com/docs/8.x/artisan#writing-commands",target:"_blank",rel:"noopener noreferrer"},h=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"Note"),s("p",null,[n("This package does not offer Laravel's "),s("code",null,"make:command"),n(" generator utility. If you wish to create console commands, then you have to do so manually.")])],-1),b=s("h2",{id:"register-commands",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#register-commands","aria-hidden":"true"},"#"),n(" Register Commands")],-1),g=s("code",null,"configs/commands.php",-1),f=t(`<h3 id="via-service-provider" tabindex="-1"><a class="header-anchor" href="#via-service-provider" aria-hidden="true">#</a> Via Service Provider</h3><p>Should you require more advanced console command registration, e.g. conditional registration, then you can do so via a Service Provider. In the <code>boot()</code> method, you can invoked the <code>commands()</code> method to register your desired commands.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Acme<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyConsoleServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... your logic / condition check ...</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$shouldRegisterCommands</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
                <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>MyCustomCommandA</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>MyCustomCommandB</span><span class="token operator">::</span><span class="token keyword">class</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you have completed your service provider, register it in your <code>/configs/app.php</code> configuration file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... previous not shown ...</span>

    <span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Acme<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>MyConsoleServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function y(_,w){const e=o("ExternalLinkIcon"),c=o("RouterLink");return p(),l("div",null,[u,s("p",null,[n("Laravel's "),s("a",m,[n("Console Application"),a(e)]),n(" is used to enable command-line interfacing. It offers the ability to register and execute custom console commands.")]),k,s("p",null,[n("For additional information about how to create console commands, please review Laravel's "),s("a",v,[n("documentation"),a(e)]),n(".")]),h,b,s("p",null,[n("You can register the command via the "),g,n(" configuration file. Please review the "),a(c,{to:"/archive/v5x/console/commands.html"},{default:r(()=>[n("Console Package's documentation")]),_:1}),n(" for details.")]),f])}const C=i(d,[["render",y],["__file","console.html.vue"]]);export{C as default};
