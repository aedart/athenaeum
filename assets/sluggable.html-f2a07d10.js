import{_ as i,M as p,p as c,q as u,R as n,t as s,N as a,U as t,a1 as l}from"./framework-efe98465.js";const d={},r=n("h1",{id:"sluggable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sluggable","aria-hidden":"true"},"#"),s(" Sluggable")],-1),k={href:"https://en.wikipedia.org/wiki/Clean_URL",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"Sluggable",-1),h=n("code",null,"Slugs",-1),m={class:"table-of-contents"},v=l(`<h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Sluggable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Concerns</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">Sluggable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Concerns<span class="token punctuation">\\</span>Slugs</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="slug-attribute-name" tabindex="-1"><a class="header-anchor" href="#slug-attribute-name" aria-hidden="true">#</a> Slug attribute name</h2><p>By default, the <code>Slugs</code> concern will assume that your model&#39;s slug attribute is named <code>&quot;slug&quot;</code>. If this is not the case, you may customise this inside your model, by adding the <code>$slugKey</code> property.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Sluggable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Concerns</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">Sluggable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Concerns<span class="token punctuation">\\</span>Slugs</span><span class="token punctuation">;</span>
    
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$slugKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;post-url&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alternative" tabindex="-1"><a class="header-anchor" href="#alternative" aria-hidden="true">#</a> Alternative</h3><p>Alternatively, you may specify the slug attribute name by overwriting the <code>getSlugKeyName()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Sluggable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Concerns</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">Sluggable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Concerns<span class="token punctuation">\\</span>Slugs</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getSlugKeyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;post-url&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-by-slug" tabindex="-1"><a class="header-anchor" href="#find-by-slug" aria-hidden="true">#</a> Find by slug</h2><p>The <code>findBySlug()</code> allows you to find a record that matches given slug. The method will return the first matching record or <code>null</code>, if none was found.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">findBySlug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;january-hits&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="find-by-slug-or-fail" tabindex="-1"><a class="header-anchor" href="#find-by-slug-or-fail" aria-hidden="true">#</a> Find by slug or fail</h2><p>Use <code>findBySlugOrFail()</code> method to ensure that a record exists or fail by throwing a <code>ModelNotFoundException</code>ยน exception.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">findBySlugOrFail</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sprint-soundtracks&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ยน: <em><code>\\Illuminate\\Database\\Eloquent\\ModelNotFoundException</code></em></p><div class="custom-container warning"><p class="custom-container-title">Caution</p><p>If your model does not guarantee unique slugs, and multiple records are found by the <code>findBySlugOrFail()</code> method, then an <code>\\Illuminate\\Database\\MultipleRecordsFoundException</code> is thrown.</p></div><h2 id="find-many-by-slugs" tabindex="-1"><a class="header-anchor" href="#find-many-by-slugs" aria-hidden="true">#</a> Find many by slugs</h2><p>To find multiple records by their slugs, you can use the <code>findManyBySlugs()</code> method. The method returns an Eloquent <code>Collection</code> with models matching the given slugs.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">findManyBySlugs</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sprint-soundtracks&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;january-hits&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;december-greatest-hits&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-or-create-by-slug" tabindex="-1"><a class="header-anchor" href="#find-or-create-by-slug" aria-hidden="true">#</a> Find or create by slug</h2><p>The <code>findOrCreateBySlug()</code> method attempts to find a record matching given slug. If none can be found, it will create a new record with provided attributes and return the model instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">findOrCreateBySlug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;april-morning-tunes&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;author&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Christina Stein&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;content&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Not nirvana or shangri-la, experience the heaven.&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="query-scopes" tabindex="-1"><a class="header-anchor" href="#query-scopes" aria-hidden="true">#</a> Query Scopes</h2>`,23),b={href:"https://laravel.com/docs/12.x/eloquent#local-scopes",target:"_blank",rel:"noopener noreferrer"},f=l(`<h3 id="whereslug" tabindex="-1"><a class="header-anchor" href="#whereslug" aria-hidden="true">#</a> <code>whereSlug</code></h3><p>Matches against given slug.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">whereSlug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;summer-hits&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="whereslugin" tabindex="-1"><a class="header-anchor" href="#whereslugin" aria-hidden="true">#</a> <code>whereSlugIn</code></h3><p>Matches against a list of slugs.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">whereSlugIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;autumn-hits&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;evening-soundtrack&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="soft-deleted-vs-finding-by-slugs" tabindex="-1"><a class="header-anchor" href="#soft-deleted-vs-finding-by-slugs" aria-hidden="true">#</a> Soft-deleted vs. Finding by slugs</h2>`,7),y={href:"https://laravel.com/docs/12.x/eloquent#soft-deleting",target:"_blank",rel:"noopener noreferrer"},w=n("em",null,'"find by slug"',-1),_=n("code",null,"withTrashed()",-1),x=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">withTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">whereSlug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-deleted-hit&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onward" tabindex="-1"><a class="header-anchor" href="#onward" aria-hidden="true">#</a> Onward</h2><p>For additional information, please review the source code of the <code>\\Aedart\\Database\\Models\\Concerns\\Slugs</code> trait.</p>`,3);function S(q,M){const o=p("ExternalLinkIcon"),e=p("router-link");return c(),u("div",null,[r,n("p",null,[s("If your model uses a "),n("a",k,[s("slug"),a(o)]),s(", then the "),g,s(" interface and "),h,s(" concern trait may offer some common utility methods.")]),n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#how-to-use"},{default:t(()=>[s("How to use")]),_:1})]),n("li",null,[a(e,{to:"#slug-attribute-name"},{default:t(()=>[s("Slug attribute name")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#alternative"},{default:t(()=>[s("Alternative")]),_:1})])])]),n("li",null,[a(e,{to:"#find-by-slug"},{default:t(()=>[s("Find by slug")]),_:1})]),n("li",null,[a(e,{to:"#find-by-slug-or-fail"},{default:t(()=>[s("Find by slug or fail")]),_:1})]),n("li",null,[a(e,{to:"#find-many-by-slugs"},{default:t(()=>[s("Find many by slugs")]),_:1})]),n("li",null,[a(e,{to:"#find-or-create-by-slug"},{default:t(()=>[s("Find or create by slug")]),_:1})]),n("li",null,[a(e,{to:"#query-scopes"},{default:t(()=>[s("Query Scopes")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#whereslug"},{default:t(()=>[s("whereSlug")]),_:1})]),n("li",null,[a(e,{to:"#whereslugin"},{default:t(()=>[s("whereSlugIn")]),_:1})])])]),n("li",null,[a(e,{to:"#soft-deleted-vs-finding-by-slugs"},{default:t(()=>[s("Soft-deleted vs. Finding by slugs")]),_:1})]),n("li",null,[a(e,{to:"#onward"},{default:t(()=>[s("Onward")]),_:1})])])]),v,n("p",null,[s("The following local "),n("a",b,[s("query scope methods"),a(o)]),s(" are offered:")]),f,n("p",null,[s("If your model supports "),n("a",y,[s("soft-deleting"),a(o)]),s(", and you attempt to find a record by a slug that has been soft deleted, then none of the "),w,s(" methods are going to return a match. To query models that have been soft deleted, you must make use of Eloquent's "),_,s(" method.")]),x])}const F=i(d,[["render",S],["__file","sluggable.html.vue"]]);export{F as default};
