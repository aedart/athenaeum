import{_ as n,p as s,q as a,a1 as e}from"./framework-efe98465.js";const t={},o=e(`<h1 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> Find</h1><p>Given that you know a resource&#39;s identifier, you can use the <code>find()</code> method to find a single resource.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$issue</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Found issue or null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="find-or-fail" tabindex="-1"><a class="header-anchor" href="#find-or-fail" aria-hidden="true">#</a> Find or fail</h2><p>You can use the <code>findOrFail()</code>, if you wish an exception to be thrown if the requested resource does not exist.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Redmine<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>NotFound</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token variable">$issue</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFound</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...do something when not found...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="associated-data" tabindex="-1"><a class="header-anchor" href="#associated-data" aria-hidden="true">#</a> Associated Data</h2><p>Both <code>find()</code> and <code>findOrFail()</code> methods support a list of &quot;associated data&quot; identifiers, as their second argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$issue</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;relations&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Issue with &quot;relations&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),p=[o];function i(c,l){return s(),a("div",null,p)}const u=n(t,[["render",i],["__file","find.html.vue"]]);export{u as default};
