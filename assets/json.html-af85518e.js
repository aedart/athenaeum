import{_ as e,M as o,p as t,q as p,R as n,t as s,N as i,a1 as c}from"./framework-efe98465.js";const l={},r=n("h1",{id:"json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),s(" Json")],-1),d={href:"http://php.net/manual/en/class.jsonserializable.php",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"JsonSerializable",-1),k=n("code",null,"json_encode()",-1),v=c(`<h2 id="encoding" tabindex="-1"><a class="header-anchor" href="#encoding" aria-hidden="true">#</a> Encoding</h2><h3 id="via-json-encode" tabindex="-1"><a class="header-anchor" href="#via-json-encode" aria-hidden="true">#</a> Via <code>json_encode()</code></h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Rian Dou&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">29</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above example will output the following Json string;</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Rian Dou&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-tojson" tabindex="-1"><a class="header-anchor" href="#via-tojson" aria-hidden="true">#</a> Via <code>toJson()</code></h3><p>You can also perform json serialization directly on the DTO, by invoking the <code>toJson()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Rian Dou&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">29</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The same as invoking json_encode($person);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="populate-from-json" tabindex="-1"><a class="header-anchor" href="#populate-from-json" aria-hidden="true">#</a> Populate from Json</h2><p>To populate a DTO directly from a Json string, use the <code>fromJson()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$json</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;{&quot;name&quot;:&quot;Miss Mossie Wehner Sr.&quot;,&quot;age&quot;:28}&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token class-name static-context">Person</span><span class="token operator">::</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span> <span class="token comment">// Miss Mossie Wehner Sr.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p><code>fromJson()</code> returns a new DTO instance.</p></div>`,12);function h(m,g){const a=o("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[s("All DTOs inherit from "),n("a",d,[u,i(a)]),s(". This means that when using "),k,s(", the DTO automatically ensures that its properties are serializable by the encoding method.")]),v])}const _=e(l,[["render",h],["__file","json.html.vue"]]);export{_ as default};
