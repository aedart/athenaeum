import{_ as i,M as p,p as l,q as r,R as n,t as a,N as s,U as t,a1 as c}from"./framework-efe98465.js";const u={},d=n("h1",{id:"memory",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#memory","aria-hidden":"true"},"#"),a(" Memory")],-1),k={href:"https://en.wikipedia.org/wiki/Byte",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Byte#Multiple-byte_units",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/International_System_of_Units",target:"_blank",rel:"noopener noreferrer"},b=c(`<p><strong>Example</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Memory</span><span class="token punctuation">;</span>

<span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token number">5_300_000_000</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">binaryFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4.9 GiB</span>
<span class="token keyword">echo</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">decimalFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5.3 GB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h={class:"table-of-contents"},g=c(`<h2 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> Create</h2><h3 id="from-bytes" tabindex="-1"><a class="header-anchor" href="#from-bytes" aria-hidden="true">#</a> From Bytes</h3><p>To create a new memory unit instance from bytes, use the static <code>unit()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token number">2_000_000</span><span class="token punctuation">;</span>
<span class="token variable">$unit</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from-string" tabindex="-1"><a class="header-anchor" href="#from-string" aria-hidden="true">#</a> From String</h3><p>You can also create a new instance from a string.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$unit</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.48 kb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1480</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The accepted format has to match the following:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>format = value space unit;
value = INT | FLOAT;
space = &quot;&quot; | &quot; &quot;; // optional whitespace character
unit = (unit symbol or name);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Given the above shown format, the following strings can all be parsed into a value unit.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;28 b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.48 kb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;3 megabyte&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2 MiB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$e</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1.1gigabyte&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$f</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;5 terabytes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$g</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2.35 PB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from-other-values" tabindex="-1"><a class="header-anchor" href="#from-other-values" aria-hidden="true">#</a> From Other Values</h3><p>Lastly, you can also create a unit instance from other units than bytes.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromKibibyte</span><span class="token punctuation">(</span><span class="token number">1540</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromMegabyte</span><span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromGibibyte</span><span class="token punctuation">(</span><span class="token number">1.33</span><span class="token punctuation">)</span>
<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="convert" tabindex="-1"><a class="header-anchor" href="#convert" aria-hidden="true">#</a> Convert</h2><p>The memory unit offers various conversion methods.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Memory</span><span class="token punctuation">;</span>

<span class="token variable">$gibibyte</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">fromGibibyte</span><span class="token punctuation">(</span><span class="token number">1.33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$gibibyte</span><span class="token operator">-&gt;</span><span class="token function">toMegabyte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1428.1</span>
<span class="token keyword">echo</span> <span class="token variable">$gibibyte</span><span class="token operator">-&gt;</span><span class="token function">toLegacyMegabyte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1361.9</span>
<span class="token comment">// ...etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="formatting" tabindex="-1"><a class="header-anchor" href="#formatting" aria-hidden="true">#</a> Formatting</h2><p>To format a unit to a &quot;human-readable&quot; string, you can use either of the following methods:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">binaryFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">decimalFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">legacyFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// binary using legacy metric name</span>
<span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Defaults to &quot;binary&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),f={href:"https://en.wikipedia.org/wiki/Byte#Multiple-byte_units",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"onward",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#onward","aria-hidden":"true"},"#"),a(" Onward")],-1),_=n("p",null,[a("Please review the source code of "),n("code",null,"Aedart\\Utils\\Memory"),a(" and "),n("code",null,"Aedart\\Utils\\Memory\\Unit"),a(" for additional information.")],-1);function x(w,M){const o=p("ExternalLinkIcon"),e=p("router-link");return l(),r("div",null,[d,n("p",null,[a("A memory utility that is able to convert between various order of magnitude. It uses "),n("a",k,[a("bytes"),s(o)]),a(" as its lowest value and offers support upto "),n("a",m,[a("Exabyte or Exbibyte"),s(o)]),a('. In addition, it is also able to format a size to a "human-readable".')]),n("p",null,[n("a",v,[a("SI"),s(o)]),a(' "decimal" and "binary" values are supported.')]),b,n("nav",h,[n("ul",null,[n("li",null,[s(e,{to:"#create"},{default:t(()=>[a("Create")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#from-bytes"},{default:t(()=>[a("From Bytes")]),_:1})]),n("li",null,[s(e,{to:"#from-string"},{default:t(()=>[a("From String")]),_:1})]),n("li",null,[s(e,{to:"#from-other-values"},{default:t(()=>[a("From Other Values")]),_:1})])])]),n("li",null,[s(e,{to:"#convert"},{default:t(()=>[a("Convert")]),_:1})]),n("li",null,[s(e,{to:"#formatting"},{default:t(()=>[a("Formatting")]),_:1})]),n("li",null,[s(e,{to:"#onward"},{default:t(()=>[a("Onward")]),_:1})])])]),g,n("p",null,[a("See "),n("a",f,[a("wiki"),s(o)]),a(", and source code for details.")]),y,_])}const q=i(u,[["render",x],["__file","memory.html.vue"]]);export{q as default};
