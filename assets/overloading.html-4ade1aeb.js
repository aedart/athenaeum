import{_ as r,M as t,p,q as i,R as n,t as e,N as s,U as l,a1 as c}from"./framework-efe98465.js";const d={},u=n("h1",{id:"property-overloading",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#property-overloading","aria-hidden":"true"},"#"),e(" Property overloading")],-1),m=n("p",null,"Each defined property is accessible in multiple ways, if a getter and or setter method has been defined for that given property.",-1),k={href:"https://en.wikipedia.org/wiki/Mutator_method",target:"_blank",rel:"noopener noreferrer"},v={href:"http://php.net/manual/en/language.oop5.overloading.php",target:"_blank",rel:"noopener noreferrer"},h={href:"http://php.net/manual/en/class.arrayaccess.php",target:"_blank",rel:"noopener noreferrer"},g=c(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Create a new instance of your DTO</span>
<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Name can be set using normal setter methods</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// But you can also just set the property itself</span>
<span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Jack&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Will automatically invoke setName()</span>

<span class="token comment">// And you can also set it, using an array-accessor</span>
<span class="token variable">$person</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Jane&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Will also automatically invoke setName()</span>

<span class="token comment">// ... //</span>

<span class="token comment">// Obtain age using the regular getter method</span>
<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Can also get it via invoking the property directly</span>
<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token punctuation">;</span> <span class="token comment">// Will automatically invoke getAge()</span>

<span class="token comment">// Lastly, it can also be access via an array-accessor</span>
<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Also invokes the getAge()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"TIP",-1),f={href:"https://en.wikipedia.org/wiki/Integrated_development_environment",target:"_blank",rel:"noopener noreferrer"},y={href:"http://www.phpdoc.org/",target:"_blank",rel:"noopener noreferrer"},w={href:"http://www.phpdoc.org/docs/latest/references/phpdoc/tags/property.html",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"@property",-1),$=n("h2",{id:"behind-the-scene",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#behind-the-scene","aria-hidden":"true"},"#"),e(" Behind the Scene")],-1),N=n("code",null,"Overload",-1),P=n("code",null,"Dto",-1);function A(I,q){const a=t("ExternalLinkIcon"),o=t("RouterLink");return p(),i("div",null,[u,m,n("p",null,[e("For additional information, please read about "),n("a",k,[e("Mutators and Accessor"),s(a)]),e(", "),n("a",v,[e("PHP's overloading"),s(a)]),e(", and "),n("a",h,[e("PHP's Array-Access"),s(a)])]),g,n("div",_,[b,n("p",null,[e("If you are using a modern "),n("a",f,[e("IDE"),s(a)]),e(", then it will most likely support "),n("a",y,[e("PHPDoc"),s(a)]),e(".")]),n("p",null,[e("By adding a "),n("a",w,[x,s(a)]),e(" tag to your interface or concrete implementation, your IDE will be able to auto-complete the overloadable properties.")])]),$,n("p",null,[e("The "),s(o,{to:"/archive/v2x/properties/"},{default:l(()=>[N]),_:1}),e(" component is responsible for handling the properties overloading of the "),P,e(" abstraction.")])])}const E=r(d,[["render",A],["__file","overloading.html.vue"]]);export{E as default};
