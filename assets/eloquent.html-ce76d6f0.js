import{_ as c,M as t,p as i,q as r,R as a,t as n,N as s,U as o,a1 as p}from"./framework-efe98465.js";const u={},d=a("h1",{id:"eloquent-models",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#eloquent-models","aria-hidden":"true"},"#"),n(" Eloquent Models")],-1),k=a("code",null,"Generator",-1),v={href:"https://laravel.com/docs/10.x/eloquent",target:"_blank",rel:"noopener noreferrer"},m=a("em",null,"nor fastest",-1),g=p(`<p>When creating an <code>Etag</code> for an Eloquent model, the default generator (<code>GenericGenerator</code>) will use the model&#39;s properties returned by <code>toArray()</code> and attempt to make a string representation of the entire array&#39;s content. It will work, but it can be very costly in terms of performance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Generator</span><span class="token punctuation">;</span>

<span class="token variable">$etag</span> <span class="token operator">=</span> <span class="token class-name static-context">Generator</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uses all properties returned by toArray()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h=p(`<h2 id="customise-model-etag-value" tabindex="-1"><a class="header-anchor" href="#customise-model-etag-value" aria-hidden="true">#</a> Customise Model ETag value</h2><p>The <code>EloquentEtag</code> trait enables your models to specify what value should be used, when creating an etag representation of the given model.</p><p>Consider the following example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Models</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>ETags<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>EloquentEtag</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">EloquentEtag</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">etagValue</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$weak</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
        <span class="token variable">$updatedAt</span> <span class="token operator">=</span> <span class="token function">optional</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">updated_at</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toRfc3339String</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
    
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$weak</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;users_<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>_<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$updatedAt</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">email</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
    
        <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;users_<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>_<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$email</span><span class="token punctuation">}</span></span>_<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$updatedAt</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: <em>For the sake of the example, an additional property is added (<code>email</code>) when value is to be used for a &quot;strong comparison&quot; etag. Feel free to ignore <code>$weak</code> if you do not require such logic.</em></p><p>Later in your application, you can simply invoke <code>getEtag()</code>, <code>getStrongEtag()</code> or <code>getWeakEtag()</code>, in order to create an etag representation of your model.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$etagA</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">getStrongEtag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$etagB</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">getWeakEtag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$etagA</span><span class="token punctuation">;</span> <span class="token comment">// E.g. &quot;5af037bcfaaaf3bcc564004f22362c9274434512&quot;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$etagB</span><span class="token punctuation">;</span> <span class="token comment">// E.g. W/&quot;846b00e9&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-etagvalue-method" tabindex="-1"><a class="header-anchor" href="#the-etagvalue-method" aria-hidden="true">#</a> The <code>etagValue()</code> method</h3><div class="custom-container warning"><p class="custom-container-title">Recommendation</p><p><em>By default, you are not required to implement / overwrite the <code>etagValue()</code> method.</em><em>However, it is recommended that you do overwrite this method and return the value(s) that best fit your needs.</em></p><p><em>Furthermore, you SHOULD handle situations when your model instance does not have the required attributes to return a value. E.g. by throwing an exception or default to other appropriate behaviour.</em></p></div>`,9);function b(f,y){const e=t("RouterLink"),l=t("ExternalLinkIcon");return i(),r("div",null,[d,a("p",null,[n("Although the default provided "),s(e,{to:"/archive/v7x/etags/etags/generators/"},{default:o(()=>[k]),_:1}),n(" is able to create an etag representation of your "),a("a",v,[n("Eloquent Models"),s(l)]),n(", it is NOT the best suited ("),m,n(") approach.")]),g,a("p",null,[n("If you are able to generalise what properties to use when creating etags, for all of your Eloquent Models, then you can "),s(e,{to:"/archive/v7x/etags/etags/generators/custom.html"},{default:o(()=>[n("create a custom generator")]),_:1}),n(" for your models. Alternatively, if you need to customise what properties must be used, per model, then the following approach could be more suitable.")]),h])}const _=c(u,[["render",b],["__file","eloquent.html.vue"]]);export{_ as default};
