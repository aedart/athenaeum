import{_ as c,M as l,p as r,q as d,R as s,N as a,U as e,t as n,a1 as i}from"./framework-efe98465.js";const u={},k=s("h1",{id:"release-notes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#release-notes","aria-hidden":"true"},"#"),n(" Release Notes")],-1),m={class:"table-of-contents"},h=s("h2",{id:"support-policy",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#support-policy","aria-hidden":"true"},"#"),n(" Support Policy")],-1),v={href:"https://laravel.com/docs/9.x/releases",target:"_blank",rel:"noopener noreferrer"},g=i('<table><thead><tr><th>Version</th><th>PHP</th><th>Laravel</th><th>Release</th><th>Security Fixes Until</th></tr></thead><tbody><tr><td><code>7.x</code></td><td><code>8.1 - 8.2</code></td><td><code>v10.x</code></td><td><em>~1st Quarter 2023</em></td><td>February 2024</td></tr><tr><td><code>6.x</code>*</td><td><code>8.0 - 8.1</code></td><td><code>v9.x</code></td><td>April 5th, 2022</td><td>February 2023</td></tr><tr><td><code>5.x</code></td><td><code>7.4</code></td><td><code>v8.x</code></td><td>October 4th, 2020</td><td>N/A</td></tr><tr><td><code>4.x</code></td><td><code>7.4</code></td><td><code>v7.x</code></td><td>April 15th, 2020</td><td>N/A</td></tr><tr><td><code>&lt; 4.x</code></td><td><em>-</em></td><td><em>-</em></td><td><em>See <code>CHANGELOG.md</code></em></td><td>N/A</td></tr></tbody></table><p><em>*: current supported version.</em></p><p><em>TBD: &quot;To be decided&quot;.</em></p><h2 id="v6-x-highlights" tabindex="-1"><a class="header-anchor" href="#v6-x-highlights" aria-hidden="true">#</a> <code>v6.x</code> Highlights</h2><p>These are some the new features of Athenaeum <code>v6.x</code>.</p><h3 id="php-v8-and-laravel-v9-x" tabindex="-1"><a class="header-anchor" href="#php-v8-and-laravel-v9-x" aria-hidden="true">#</a> PHP <code>v8</code> and Laravel <code>v9.x</code></h3>',6),b=s("code",null,"v8.0",-1),f={href:"https://laravel.com/docs/9.x/releases",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"v9.x",-1),y=s("code",null,"v8.1",-1),x=s("h3",{id:"improved-documentation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#improved-documentation","aria-hidden":"true"},"#"),n(" Improved Documentation")],-1),w=s("code",null,"6.x",-1),q=s("h3",{id:"union-types-support-in-dto",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#union-types-support-in-dto","aria-hidden":"true"},"#"),n(" Union Types support in DTO")],-1),A=s("code",null,"Dto",-1),M=s("code",null,"ArrayDto",-1),S={href:"https://php.watch/versions/8.0/union-types",target:"_blank",rel:"noopener noreferrer"},P=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$allowed</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;string|null&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Organisation</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$allowed</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;string|null&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;slogan&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;string|null&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Record</span> <span class="token keyword">extends</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>    
    <span class="token keyword">protected</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$allowed</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Person</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">Organisation</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;null&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ------------------------------------------------------------------------ //</span>

<span class="token comment">// Reference is a string...</span>
<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;https:://google.com&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>

<span class="token comment">// Reference becomes a Person...</span>
<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Jane Jensen&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Reference becomes an Organisation...</span>
<span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;reference&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Acme&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;slogan&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Building stuff...&#39;</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$record</span><span class="token operator">-&gt;</span><span class="token property">reference</span> <span class="token keyword">instanceof</span> <span class="token class-name">Organisation</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T=s("h3",{id:"streams",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#streams","aria-hidden":"true"},"#"),n(" Streams")],-1),$={href:"https://www.php-fig.org/psr/psr-7/#13-streams",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"StreamInterface",-1),N=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-file.txt&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Hi there&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$more</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;\\nMore things to show...&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$more</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// Hi there</span>
                       <span class="token comment">// More things to show...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mime-types-detection" tabindex="-1"><a class="header-anchor" href="#mime-types-detection" aria-hidden="true">#</a> MIME-types detection</h3><p>The <a href="./mime-types">MIME-types</a> packages offers a way to detect a file&#39;s MIME-type based on a small sample of its contents.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>MimeTypes<span class="token punctuation">\\</span>Detector</span><span class="token punctuation">;</span>

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-picture.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detect</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maintenance-modes" tabindex="-1"><a class="header-anchor" href="#maintenance-modes" aria-hidden="true">#</a> Maintenance Modes</h3>`,5),D=s("a",{href:"./maintenance/modes"},"Maintenance Modes",-1),H={href:"https://laravel.com/docs/9.x/configuration#maintenance-mode",target:"_blank",rel:"noopener noreferrer"},I=s("h3",{id:"where-not-in-slug",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#where-not-in-slug","aria-hidden":"true"},"#"),n(" Where not in slug...")],-1),L=s("code",null,"\\Aedart\\Database\\Models\\Concerns\\Slugs",-1),O=s("code",null,"whereSlugNotIn()",-1),E={href:"https://laravel.com/docs/9.x/eloquent#local-scopes",target:"_blank",rel:"noopener noreferrer"},F=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...inside your Eloquent model</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$query</span>
    <span class="token operator">-&gt;</span><span class="token function">whereSlugNotIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;alpha&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;beta&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;gamma&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="validate-json" tabindex="-1"><a class="header-anchor" href="#validate-json" aria-hidden="true">#</a> Validate JSON</h3><p>The <code>Json</code> utility has been given a new method, which can be used to determine if a value is a valid JSON encoded string.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Json</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;{ &quot;name&quot;: &quot;Sven&quot; }&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="memory-util" tabindex="-1"><a class="header-anchor" href="#memory-util" aria-hidden="true">#</a> Memory Util</h3><p>A new <code>Memory</code> util component has been added. It offers a few methods to help you deal with conversion and formatting.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Utils<span class="token punctuation">\\</span>Memory</span><span class="token punctuation">;</span>

<span class="token variable">$unit</span> <span class="token operator">=</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;3 MB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">toKibibyte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2929.7</span>

<span class="token comment">// ...or create from bytes...</span>
<span class="token keyword">echo</span> <span class="token class-name static-context">Memory</span><span class="token operator">::</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token number">482504</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">legacyFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 471.2 kB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),R=i('<h3 id="purpose-change-of-core-application" tabindex="-1"><a class="header-anchor" href="#purpose-change-of-core-application" aria-hidden="true">#</a> Purpose change of Core Application</h3><p>Perhaps a less important highlight, but still worth mentioning, is that the purpose of the <a href="./core">Core Application package</a> has changed from Athenaeum <code>v6.x</code>. The Core Application package was originally developed to act as a &quot;bridge&quot; for integrating Laravel components and services into legacy applications. This is no longer the case. Version <code>6.x</code> requires a minimum of PHP <code>v8.0</code> and it does not feel right to presume that the Core Application can be used as originally intended (<em>see original motivation in <a href="../v4x/core">version <code>v4.x</code></a></em>).</p><p>From version <code>6.x</code>, the Core Application is intended for the following purposes:</p><ul><li>Testing</li><li>Tinkering</li><li>Development of <strong>non-essential</strong> standalone applications</li></ul>',4),U=s("strong",null,"strongly encouraged",-1),V={href:"https://laravel.com/",target:"_blank",rel:"noopener noreferrer"},J=s("h2",{id:"changelog",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#changelog","aria-hidden":"true"},"#"),n(" Changelog")],-1),B={href:"https://github.com/aedart/athenaeum/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"};function j(G,W){const t=l("router-link"),o=l("ExternalLinkIcon"),p=l("RouterLink");return r(),d("div",null,[k,s("nav",m,[s("ul",null,[s("li",null,[a(t,{to:"#support-policy"},{default:e(()=>[n("Support Policy")]),_:1})]),s("li",null,[a(t,{to:"#v6-x-highlights"},{default:e(()=>[n("v6.x Highlights")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#php-v8-and-laravel-v9-x"},{default:e(()=>[n("PHP v8 and Laravel v9.x")]),_:1})]),s("li",null,[a(t,{to:"#improved-documentation"},{default:e(()=>[n("Improved Documentation")]),_:1})]),s("li",null,[a(t,{to:"#union-types-support-in-dto"},{default:e(()=>[n("Union Types support in DTO")]),_:1})]),s("li",null,[a(t,{to:"#streams"},{default:e(()=>[n("Streams")]),_:1})]),s("li",null,[a(t,{to:"#mime-types-detection"},{default:e(()=>[n("MIME-types detection")]),_:1})]),s("li",null,[a(t,{to:"#maintenance-modes"},{default:e(()=>[n("Maintenance Modes")]),_:1})]),s("li",null,[a(t,{to:"#where-not-in-slug"},{default:e(()=>[n("Where not in slug...")]),_:1})]),s("li",null,[a(t,{to:"#validate-json"},{default:e(()=>[n("Validate JSON")]),_:1})]),s("li",null,[a(t,{to:"#memory-util"},{default:e(()=>[n("Memory Util")]),_:1})]),s("li",null,[a(t,{to:"#purpose-change-of-core-application"},{default:e(()=>[n("Purpose change of Core Application")]),_:1})])])]),s("li",null,[a(t,{to:"#changelog"},{default:e(()=>[n("Changelog")]),_:1})])])]),h,s("p",null,[n("Athenaeum attempts to follow a release cycle that matches closely to that of "),s("a",v,[n("Laravel"),a(o)]),n(". However, due to limited amount of project maintainers, no guarantees can be provided.")]),g,s("p",null,[n("Athenaeum has been upgraded to usePHP "),b,n(" and "),s("a",f,[n("Laravel "),_,a(o)]),n(". Furthermore, PHP "),y,n(" is also supported.")]),x,s("p",null,[n("Several improvements have been made throughout the documentation. From version "),w,n(", a "),a(p,{to:"/archive/v6x/security.html"},{default:e(()=>[n("Security Policy")]),_:1}),n(", "),a(p,{to:"/archive/v6x/code-of-conduct.html"},{default:e(()=>[n("Code of Conduct")]),_:1}),n(" and an improved "),a(p,{to:"/archive/v6x/contribution-guide.html"},{default:e(()=>[n("Contribution Guide")]),_:1}),n(" is made available.")]),q,s("p",null,[n("The "),A,n(" and "),M,n(" now support "),s("a",S,[n("union types"),a(o)]),n(" for their properties. When populating a DTO, the most suitable match will bre chosen.")]),P,s("p",null,[n("See "),a(p,{to:"/archive/v6x/dto/nested-dto.html#union-types"},{default:e(()=>[n("Union Type Handling documentation")]),_:1}),n(" for additional examples.")]),T,s("p",null,[n("A package that offers an extended version of "),s("a",$,[n("PSR-7's"),a(o)]),n(" defined "),C,n("; a wrapper for common stream operations, mostly intended for file streams.")]),N,s("p",null,[n("A new "),D,n(" package has been added, which offers a few additional drivers that can be used for "),s("a",H,[n("storing application down"),a(o)]),n(" state.")]),I,s("p",null,[n("The "),L,n(" concern now offers a "),O,n(),s("a",E,[n("query scope"),a(o)]),n(" method.")]),F,s("p",null,[n("See "),a(p,{to:"/archive/v6x/utils/memory.html"},{default:e(()=>[n("component documentation")]),_:1}),n(" for more examples.")]),R,s("p",null,[n("If you are using the Core Application, for its original intent, then you are "),U,n(" to consider redesigning your application, e.g. rewrite your application using "),s("a",V,[n("Laravel"),a(o)]),n(" or other appropriate framework.")]),J,s("p",null,[n("Make sure to read the "),s("a",B,[n("changelog"),a(o)]),n(" for additional information about the latest release, new features, changes and bug fixes.")])])}const Q=c(u,[["render",j],["__file","index.html.vue"]]);export{Q as default};
