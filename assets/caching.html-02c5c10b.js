import{_ as l,M as p,p as u,q as d,R as s,t as n,N as a,U as e,a1 as i}from"./framework-efe98465.js";const r={},k=s("h2",{id:"http-caching",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#http-caching","aria-hidden":"true"},"#"),n(" Http Caching")],-1),h={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"ApiResource",-1),b={class:"table-of-contents"},f=i(`<h2 id="with-cache" tabindex="-1"><a class="header-anchor" href="#with-cache" aria-hidden="true">#</a> With Cache</h2><p>When you wish to apply caching headers to the response, use the <code>withCache()</code>. It will automatically apply a set of default caching headers, including an ETag and Last-Modified date of the underlying resource (<em>if possible</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The resulting Http response will look similar to the following:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTTP/1.0 200 OK
Cache-Control: no-cache, private
Content-Type:  application/json
Date:          Tue, 07 Feb 2023 09:04:36 GMT
Etag:          &quot;2716128cd82490cd01dddbeb2cf84030&quot;
Last-Modified: Tue, 07 Feb 2023 08:55:36 GMT

# ...body not shown...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customise-headers" tabindex="-1"><a class="header-anchor" href="#customise-headers" aria-hidden="true">#</a> Customise Headers</h3><p>To customise the default caching header, you can set them directly before creating a response, via the <code>withCache()</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withCache</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;no_cache&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you may also overwrite the <code>defaultCacheHeaders()</code> method inside your Api Resource instance.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...inside your Api Resource...</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">defaultCacheHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;etag&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getEtag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;last_modified&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getLastModifiedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;private&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>

        <span class="token string single-quoted-string">&#39;max_age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3600</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;s_maxage&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;must_revalidate&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;no_cache&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;no_store&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;no_transform&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;public&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;proxy_revalidate&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;immutable&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="etag" tabindex="-1"><a class="header-anchor" href="#etag" aria-hidden="true">#</a> ETag</h2>`,11),w=s("code",null,"withCache()",-1),_=s("code",null,"withEtag()",-1),y=s("code",null,"ETag",-1),x=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withEtag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;&quot;a89ca792333a300d726d40ecbbb9b043&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To remove an ETag from the response, you can use the <code>withoutEtag()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withoutEtag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: <em>Invoking <code>withoutEtag()</code> has no effect when no caching headers or ETag was set!</em></p><h2 id="last-modified-date" tabindex="-1"><a class="header-anchor" href="#last-modified-date" aria-hidden="true">#</a> Last Modified Date</h2><p>A similar behaviour is true for the Last Modified date, as for <a href="#etag">ETag</a>; a date is automatically attempted resolved from the underlying resource, when <code>withCache()</code> is invoked.</p><p>To specify a custom date, use <code>withLastModifiedDate()</code>. The method accepts a string date or <code>DateTimeInterface</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withLastModifiedDate</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To remove a Last Modified Date from the response, use <code>withoutLastModifiedDate()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/addresses/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddressResource</span><span class="token punctuation">(</span><span class="token class-name static-context">Address</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">withoutLastModifiedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: <em>Invoking <code>withoutLastModifiedDate()</code> has no effect when no caching headers or Last Modified date was set!</em></p>`,11);function T(q,C){const o=p("ExternalLinkIcon"),t=p("router-link"),c=p("RouterLink");return u(),d("div",null,[k,s("p",null,[n("Http "),s("a",h,[n("Caching headers"),a(o)]),n(", "),s("a",g,[n("ETag"),a(o)]),n(", and "),s("a",v,[n("Last-Modified date"),a(o)]),n(" can be applied directly on each "),m,n(", by means of a few helper methods.")]),s("nav",b,[s("ul",null,[s("li",null,[a(t,{to:"#http-caching"},{default:e(()=>[n("Http Caching")]),_:1})]),s("li",null,[a(t,{to:"#with-cache"},{default:e(()=>[n("With Cache")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#customise-headers"},{default:e(()=>[n("Customise Headers")]),_:1})])])]),s("li",null,[a(t,{to:"#etag"},{default:e(()=>[n("ETag")]),_:1})]),s("li",null,[a(t,{to:"#last-modified-date"},{default:e(()=>[n("Last Modified Date")]),_:1})])])]),f,s("p",null,[n("When invoking the "),w,n(" method, the Api Resource attempts to resolve a default ETag for its underlying resource. See "),a(c,{to:"/archive/v7x/etags/etags/eloquent.html"},{default:e(()=>[n("Eloquent ETag")]),_:1}),n(" for details.")]),s("p",null,[n("If you wish to specify a custom ETag, then use the "),_,n(" method. The method accepts either a string value or "),a(c,{to:"/archive/v7x/etags/etags/"},{default:e(()=>[y,n(" instance")]),_:1}),n(".")]),x])}const L=l(r,[["render",T],["__file","caching.html.vue"]]);export{L as default};
