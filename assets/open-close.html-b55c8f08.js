import{_ as c,M as i,p as r,q as d,R as n,N as a,U as e,t as s,a1 as o}from"./framework-efe98465.js";const u={},m=n("h1",{id:"open-and-close",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#open-and-close","aria-hidden":"true"},"#"),s(" Open and Close")],-1),h={class:"table-of-contents"},k=o(`<h2 id="how-to-open" tabindex="-1"><a class="header-anchor" href="#how-to-open" aria-hidden="true">#</a> How to open</h2><h3 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h3><p>Use the <code>open()</code> method to open a stream to a file or URL.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;recipients.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://www.php.net/manual/en/function.fopen",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"fopen()",-1),f=o(`<h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> Memory</h3><p>To open a stream to <code>php://memory</code>, use the <code>openMemory()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),b={href:"https://www.php.net/manual/en/wrappers.php.php#wrappers.php.memory",target:"_blank",rel:"noopener noreferrer"},_=o(`<h3 id="temporary" tabindex="-1"><a class="header-anchor" href="#temporary" aria-hidden="true">#</a> Temporary</h3><p>You may also open a stream to <code>php://temp</code>, by using <code>openTemporary()</code></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To specify the maximum memory limit, before PHP&#39;s internal mechanisms write to a physical file, use the 2nd argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openTemporary</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),y={href:"https://www.php.net/manual/en/wrappers.php.php#wrappers.php.memory",target:"_blank",rel:"noopener noreferrer"},w=o(`<h3 id="existing-resource" tabindex="-1"><a class="header-anchor" href="#existing-resource" aria-hidden="true">#</a> Existing resource</h3><p>If you already have an existing <code>resource</code> to a file or URL, you can &quot;wrap&quot; it into a stream component, by using the <code>make()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;team.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;w+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...Later in your application...</span>
<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">Stream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="existing-psr-stream" tabindex="-1"><a class="header-anchor" href="#existing-psr-stream" aria-hidden="true">#</a> Existing PSR-Stream</h3><p>Use the <code>makeFrom()</code> method when you need to wrap an existing <code>StreamInterface</code> component.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">Stream</span><span class="token operator">::</span><span class="token function">makeFrom</span><span class="token punctuation">(</span><span class="token variable">$psrStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The <code>makeFrom()</code> will automatically detach the given <code>StreamInterface</code> component&#39;s underlying <code>resource</code>. This means that you will no longer be able to use the provided PSR stream instance.</p></div><h3 id="splfileinfo" tabindex="-1"><a class="header-anchor" href="#splfileinfo" aria-hidden="true">#</a> SplFileInfo</h3><p><em><strong>Available since</strong> <code>v7.4.x</code></em></p>`,9),x={href:"https://www.php.net/manual/en/class.splfileinfo.php",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"SplFileInfo",-1),F=n("code",null,"openFileInfo()",-1),$=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openFileInfo</span><span class="token punctuation">(</span><span class="token variable">$uploadedFile</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),U={class:"custom-container tip"},q=n("p",{class:"custom-container-title"},"Filename",-1),P=n("code",null,"getClientOriginalName()",-1),C=n("code",null,"filename()",-1),T=n("h3",{id:"psr-uploaded-file",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#psr-uploaded-file","aria-hidden":"true"},"#"),s(" PSR Uploaded File")],-1),I=n("p",null,[n("em",null,[n("strong",null,"Available since"),s(),n("code",null,"v7.4.x")])],-1),N={href:"https://www.php-fig.org/psr/psr-7/#36-psrhttpmessageuploadedfileinterface",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"openUploadedFile()",-1),L=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openUploadedFile</span><span class="token punctuation">(</span><span class="token variable">$psrUploadedFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),E={class:"custom-container warning"},H=o(`<p class="custom-container-title">WARNING</p><p>Unless specified otherwise, the <code>openUploadedFile()</code> method will automatically detach the uploaded file&#39;s underlying stream. If you wish to avoid this, then set the <code>$asCopy</code> argument to true (<em>defaults to false</em>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Copies the PSR stream into the file stream...</span>
<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">openUploadedFile</span><span class="token punctuation">(</span>
    <span class="token argument-name">file</span><span class="token punctuation">:</span> <span class="token variable">$psrUploadedFile</span><span class="token punctuation">,</span>
    <span class="token argument-name">asCopy</span><span class="token punctuation">:</span> <span class="token constant boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),O=n("code",null,"openUploadedFile()",-1),D={class:"custom-container tip"},M=n("p",{class:"custom-container-title"},"Filename",-1),A=n("code",null,"getClientFilename()",-1),z=n("code",null,"filename()",-1),W=o(`<h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> Lazy</h3><p>Lastly, you may also open a stream after you have created a <code>Stream</code> or <code>FileStream</code>, using a callback. The <code>openUsing()</code> accepts a callback, which must return a valid <code>resource</code> of the type &quot;stream&quot;.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Streams<span class="token punctuation">\\</span>FileStream</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...later in your application...</span>
<span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">openUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;countries.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Info</p><p><code>openUsing()</code> will fail if the stream instance already has a valid <code>resource</code> specified (<em>when the stream is already open</em>). Use the <code>isOpen()</code> method to determine if a stream can be opened.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">openUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;countries.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...do something else...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="cloning" tabindex="-1"><a class="header-anchor" href="#cloning" aria-hidden="true">#</a> Cloning</h3><div class="custom-container warning"><p class="custom-container-title">Not supported</p><p>Cloning an existing stream instance is not supported and will result in <code>StreamException</code> to be thrown.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;locations.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$clone</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// Fails - StreamException is thrown!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="how-to-close" tabindex="-1"><a class="header-anchor" href="#how-to-close" aria-hidden="true">#</a> How to close</h2><h3 id="close-stream" tabindex="-1"><a class="header-anchor" href="#close-stream" aria-hidden="true">#</a> Close stream</h3>`,8),B=n("code",null,"close()",-1),V=n("code",null,"resource",-1),Y={href:"https://www.php.net/manual/en/function.fclose",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"fclose()",-1),j=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="detaching-resource" tabindex="-1"><a class="header-anchor" href="#detaching-resource" aria-hidden="true">#</a> Detaching resource</h3><p>If you do not wish to close the stream, but you want to detach - to separate the underlying <code>resource</code>, from the stream instance, then you can use the <code>detach()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...stream instance is now useless!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Caution</p><p>When you detach the underlying <code>resource</code> from the stream, the stream instance becomes useless. You SHOULD avoid reusing or reopening a <code>resource</code>, when such is the case.</p><p><strong>Not recommended</strong></p><p>The following example is NOT recommended (<em>even though it is possible</em>)!</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...later... attempt to re-open using same resource</span>
<span class="token comment">// and same stream instance - NOT RECOMMENDED!</span>
<span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">openUsing</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Future versions of <code>Stream</code> and <code>FileStream</code> may prohibit this behaviour.</p></div>`,5);function J(K,Q){const t=i("router-link"),p=i("ExternalLinkIcon"),l=i("RouterLink");return r(),d("div",null,[m,n("nav",h,[n("ul",null,[n("li",null,[a(t,{to:"#how-to-open"},{default:e(()=>[s("How to open")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#file"},{default:e(()=>[s("File")]),_:1})]),n("li",null,[a(t,{to:"#memory"},{default:e(()=>[s("Memory")]),_:1})]),n("li",null,[a(t,{to:"#temporary"},{default:e(()=>[s("Temporary")]),_:1})]),n("li",null,[a(t,{to:"#existing-resource"},{default:e(()=>[s("Existing resource")]),_:1})]),n("li",null,[a(t,{to:"#existing-psr-stream"},{default:e(()=>[s("Existing PSR-Stream")]),_:1})]),n("li",null,[a(t,{to:"#splfileinfo"},{default:e(()=>[s("SplFileInfo")]),_:1})]),n("li",null,[a(t,{to:"#psr-uploaded-file"},{default:e(()=>[s("PSR Uploaded File")]),_:1})]),n("li",null,[a(t,{to:"#lazy"},{default:e(()=>[s("Lazy")]),_:1})]),n("li",null,[a(t,{to:"#cloning"},{default:e(()=>[s("Cloning")]),_:1})])])]),n("li",null,[a(t,{to:"#how-to-close"},{default:e(()=>[s("How to close")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#close-stream"},{default:e(()=>[s("Close stream")]),_:1})]),n("li",null,[a(t,{to:"#detaching-resource"},{default:e(()=>[s("Detaching resource")]),_:1})])])])])]),k,n("p",null,[s("Behind the scene, PHP's "),n("a",v,[g,a(p)]),s(" is used.")]),f,n("p",null,[s("See "),n("a",b,[s("PHP Documentation"),a(p)]),s(" for additional details.")]),_,n("p",null,[s("See "),n("a",y,[s("PHP Documentation"),a(p)]),s(" for additional details.")]),w,n("p",null,[s("When working with uploaded files, e.g. from Laravel or Symfony ("),n("em",null,[n("a",x,[S,s(" instances"),a(p)])]),s("), then you can open a file stream using the "),F,s(" method.")]),$,n("div",U,[q,n("p",null,[s("For Laravel and Symfony, the uploaded file's "),P,s(" return value is used as the stream's "),a(l,{to:"/archive/v7x/streams/usage/filename.html"},{default:e(()=>[C,s(" value")]),_:1}),s(".")])]),T,I,n("p",null,[s("You may also create a file stream instance for an existing "),n("a",N,[s("PSR-7 Uploaded File"),a(p)]),s(" instance, using the "),R,s(" method.")]),L,n("div",E,[H,n("p",null,[s("For more information, see the source code of "),O,s(" and see also "),a(l,{to:"/archive/v7x/streams/usage/writing.html#copy-from"},{default:e(()=>[s("copy from documentation")]),_:1}),s(".")])]),n("div",D,[M,n("p",null,[s("The uploaded file's "),A,s(" return value is used as the stream's "),a(l,{to:"/archive/v7x/streams/usage/filename.html"},{default:e(()=>[z,s(" value")]),_:1}),s(".")])]),W,n("p",null,[s("When you need to close a stream, invoke the "),B,s(" method. The underlying "),V,s(" will be detached and closed using PHP's "),n("a",Y,[G,a(p)]),s(".")]),j])}const Z=c(u,[["render",J],["__file","open-close.html.vue"]]);export{Z as default};
