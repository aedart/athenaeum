import{_ as t,M as o,p as i,q as c,R as e,t as n,N as s,a1 as l}from"./framework-efe98465.js";const r={},p=l(`<h1 id="registerasapplication" tabindex="-1"><a class="header-anchor" href="#registerasapplication" aria-hidden="true">#</a> <code>registerAsApplication()</code></h1><p>Sometimes, when testing your custom Laravel components and services, it can be useful to &quot;trick&quot; them in believing that the <code>Container</code> is the <code>Application</code>. This can be achieved via the <code>registerAsApplication()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Aedart<span class="token punctuation">\\</span>Container<span class="token punctuation">\\</span>IoC</span><span class="token punctuation">;</span>

<span class="token variable">$ioc</span> <span class="token operator">=</span> <span class="token class-name static-context">IoC</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$ioc</span><span class="token operator">-&gt;</span><span class="token function">registerAsApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d=e("code",null,"IoC",-1),h=e("code",null,"app",-1),u=e("em",null,"Laravel Application",-1),_={href:"https://laravel.com/docs/7.x/facades",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"Facade",-1),m=e("code",null,"IoC",-1),k={class:"custom-container danger"},b=e("p",{class:"custom-container-title"},"Warning",-1),g=e("p",null,[e("strong",null,"DO NOT USE THIS METHOD"),n(" inside your normal Laravel Application. It will highjack the "),e("code",null,"app"),n(" binding, causing all kinds of unexpected and undesirable behaviour. The intended purposes of this method is "),e("strong",null,"for testing only!")],-1),f=e("h4",{id:"why-is-this-available",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#why-is-this-available","aria-hidden":"true"},"#"),n(" Why is this available?")],-1),x={href:"https://laravel.com/docs/7.x/facades",target:"_blank",rel:"noopener noreferrer"},A={href:"https://laravel.com/docs/7.x/providers#the-boot-method",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"IoC",-1),I={href:"https://github.com/laravel/framework/blob/6.x/src/Illuminate/Contracts/Foundation/Application.php",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"Application",-1),C=e("strong",null,"considered to be hack!",-1),T=e("p",null,"Be careful how you choose to make use of this, if at all!",-1);function L(N,S){const a=o("ExternalLinkIcon");return i(),c("div",null,[p,e("p",null,[n("When invoked, the method will bind the "),d,n(" as the "),h,n(" ("),u,n("). It will also set the "),e("a",_,[v,s(a)]),n("'s application instance to be the "),m,n(". This will allow you to use other facades and ensure that they are able to resolve their bindings, provided your have bound them inside the service container.")]),e("div",k,[b,g,f,e("p",null,[n("Sometimes it's a bit faster to test certain components, without having a full Laravel Application up and running. This can for instance be "),e("a",x,[n("Facades"),s(a)]),n(" or a custom "),e("a",A,[n("Service Provider's boot method"),s(a)]),n(". However, using this method when the "),w,n(" is not a superclass to a Laravel "),e("a",I,[y,s(a)]),n(", is "),C]),T])])}const B=t(r,[["render",L],["__file","reg-as-app.html.vue"]]);export{B as default};
