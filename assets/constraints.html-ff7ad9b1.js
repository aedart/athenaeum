import{_ as c,M as i,p as r,q as u,R as n,t as s,N as a,U as e,a1 as p}from"./framework-efe98465.js";const d={},k=n("h1",{id:"constraints-processor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#constraints-processor","aria-hidden":"true"},"#"),s(" Constraints Processor")],-1),m=n("code",null,"ConstraintsProcessor",-1),v=n("code",null,"where column operator value",-1),g={href:"https://jsonapi.org/format/#fetching-filtering",target:"_blank",rel:"noopener noreferrer"},h=p("<ul><li><code>?identifier[property][operator]=value</code></li></ul><p><strong>Example</strong></p><ul><li><code>?filter[name][contains]=Smith&amp;filter[is_admin][eq]=true</code></li></ul><p>The shown query string will create a query that matches records where <code>name</code> contains <code>Smith</code> and <code>is_admin</code> state is set to <code>true</code>.</p>",4),b={class:"table-of-contents"},f=n("h2",{id:"setup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#setup","aria-hidden":"true"},"#"),s(" Setup")],-1),y=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Processors<span class="token punctuation">\\</span>ConstraintsProcessor</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>NumericFilter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>StringFilter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>BooleanFilter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>DatetimeFilter</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFilterBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">ConstraintsProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
                    <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">NumericFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">StringFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">StringFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;administrator&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BooleanFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;email_verified&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">DatetimeFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;created_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">DatetimeFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token string single-quoted-string">&#39;updated_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">DatetimeFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">)</span>
            
            <span class="token comment">// ...etc</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="properties-to-column-names" tabindex="-1"><a class="header-anchor" href="#properties-to-column-names" aria-hidden="true">#</a> Properties to column names</h3>`,2),w=n("code",null,"SortingProcessor",-1),_=n("code",null,"propertiesToColumns()",-1),x=p(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">ConstraintsProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">StringFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">StringFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;administrator&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BooleanFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email_verified&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">DatetimeFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">propertiesToColumns</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;administrator&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;is_admin&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email_verified&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;email_verified_at&#39;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maximum-amount-of-allowed-filters" tabindex="-1"><a class="header-anchor" href="#maximum-amount-of-allowed-filters" aria-hidden="true">#</a> Maximum amount of allowed filters</h3><p>By default, <code>10</code> properties are allowed requested to be filtered. When more are requested, then a validation exception will be thrown that results in a <code>422 Unprocessable Entity</code> response. To change this limit, use the <code>maxFilters()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">ConstraintsProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">maxFilters</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
        <span class="token comment">// ...remaining processor config. not shown ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logical-and-or" tabindex="-1"><a class="header-anchor" href="#logical-and-or" aria-hidden="true">#</a> Logical <code>AND</code> / <code>OR</code></h3>`,5),q=n("code",null,"AND",-1),F=n("code",null,"OR",-1),T=n("code",null,"MatchingProcessor",-1),B=n("h2",{id:"available-filters",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#available-filters","aria-hidden":"true"},"#"),s(" Available Filters")],-1),A=n("code",null,"Aedart\\Filters\\Query\\Filters\\Fields\\",-1),C=p(`<ul><li><code>NumericFilter</code> matches value against numeric column</li><li><code>StringFilter</code> matches value against string column</li><li><code>BooleanFilter</code> marches value against boolean column</li><li><code>DateFilter</code> matches value against date column (<em><code>Y-m-d</code></em>)</li><li><code>DatetimeFilter</code> matches value against datetime column (<em><code>Y-m-d H:i:s</code></em>)</li><li><code>UTCDatetimeFilter</code> matches value against datetime column (<em><code>Y-m-d H:i:s</code></em>). Given date is converted to UTC, before matched against database value</li><li><code>BelongsToFilter</code> able to constrain relations of the type &quot;belongs to&quot; (<em>see further below for example</em>)</li></ul><h3 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h3><p>All available filters support a variety of operators, which can be requested in the http query string. These operators are either mapped directly to an SQL comparison operator or function, which is then applied in the query.</p><p><strong>Example</strong></p><ul><li><code>eq</code> = <code>=</code></li><li><code>ne</code> = <code>!=</code></li><li><code>gt</code> = <code>&gt;</code></li><li><code>lt</code> = <code>&lt;</code></li><li><code>is_null</code> = <code>is null</code>,</li><li><code>contains</code> = <code>like %value%</code></li></ul><p>If an unsupported operator is requested, then the request is aborted - a <code>422 Unprocessable Entity</code> response is returned. Please review each filter&#39;s source for a full list of supported operators.</p><h3 id="create-your-own-filters" tabindex="-1"><a class="header-anchor" href="#create-your-own-filters" aria-hidden="true">#</a> Create your own filters</h3><p>If the available filters are not sufficient, then you can create your own filters, which can be supported by the &quot;constraints&quot; processor. The easiest way of doing so, is by extending the <code>BaseFieldFilter</code> abstraction.</p><p><strong>Example</strong>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>BaseFieldFilter</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyFilter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFieldFilter</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$operator</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$operator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;special&#39;</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">buildDefaultConstraint</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">operatorAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;eq&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;=&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;ne&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;!=&#39;</span><span class="token punctuation">,</span>

            <span class="token string single-quoted-string">&#39;special&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;special&#39;</span> 
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">assertValue</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// The assert method can be used to validate the requested value.</span>
        <span class="token comment">// Throw an InvalidArgumentException, if value is invalid.</span>
        <span class="token comment">// The processor will take care of the rest...</span>
    
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token variable">$value</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Value must be above 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="belongstofilter-example" tabindex="-1"><a class="header-anchor" href="#belongstofilter-example" aria-hidden="true">#</a> <code>BelongsToFilter</code> Example</h3><p>The <code>BelongsToFilter</code> is slightly more special in that you need to create an instance and specify the name of the relation you wish to constrain.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>BelongsToFilter</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">ConstraintsProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;user&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BelongsToFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">setRelation</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;owner&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                
            <span class="token comment">// ...remaining not shown...</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">propertiesToColumns</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;user&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;owner.id&#39;</span><span class="token punctuation">,</span> <span class="token comment">// relation + name of column in related model</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-relation" tabindex="-1"><a class="header-anchor" href="#string-relation" aria-hidden="true">#</a> String relation</h4><p>By default, the belongs to filter assumes that the relation value to constrain is an integer. If you wish to constrain a string value instead, e.g. a string column, then use the <code>usingStringValue()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;filter&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">ConstraintsProcessor</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;category&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">BelongsToFilter</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">setRelation</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;categories&#39;</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">usingStringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                
            <span class="token comment">// ...remaining not shown...</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">propertiesToColumns</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;category&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;categories.slug&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function S(P,D){const l=i("ExternalLinkIcon"),t=i("router-link"),o=i("RouterLink");return r(),u("div",null,[k,n("p",null,[s("As the name implies, the "),m,s(' is able to create constraint query filters, e.g. "'),v,s('". The http query string format is slightly inspired by '),n("a",g,[s("JSON API"),a(l)]),s(". The accepted format is:")]),h,n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#setup"},{default:e(()=>[s("Setup")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#properties-to-column-names"},{default:e(()=>[s("Properties to column names")]),_:1})]),n("li",null,[a(t,{to:"#maximum-amount-of-allowed-filters"},{default:e(()=>[s("Maximum amount of allowed filters")]),_:1})]),n("li",null,[a(t,{to:"#logical-and-or"},{default:e(()=>[s("Logical AND / OR")]),_:1})])])]),n("li",null,[a(t,{to:"#available-filters"},{default:e(()=>[s("Available Filters")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#operators"},{default:e(()=>[s("Operators")]),_:1})]),n("li",null,[a(t,{to:"#create-your-own-filters"},{default:e(()=>[s("Create your own filters")]),_:1})]),n("li",null,[a(t,{to:"#belongstofilter-example"},{default:e(()=>[s("BelongsToFilter Example")]),_:1})])])])])]),f,n("p",null,[s("When configuring the processor, you must specify the properties and their corresponding "),a(o,{to:"/archive/v6x/database/query/criteria.html#field-criteria-field-filter"},{default:e(()=>[s('"field filter"')]),_:1}),s(" that can be applied, when requested.")]),y,n("p",null,[s("Similar to how you can map properties to table column names on the "),a(o,{to:"/archive/v6x/filters/predefined/sort.html#properties-to-column-names"},{default:e(()=>[w]),_:1}),s(', the "constraints" processor also offers a '),_,s(" method, which can be used to map requested properties to table columns.")]),x,n("p",null,[s("When multiple properties are requested, then constraint filters are applied using logical "),q,s(" operator. If you wish to allow "),F,s(" operator, then please see the "),a(o,{to:"/archive/v6x/filters/predefined/match.html"},{default:e(()=>[T,s(" documentation")]),_:1}),s(" for details.")]),B,n("p",null,[s("Within the "),A,s(" namespace, you will find a few predefined "),a(o,{to:"/archive/v6x/database/query/criteria.html#field-criteria-field-filter"},{default:e(()=>[s('"field filter"')]),_:1}),s(". These can be applied per allowed filterable property.")]),C])}const N=c(d,[["render",S],["__file","constraints.html.vue"]]);export{N as default};
