import{_ as i,M as e,p as l,q as u,R as s,t as n,N as a,U as t,a1 as r}from"./framework-efe98465.js";const d={},k=s("h1",{id:"delete-resource",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#delete-resource","aria-hidden":"true"},"#"),n(" Delete Resource")],-1),v={href:"https://laravel.com/docs/12.x/eloquent#soft-deleting",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"DeleteSingleResourceRequest",-1),h={class:"table-of-contents"},b=r(`<p><strong>Example Request</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Api<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Resources<span class="token punctuation">\\</span>DeleteSingleResourceRequest</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">DeleteUser</span> <span class="token keyword">extends</span> <span class="token class-name">DeleteSingleResourceRequest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">findRecordOrFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Model</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">mustEvaluatePreconditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example Action</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">DeleteUser</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">record</span><span class="token punctuation">;</span>
    
    <span class="token comment">// E.g. soft-delete</span>
    <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name static-context">UserResource</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.destroy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="authorisation" tabindex="-1"><a class="header-anchor" href="#authorisation" aria-hidden="true">#</a> Authorisation</h2><p>Authorisation checks is performed by the <code>authorizeFoundRecord()</code> method (<em>see source code for details</em>). The request will check against a <code>destroy</code> ability. From the above shown examples, a <code>users.destroy</code> ability is checked.</p><h2 id="request-preconditions" tabindex="-1"><a class="header-anchor" href="#request-preconditions" aria-hidden="true">#</a> Request Preconditions</h2>`,7);function f(g,_){const p=e("ExternalLinkIcon"),o=e("router-link"),c=e("RouterLink");return l(),u("div",null,[k,s("p",null,[n("For requests that are intended to delete or "),s("a",v,[n("soft-delete"),a(p)]),n(" a resource, you can use the "),m,n(" abstraction.")]),s("nav",h,[s("ul",null,[s("li",null,[a(o,{to:"#authorisation"},{default:t(()=>[n("Authorisation")]),_:1})]),s("li",null,[a(o,{to:"#request-preconditions"},{default:t(()=>[n("Request Preconditions")]),_:1})])])]),b,s("p",null,[n("See "),a(c,{to:"/archive/current/http/api/requests/show-single.html#request-preconditions"},{default:t(()=>[n("Show Request")]),_:1}),n(" for additional information.")])])}const q=i(d,[["render",f],["__file","delete-single.html.vue"]]);export{q as default};
