import{_ as i,M as l,p as c,q as r,R as n,N as a,U as t,t as s,a1 as o}from"./framework-efe98465.js";const u={},d=n("h1",{id:"reading",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reading","aria-hidden":"true"},"#"),s(" Reading")],-1),k={class:"table-of-contents"},b=o(`<h2 id="determine-if-readable" tabindex="-1"><a class="header-anchor" href="#determine-if-readable" aria-hidden="true">#</a> Determine if Readable</h2><p>The <code>isReadable()</code> determines if a stream is readable or not.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;people.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;contacts.txt&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">-&gt;</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> Read</h2><p>The <code>read()</code> returns up to the specified amount of bytes requested read. Fewer bytes may be returned, if underlying resource does not contain the amount of bytes requested.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50 bytes of data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="remaining-content" tabindex="-1"><a class="header-anchor" href="#remaining-content" aria-hidden="true">#</a> Remaining Content</h3><p>To obtain the remaining contents of a stream, use the <code>getContents()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$stream</span>
    <span class="token operator">-&gt;</span><span class="token function">positionAt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="all-contents" tabindex="-1"><a class="header-anchor" href="#all-contents" aria-hidden="true">#</a> All Contents</h3><p>If you wish to obtain the entire contents of a stream, then you can do so by either casting the stream to a <code>string</code> or manually invoking the <code>__toString()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$stream</span><span class="token punctuation">;</span> <span class="token comment">// All contents of stream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Info</p><p>The stream&#39;s read/write position is automatically set to <code>0</code> (<em>the beginning of the stream</em>), before the content is returned when cast to a string.</p></div><h2 id="read-characters" tabindex="-1"><a class="header-anchor" href="#read-characters" aria-hidden="true">#</a> Read Characters</h2><h3 id="single-character" tabindex="-1"><a class="header-anchor" href="#single-character" aria-hidden="true">#</a> Single Character</h3><p>The <code>readCharacter()</code> method is useful when you wish to read a single character from a stream.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read a character...</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
<span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),v={href:"https://www.php.net/manual/en/function.fgetc",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"fgetc()",-1),m=n("h3",{id:"all-characters",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#all-characters","aria-hidden":"true"},"#"),s(" All Characters")],-1),g=n("code",null,"readAllCharacters()",-1),f={href:"https://www.php.net/manual/en/language.types.iterable.php",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"iterable",-1),w=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read all characters...</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$characters</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readAllCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$characters</span> <span class="token keyword">as</span> <span class="token variable">$character</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$character</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read-lines" tabindex="-1"><a class="header-anchor" href="#read-lines" aria-hidden="true">#</a> Read Lines</h2><h3 id="single-line" tabindex="-1"><a class="header-anchor" href="#single-line" aria-hidden="true">#</a> Single Line</h3><p>You can use the <code>readLine()</code> method to read a single line of content from the stream.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;a\\nb\\nc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read a line...</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
<span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),_={href:"https://www.php.net/manual/en/function.fgets",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"fgets()",-1),q=o(`<div class="custom-container tip"><p class="custom-container-title">Note</p><p>The <code>readLine()</code> also includes newline character in its output.</p></div><h4 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> Length</h4><p>The <code>readLine()</code> method also accepts optional <code>$length</code> argument. When length is specified, reading stops when either of these conditions are met.</p><ul><li>Length - 1 byte (<em>length minus 1 byte</em>) has been reached</li><li>Newline character is reached (<em>included in output</em>)</li><li>EOF is reached.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;aaa\\nbbb\\nccc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read length...</span>
<span class="token keyword">echo</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aa (length minus 1 byte)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="single-line-until" tabindex="-1"><a class="header-anchor" href="#single-line-until" aria-hidden="true">#</a> Single Line Until</h3><p>Use the <code>readLineUntil()</code> method to read a line until a specified length and or delimiter is reached. This method stops reading when either of the these conditions are met:</p><ul><li>Length - 1 byte (<em>length minus 1 byte</em>) has been reached</li><li>Delimiter character is reached (<em>NOT included in output</em>)</li><li>EOF is reached.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;a;b;c;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token variable">$delimiter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;;&#39;</span>

<span class="token comment">// Read until length/delimiter</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLineUntil</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">,</span> <span class="token variable">$delimiter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLineUntil</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">,</span> <span class="token variable">$delimiter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readLineUntil</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">,</span> <span class="token variable">$delimiter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
<span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="all-lines" tabindex="-1"><a class="header-anchor" href="#all-lines" aria-hidden="true">#</a> All Lines</h3>`,10),x=n("code",null,"readAllLines()",-1),S={href:"https://www.php.net/manual/en/language.types.iterable.php",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"iterable",-1),L=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;a\\nb\\nc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read all lines...</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$lines</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$lines</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$line</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Automatic Trim</p><p>Unlike the <code>readLine()</code> method, <code>readAllLines()</code> automatically trims all lines before returning. This means that newline character is NOT included in the output.</p></div><h4 id="alternative-way-to-read-all-lines" tabindex="-1"><a class="header-anchor" href="#alternative-way-to-read-all-lines" aria-hidden="true">#</a> Alternative way to read all lines</h4>`,3),T=n("code",null,"Stream",-1),R=n("code",null,"FileStream",-1),C={href:"https://www.php.net/manual/en/class.iteratoraggregate",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"IteratorAggregate",-1),U=n("code",null,"readAllLines()",-1),I=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Iterate through stream&#39;s lines</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$stream</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...Do something with line...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="all-lines-using-delimiter" tabindex="-1"><a class="header-anchor" href="#all-lines-using-delimiter" aria-hidden="true">#</a> All Lines (Using delimiter)</h3><p>You can also iterate though all lines using the <code>readAllUsingDelimiter</code>. It behaves similar to the <code>readLineUntil()</code> method. In the following example, each line is returned when either of these conditions are met:</p><ul><li>Length - 1 byte (<em>length minus 1 byte</em>) has been reached</li><li>Delimiter character is reached (<em>NOT included in output</em>)</li><li>EOF is reached.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;aa||bb||cc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read all lines using a length / delimiter</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$iterator</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readAllUsingDelimiter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;||&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$iterator</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$line</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// aabbcc</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scan-format" tabindex="-1"><a class="header-anchor" href="#scan-format" aria-hidden="true">#</a> Scan Format</h2>`,6),N=n("code",null,"scan()",-1),G=n("code",null,"$format",-1),D={href:"https://www.php.net/manual/en/function.fscanf",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"fscanf()",-1),O=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;aa-\\nbb-\\ncc-\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Scan according to format</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$scanned</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%s-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$scanned</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// aa-bb-cc-</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>If the stream you are processing is of considerable size, and you need to scan the entire content, then you should use the <code>readAllUsingFormat()</code> instead of <code>scan()</code>.</p></div><h3 id="scan-all" tabindex="-1"><a class="header-anchor" href="#scan-all" aria-hidden="true">#</a> Scan All</h3><p>Use <code>readAllUsingFormat()</code> to scan entire stream&#39;s content according to specified format.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;aa||\\nbb||\\ncc||\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Scan according to format</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$all</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readAllUsingFormat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%s||&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$all</span> <span class="token keyword">as</span> <span class="token variable">$scanned</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$scanned</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// aa||bb||cc||</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read-chunks" tabindex="-1"><a class="header-anchor" href="#read-chunks" aria-hidden="true">#</a> Read Chunks</h2><p>You can also read a stream&#39;s content in chunks of a specified size. The <code>readAllInChunks()</code> method accepts an optional <code>$size</code> argument, which determine the amount of bytes to be read per &quot;chunk&quot;.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">positionToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read all in chunks of 1 byte</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$chunks</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readAllInChunks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$chunks</span> <span class="token keyword">as</span> <span class="token variable">$chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$chunk</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read-all-using-callback" tabindex="-1"><a class="header-anchor" href="#read-all-using-callback" aria-hidden="true">#</a> Read All using Callback</h2>`,9),P=n("code",null,"readAllUsing()",-1),B={href:"https://www.php.net/manual/en/language.types.iterable.php",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"iterable",-1),z=o(`<p>The given callback will receive the stream&#39;s underlying <code>resource</code> as argument.</p><p><em>The following example corresponds to the same result as invoking the <code>readAllInChunks()</code> method.</em></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Given the following...</span>
<span class="token variable">$resource</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://memory&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;r+b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;aabbcc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token class-name static-context">FileStream</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Read all using custom callback</span>
<span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$chunks</span> <span class="token operator">=</span> <span class="token variable">$stream</span><span class="token operator">-&gt;</span><span class="token function">readAllUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$resource</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$chunks</span> <span class="token keyword">as</span> <span class="token variable">$chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$buffer</span> <span class="token operator">.=</span> <span class="token variable">$chunk</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span> <span class="token comment">// aabbcc</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The position is automatically set to <code>0</code> (<em>the beginning of the stream</em>), when invoking the <code>readAllUsing()</code> method.</p></div>`,4);function H(Y,W){const e=l("router-link"),p=l("ExternalLinkIcon");return c(),r("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#determine-if-readable"},{default:t(()=>[s("Determine if Readable")]),_:1})]),n("li",null,[a(e,{to:"#read"},{default:t(()=>[s("Read")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#remaining-content"},{default:t(()=>[s("Remaining Content")]),_:1})]),n("li",null,[a(e,{to:"#all-contents"},{default:t(()=>[s("All Contents")]),_:1})])])]),n("li",null,[a(e,{to:"#read-characters"},{default:t(()=>[s("Read Characters")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#single-character"},{default:t(()=>[s("Single Character")]),_:1})]),n("li",null,[a(e,{to:"#all-characters"},{default:t(()=>[s("All Characters")]),_:1})])])]),n("li",null,[a(e,{to:"#read-lines"},{default:t(()=>[s("Read Lines")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#single-line"},{default:t(()=>[s("Single Line")]),_:1})]),n("li",null,[a(e,{to:"#single-line-until"},{default:t(()=>[s("Single Line Until")]),_:1})]),n("li",null,[a(e,{to:"#all-lines"},{default:t(()=>[s("All Lines")]),_:1})]),n("li",null,[a(e,{to:"#all-lines-using-delimiter"},{default:t(()=>[s("All Lines (Using delimiter)")]),_:1})])])]),n("li",null,[a(e,{to:"#scan-format"},{default:t(()=>[s("Scan Format")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#scan-all"},{default:t(()=>[s("Scan All")]),_:1})])])]),n("li",null,[a(e,{to:"#read-chunks"},{default:t(()=>[s("Read Chunks")]),_:1})]),n("li",null,[a(e,{to:"#read-all-using-callback"},{default:t(()=>[s("Read All using Callback")]),_:1})])])]),b,n("p",null,[s("Behind the scene, "),n("a",v,[s("PHP's "),h,a(p)]),s(" is used.")]),m,n("p",null,[g,s(" returns an "),n("a",f,[$,a(p)]),s(" generator which allows you to iterator throughout all the stream's characters.")]),w,n("p",null,[s("Behind the scene, "),n("a",_,[s("PHP's "),y,a(p)]),s(" is used.")]),q,n("p",null,[s("If you need to read all lines from a stream, then use the "),x,s(" method. It returns an "),n("a",S,[A,a(p)]),s(" generator.")]),L,n("p",null,[s("The "),T,s(" and "),R,s(" components inherit from the "),n("a",C,[F,a(p)]),s(" and can therefore be iterated directly. When doing so, it is the equivalent of invoking the "),U,s(" method.")]),I,n("p",null,[s("To scan the stream's content according to a format, use the "),N,s(" method. It accepts a "),G,s(" as specified by "),n("a",D,[s("PHP's "),E,a(p)]),s(".")]),O,n("p",null,[s('Lastly, if none of the default offered "read all" methods are to your liking, then you can use '),P,s(" method to specify a custom callback for how to read the stream's underlying resource. The method returns an "),n("a",B,[V,a(p)]),s(' generator, just like the other "read-all" methods.')]),z])}const M=i(u,[["render",H],["__file","reading.html.vue"]]);export{M as default};
