import{_ as s,p as n,q as a,a1 as e}from"./framework-efe98465.js";const t={},o=e(`<h1 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> Fetch</h1><p>Should you require more advanced filtering capabilities when fetching a single or multiple resources, then you can use the <code>fetch()</code> or <code>fetchMultiple()</code> methods. They accept a callback which allows you to specify a <a href="../../http/clients/query">query filter</a> to be applied onto the request.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Clients<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Redmine<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>

<span class="token variable">$issue</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ApiResource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;relations&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fetch-multiple" tabindex="-1"><a class="header-anchor" href="#fetch-multiple" aria-hidden="true">#</a> Fetch Multiple</h2><p>The <code>fetchMultiple()</code> allows you to paginate, via limit and offset. This is the preferred method to be used, when creating custom searches and filters.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$issues</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">fetchMultiple</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$request</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_on&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&lt;2020-01-01|2021-08-30&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;open&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;assigned_to_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Limit 50 and offset 2...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> All</h2><p><em><strong>Available since</strong> <code>v5.20.x</code></em></p><p>You may encounter situations where you need to fetch all available results for a given resource. This could for instance be several hundreds of issues. If you use <code>fetchMultiple()</code>, then you will have to manually invoke again, and again, until you have paginated through all desired results. Therefore, as an alternative to manually performing paginated requests, you can use the <code>all()</code> method. It will automatically perform requests, as you iterate through the results. Consider the following example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// No request performed at this point - a traversable instance is returned</span>
<span class="token variable">$issues</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Resource</span> <span class="token variable">$resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$request</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_on&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&lt;2020-01-01|2021-08-30&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;status_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;open&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;assigned_to_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Pool&quot; size - amount of results per request</span>

<span class="token comment">// Requests are ONLY performed when you iterate through</span>
<span class="token comment">// available results.</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$issues</span> <span class="token keyword">as</span> <span class="token variable">$issue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...do something with issue ... //</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>all()</code> method returns an <code>TraversableResults</code> instance, which contains a custom iterator that is able to perform API requests to Redmine, as needed, when you iterate through the results.</p><h3 id="pool-size" tabindex="-1"><a class="header-anchor" href="#pool-size" aria-hidden="true">#</a> Pool size</h3><p><strong>Warning</strong>: <em>Please read the following very carefully...</em></p><p>The second argument of the <code>all()</code> method, is the maximum pool size ~ how many results a request should return from Redmine (<em>request limit</em>). By default, it is set to <code>10</code>, which might not be fitting for your needs. You <em>SHOULD</em> always specify a reasonable pool size. If the size is too low and there are many records available, then your application&#39;s performance will decrease significantly, due to large amount of Http requests.</p><h3 id="count-all-available-results" tabindex="-1"><a class="header-anchor" href="#count-all-available-results" aria-hidden="true">#</a> Count all available results</h3><p>The <code>TraversableResults</code> also allows you to count the total amount of records available, for your request. Invoking this will not cost you extra requests, provided that you iterate through the results.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$issues</span> <span class="token operator">=</span> <span class="token class-name static-context">Issue</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// First request performed</span>
<span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$issues</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// E.g. 348</span>

<span class="token comment">// First results set is already loaded. New request is only</span>
<span class="token comment">// performed when record number 51 is reached in the iteration. </span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$issues</span> <span class="token keyword">as</span> <span class="token variable">$issue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...do something with issue ... //</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above example will cost 7 requests, given a total of 348 records and a pool size of 50.</p>`,18),p=[o];function l(c,i){return n(),a("div",null,p)}const r=s(t,[["render",l],["__file","fetch.html.vue"]]);export{r as default};
