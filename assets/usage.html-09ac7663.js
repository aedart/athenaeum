import{_ as p,M as o,p as i,q as c,R as n,N as e,U as t,t as s,a1 as l}from"./framework-efe98465.js";const r={},u=n("h1",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),s(" Usage")],-1),d={class:"table-of-contents"},k=l(`<h2 id="detect-mime-type" tabindex="-1"><a class="header-anchor" href="#detect-mime-type" aria-hidden="true">#</a> Detect MIME-Type</h2><p>The following illustrates a few ways that you can use the <code>Detector</code> component to detect the MIME-type of a file.</p><h3 id="via-stream" tabindex="-1"><a class="header-anchor" href="#via-stream" aria-hidden="true">#</a> Via stream</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-picture.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detect</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$mimeType</span><span class="token punctuation">;</span> <span class="token comment">// image/jpeg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-string" tabindex="-1"><a class="header-anchor" href="#via-string" aria-hidden="true">#</a> Via string</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-picture.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detect</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$mimeType</span><span class="token punctuation">;</span> <span class="token comment">// image/jpeg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="via-path" tabindex="-1"><a class="header-anchor" href="#via-path" aria-hidden="true">#</a> Via path</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;my-picture.jpg&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detectForFile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$mimeType</span><span class="token punctuation">;</span> <span class="token comment">// image/jpeg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-a-different-profile" tabindex="-1"><a class="header-anchor" href="#using-a-different-profile" aria-hidden="true">#</a> Using a different profile</h3><p>If you have multiple &quot;profiles&quot;, you can choose to specify what profile to use for the detection. This is applicable for both the <code>detect()</code> and <code>detectForFile()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Specify profile as 2nd argument</span>
<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detect</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;my-profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or...</span>
<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detectForFile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;my-profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="overwrite-profile-options" tabindex="-1"><a class="header-anchor" href="#overwrite-profile-options" aria-hidden="true">#</a> Overwrite profile options</h3><p>Alternatively, you may choose to specify custom options for a single detection. This is also applicable for both detection methods.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Custom options for the &quot;profile&quot;</span>
<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detect</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;my-profile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sample_size&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or...</span>
<span class="token variable">$mimeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Detector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detectForFile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;my-profile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;sample_size&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-mimetype-object" tabindex="-1"><a class="header-anchor" href="#the-mimetype-object" aria-hidden="true">#</a> The <code>MimeType</code> object</h2><p>The <code>MimeType</code> object that is returned by the <code>detect()</code> or <code>detectForFile()</code> method contains information about a file&#39;s MIME-type.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$mimeType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Aedart\\MimeTypes\\MimeType Object
(
    [description] =&gt; JPEG image data, JFIF standard 1.01, resolution (DPI),...
    [mime] =&gt; image/jpeg; charset=binary
    [type] =&gt; image/jpeg
    [encoding] =&gt; binary
    [known_extensions] =&gt; Array
        (
            [0] =&gt; jpeg
            [1] =&gt; jpg
            [2] =&gt; jpe
            [3] =&gt; jfif
        )
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h3><p>You can obtain individual properties via their accessor methods:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$type</span> <span class="token operator">=</span> <span class="token variable">$mimeType</span><span class="token operator">-&gt;</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$description</span> <span class="token operator">=</span> <span class="token variable">$mimeType</span><span class="token operator">-&gt;</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$encoding</span> <span class="token operator">=</span> <span class="token variable">$mimeType</span><span class="token operator">-&gt;</span><span class="token function">encoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ... etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For a complete list of available methods, please review <code>\\Aedart\\Contracts\\MimeTypes\\MimeType</code>.</p><h3 id="when-mime-type-not-detected" tabindex="-1"><a class="header-anchor" href="#when-mime-type-not-detected" aria-hidden="true">#</a> When MIME-type not detected</h3><div class="custom-container warning"><p class="custom-container-title">Caveat</p><p>If a MIME-type cannot be detected by <code>detect()</code> or <code>detectForFile</code>, then you will still receive a <code>MimeType</code> instance. But, all of its properties will be <code>null</code>!</p><p>To test if a returned <code>MimeType</code> instance contains an actual MIME-type, use the <code>isValid()</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mimeType</span><span class="token operator">-&gt;</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$mimeType</span><span class="token operator">-&gt;</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// text/plain</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$mimeType</span><span class="token operator">-&gt;</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="inside-laravel" tabindex="-1"><a class="header-anchor" href="#inside-laravel" aria-hidden="true">#</a> Inside Laravel</h2><p>When situated inside a regular Laravel application, then you can obtain the <code>Detector</code> instance by using the <code>MimeTypeDetectorTrait</code>. For instance, if you need to detect a file&#39;s MIME-type inside a controller:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Aedart<span class="token punctuation">\\</span>MimeTypes<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>MimeTypeDetectorTrait</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyController</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">MimeTypeDetectorTrait</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$detector</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getMimeTypeDetector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// ... remaining not shown ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function m(v,h){const a=o("router-link");return i(),c("div",null,[u,n("nav",d,[n("ul",null,[n("li",null,[e(a,{to:"#detect-mime-type"},{default:t(()=>[s("Detect MIME-Type")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#via-stream"},{default:t(()=>[s("Via stream")]),_:1})]),n("li",null,[e(a,{to:"#via-string"},{default:t(()=>[s("Via string")]),_:1})]),n("li",null,[e(a,{to:"#via-path"},{default:t(()=>[s("Via path")]),_:1})]),n("li",null,[e(a,{to:"#using-a-different-profile"},{default:t(()=>[s("Using a different profile")]),_:1})]),n("li",null,[e(a,{to:"#overwrite-profile-options"},{default:t(()=>[s("Overwrite profile options")]),_:1})])])]),n("li",null,[e(a,{to:"#the-mimetype-object"},{default:t(()=>[s("The MimeType object")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#properties"},{default:t(()=>[s("Properties")]),_:1})]),n("li",null,[e(a,{to:"#when-mime-type-not-detected"},{default:t(()=>[s("When MIME-type not detected")]),_:1})])])]),n("li",null,[e(a,{to:"#inside-laravel"},{default:t(()=>[s("Inside Laravel")]),_:1})])])]),k])}const g=p(r,[["render",m],["__file","usage.html.vue"]]);export{g as default};
